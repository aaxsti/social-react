{"version":3,"sources":["components/forms/FormsControls/FormsControls.tsx","components/common/Preloader/Preloader.tsx","selectors/auth-selectors.ts","components/forms/FormsControls/FormsControls.module.css","assets/images/user.png","hoc/withAuthRedirect.tsx","redux/friends-reducer.ts","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","redux/profile-reducer.ts","selectors/friends-selectors.ts","api/chat-api.ts","redux/chat-reducer.ts","assets/about/github.svg","assets/about/linkedin.svg","assets/about/vkontakte.svg","assets/about/telegram.svg","assets/about/gmail.svg","assets/images/preloader.svg","assets/images/sad.svg","assets/images/belarus.svg","assets/images/logo.svg","api/api.ts","api/auth-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","components/AppFooter/AppFooter.tsx","selectors/app-selectors.ts","components/AppSidebar/AppSidebar.tsx","components/NewsItem/NewsItem.tsx","pages/NewsPage/NewsPage.tsx","components/forms/LoginForm/LoginForm.tsx","components/Login/LoginPage.tsx","components/forms/SignUpForm/SignUpForm.tsx","pages/SignUpPage/SignUpPage.tsx","hoc/withSuspense.tsx","pages/ErrorPage/ErrorPage.tsx","components/Navbar/Friends/Friend/Friend.tsx","pages/FriendsPage/FriendsPage.tsx","components/common/Paginator/Paginator.tsx","components/User/User.tsx","selectors/users-selectors.ts","components/forms/UsersSearchForm/UsersSearchForm.tsx","utils/object-helpers.ts","redux/users-reducer.ts","pages/UsersPage/UsersPage.tsx","components/AppContent/AppContent.tsx","components/AppHeader/AppHeader.tsx","App.tsx","redux/dialogs-reducer.ts","redux/news-reducer.ts","redux/store/redux-store.ts","index.tsx","components/NewsItem/NewsItem.module.css","api/profile-api.ts","api/users-api.ts"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","InputField","style","width","createField","placeholder","name","validators","component","text","validate","Preloader","position","margin","src","preloader","alt","auth","state","selectIsAuth","createSelector","isAuth","selectAuthorizedUserId","login","userId","selectAuthorizedUserAvatar","avatar","selectAuthorizedUserEmail","email","module","exports","mapStateToPropsForRedirect","withAuthRedirect","WrappedComponent","connect","to","initialState","friends","actions","type","requestFriends","dispatch","a","usersAPI","getUsers","data","items","friendsReducer","action","required","value","maxLengthCreator","maxLength","length","posts","id","message","likesCount","date","Date","profile","status","editMode","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","profileAPI","getProfile","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","savePhoto","file","saveProfile","getState","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","newPost","Math","floor","random","filter","p","friendsPage","selectUserFriends","selectUserFriendsAmount","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","m","index","array","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","then","res","password","rememberMe","captcha","post","delete","getAuthUserData","meData","myAvatar","small","authReducer","initialized","appReducer","FooterWrapper","styled","Footer","AboutBlock","div","AboutBlockHeader","h3","IconsBlock","IconsBlockElement","AboutBlockInfo","AppFooter","href","githubIcon","linkedinIcon","vkIcon","telegramIcon","gmailIcon","selectInitialized","app","MenuWrapper","Menu","AppSidebar","Sider","Layout","borderRadius","mode","Item","key","HomeOutlined","HeartOutlined","ExceptionOutlined","UserOutlined","MessageOutlined","NewsItem","title","image","description","publishedAt","borderBottom","paddingBottom","mainBlock","titleFlex","slice","publishedBlock","published","descriptionBlock","News","newsElements","useSelector","newsPage","news","map","item","imageUrl","summary","padding","paddingTop","reduxForm","form","handleSubmit","onSubmit","undefined","formSummeryError","htmlType","LoginPage","useDispatch","LoginOutlined","formData","SignUpForm","paddingRight","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","format","Group","SignUpPage","UserAddOutlined","withSuspense","Suspense","fallback","ErrorPage","ErrorSadPic","Friend","friend","bordered","hoverable","cover","large","userPhoto","Meta","useState","searchTerm","setSearchTerm","useEffect","onChange","event","target","SearchOutlined","paddingLeft","val","toLowerCase","includes","f","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","ceil","pages","i","portionNumber","setPortionNumber","portionCount","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","LeftOutlined","cn","selectedPage","pageNumber","RightOutlined","User","user","followingInProgress","unfollow","follow","backgroundColor","boxShadow","marginTop","size","xs","sm","md","lg","xl","xxl","BelarusFlag","followed","disabled","some","UserDeleteOutlined","usersPage","users","u","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","UsersSearchForm","React","memo","onFilterChanged","enableReinitialize","initialValues","term","String","values","setSubmitting","isSubmitting","Option","updateObjectInArray","itemId","objPropName","newObjProps","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","history","useHistory","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","pathname","userFollow","bind","userUnfollow","marginBottom","BackTopStyled","AppContentWrapper","Content","ProfilePage","lazy","ChatPage","SuspendedProfilePage","SuspendedChatPage","withRouter","exact","path","render","NewsPage","UpOutlined","HeaderLogo","img","HeaderLogoWrapper","Col","HeaderUserAvatarLink","Link","HeaderLogoLink","AppHeader","authorizedUserEmail","authorizedUserAvatar","flex","Logo","MainFrameWrapper","App","promise","all","dialogs","imgLink","dialogsReducer","body","newMessageBody","newsReducer","rootReducer","combineReducers","profilePage","dialogsPage","chat","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Global","createGlobalStyle","ReactDOM","basename","process","document","getElementById","put","photoFile","log","FormData","append"],"mappings":"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","file":"static/js/main.598e2c23.chunk.js","sourcesContent":["import React, {FC} from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport {Input} from \"antd\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <span>\r\n                {children}\r\n            </span>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><TextArea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const InputField: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><Input {...input} {...restProps} style={{width: 300}}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   component={component}\r\n                   validate={validators}\r\n                   {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader  = () => {\r\n    return <div style={{position: 'absolute', margin: '0 auto'}}>\r\n        <img src={preloader} alt=\"Preloader picture\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\n\r\nconst auth = (state: AppStateType) => state.auth\r\n\r\nexport const selectIsAuth = createSelector(\r\n    [auth],\r\n    auth => auth.isAuth\r\n)\r\n\r\nexport const selectCurrentUserLogin = createSelector(\r\n    [auth],\r\n    auth => auth.login\r\n)\r\n\r\nexport const selectAuthorizedUserId = createSelector(\r\n    [auth],\r\n    auth => auth.userId\r\n)\r\n\r\nexport const selectAuthorizedUserAvatar = createSelector(\r\n    [auth],\r\n    auth => auth.avatar\r\n)\r\n\r\nexport const selectAuthorizedUserEmail = createSelector(\r\n    [auth],\r\n    auth => auth.email\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3MkGv\",\"error\":\"FormsControls_error__3kbED\",\"formSummeryError\":\"FormsControls_formSummeryError__1-U67\"};","module.exports = __webpack_public_path__ + \"static/media/user.57b075ed.png\";","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})(RedirectComponent);\r\n}","import {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    friends: [] as Array<UserType>\r\n}\r\n\r\nconst friendsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/FRIENDS/SET_FRIENDS':\r\n            return {...state, friends: action.friends}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setFriends: (friends: Array<UserType>) => ({type: 'SN/FRIENDS/SET_FRIENDS', friends} as const)\r\n}\r\n\r\nexport const requestFriends = (): ThunkType =>\r\n    async (dispatch) => {\r\n        let data = await usersAPI.getUsers(1, 100, '', true);\r\n        dispatch(actions.setFriends(data.items));\r\n    }\r\n\r\nexport default friendsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumbers\":\"Paginator_pageNumbers__nScyD\",\"paginator\":\"Paginator_paginator__1u4Wr\",\"pageNumber\":\"Paginator_pageNumber__3RwdL\",\"selectedPage\":\"Paginator_selectedPage__2p4Lg\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Заполните поле\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value)=> {\r\n    if (value && value.length > maxLength) return `Максимальная длина: ${maxLength} символов`;\r\n    return undefined;\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Привет, как дела?', likesCount: 25,\r\n            date: new Date(2021, 1, 21, 17, 55)},\r\n        {id: 2, message: 'Это мой первый пост', likesCount: 15,\r\n            date: new Date(2021, 3, 13, 13, 27)}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    editMode: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD_POST':\r\n            let newPost = {\r\n                id: Math.floor(Math.random() * 1000),\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n                date: new Date()\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case 'SN/PROFILE/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case 'SN/PROFILE/SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            };\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    } catch (error) {\r\n        // Error\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if (userId != null) {\r\n            dispatch(await getUserProfile(userId))\r\n        } else {\r\n            throw new Error('userId can`t be null')\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\n\r\nconst friendsPage = (state: AppStateType) => state.friendsPage\r\n\r\nexport const selectUserFriends = createSelector(\r\n    [friendsPage],\r\n    friendsPage => friendsPage.friends\r\n)\r\n\r\n\r\nexport const selectUserFriendsAmount = createSelector(\r\n    [friendsPage],\r\n    friendsPage => friendsPage.friends.length\r\n)\r\n","const subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n};\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n};\r\n\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n};\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback);\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error';\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}","import {FormAction} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\n// todo add id to message\r\n\r\n\r\ntype ChatMessageType = ChatMessageAPIType\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n};\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEIVED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEIVED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const),\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async () => {\r\n    chatAPI.sendMessage(message);\r\n}\r\n\r\nexport default chatReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/github.19f49232.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.4989ae0f.svg\";","module.exports = __webpack_public_path__ + \"static/media/vkontakte.b5870904.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.71da0f1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmail.aabb690e.svg\";","module.exports = __webpack_public_path__ + \"static/media/preloader.3ba7224e.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad.07a0b701.svg\";","module.exports = __webpack_public_path__ + \"static/media/belarus.54f7e3da.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d614f5e.svg\";","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"31c269a2-4de2-4018-98f9-0e5ea8f600fd\"\r\n    }\r\n});\r\n\r\n// 6a3eaab1-e015-4834-8a3d-4dbe63a05c04 - aaxsti\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","import {instance, APIResponseType, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n};","import {ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean,\r\n    avatar: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean, avatar: string | null) => ({\r\n        type: 'SN/AUTH/SET_USER_DATA', payload:\r\n            {userId, email, login, isAuth, avatar}\r\n    } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let myAvatar = await profileAPI.getProfile(meData.data.id);\r\n        const avatar = myAvatar.photos.small;\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true, avatar));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        await dispatch(getAuthUserData());\r\n    } else {\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false, null));\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsTypes} from \"./store/redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state=  initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<any, AppStateType, unknown, ActionsType>\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n};\r\n\r\nexport default appReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import React, {FC} from \"react\";\r\nimport githubIcon from '../../assets/about/github.svg'\r\nimport linkedinIcon from '../../assets/about/linkedin.svg'\r\nimport vkIcon from '../../assets/about/vkontakte.svg'\r\nimport telegramIcon from '../../assets/about/telegram.svg'\r\nimport gmailIcon from '../../assets/about/gmail.svg'\r\nimport {Footer} from \"antd/es/layout/layout\";\r\nimport styled from \"styled-components\";\r\n\r\ntype PropsType = {}\r\n\r\nconst FooterWrapper = styled(Footer)`\r\n  text-align: center;\r\n  background-color: #e8e8ed\r\n`\r\nconst AboutBlock = styled.div`\r\n  margin: 0 auto;\r\n  width: 500px;\r\n`\r\nconst AboutBlockHeader = styled.h3`\r\n  margin: 0;\r\n  padding: 0 0 15px 0;\r\n  font-weight: lighter;\r\n  text-align: center;\r\n  font-size: 18px;\r\n`\r\nconst IconsBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nconst IconsBlockElement = styled.a`\r\n  outline: none;\r\n  padding-right: 10px;\r\n\r\n  &:last-child {\r\n    padding-right: 0;\r\n  }\r\n`\r\nconst AboutBlockInfo = styled.div`\r\n  font-weight: lighter;\r\n  padding-top: 20px;\r\n`\r\n\r\nconst AppFooter: FC<PropsType> = () => {\r\n    return (\r\n        <FooterWrapper>\r\n            <AboutBlock>\r\n                <AboutBlockHeader>\r\n                    Me in social\r\n                </AboutBlockHeader>\r\n                <IconsBlock>\r\n                    <IconsBlockElement href='https://github.com/aaxsti'>\r\n                        <img src={githubIcon} alt='github link icon'/>\r\n                    </IconsBlockElement>\r\n                    <IconsBlockElement href='https://linkedin.com/in/astapenko-maxim'>\r\n                        <img src={linkedinIcon} alt='linkedin link icon'/>\r\n                    </IconsBlockElement>\r\n                    <IconsBlockElement href='https://vk.com/bladerunner1'>\r\n                        <img src={vkIcon} alt='vk link icon'/>\r\n                    </IconsBlockElement>\r\n                    <IconsBlockElement href='https://t.me/astapenkomaxim'>\r\n                        <img src={telegramIcon} alt='telegram link icon'/>\r\n                    </IconsBlockElement>\r\n                    <IconsBlockElement href='mailto:3646824@gmail.com'>\r\n                        <img src={gmailIcon} alt='gmail link icon'/>\r\n                    </IconsBlockElement>\r\n                </IconsBlock>\r\n                <AboutBlockInfo>\r\n                    Social Network ©2021 Created by Maxim Astapenko\r\n                </AboutBlockInfo>\r\n            </AboutBlock>\r\n        </FooterWrapper>\r\n    )\r\n}\r\n\r\nexport default AppFooter;","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst app = (state: AppStateType) => state.app\r\n\r\nexport const selectInitialized = createSelector(\r\n    [app],\r\n    app => app.initialized\r\n)\r\n","import React from 'react';\r\nimport {Layout, Menu} from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ExceptionOutlined, HeartOutlined, HomeOutlined, MessageOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport styled from 'styled-components';\r\n\r\nconst MenuWrapper = styled(Menu)`\r\n  padding-top: 15px;\r\n  height: 100%;\r\n  border-radius: 2px;\r\n`\r\n\r\nconst AppSidebar = () => {\r\n\r\n    const {Sider} = Layout\r\n\r\n    return (\r\n        <Sider width={190} style={{borderRadius: 2}}>\r\n            <MenuWrapper mode=\"inline\">\r\n                <Menu.Item key=\"1\">\r\n                    <Link to=\"/profile\">\r\n                        <HomeOutlined/>\r\n                        Моя страница\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\">\r\n                    <Link to=\"/friends\">\r\n                        <HeartOutlined/>\r\n                        Мои друзья\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\">\r\n                    <Link to=\"/news\">\r\n                        <ExceptionOutlined/>\r\n                        Новоости\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\">\r\n                    <Link to=\"/users\">\r\n                        <UserOutlined/>\r\n                        Пользователи\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\">\r\n                    <Link to=\"/chat\">\r\n                        <MessageOutlined/>\r\n                        Мессенджер\r\n                    </Link>\r\n                </Menu.Item>\r\n            </MenuWrapper>\r\n        </Sider>\r\n    );\r\n}\r\n\r\nexport default AppSidebar;","import React, {FC} from \"react\";\r\nimport s from './NewsItem.module.css'\r\nimport {Image} from 'antd';\r\n\r\ntype PropsType = {\r\n    title : string\r\n    image : string\r\n    description : string\r\n    publishedAt : string\r\n    key ?: number\r\n}\r\n\r\nconst NewsItem: FC<PropsType>  = ({title, image, description, publishedAt}) => {\r\n    return (\r\n        <>\r\n        <div style={{borderBottom: '1px #f0f0f0 solid', paddingBottom: 5}}>\r\n            <div className={s.mainBlock}>\r\n                <div className={s.titleFlex}>\r\n                    <h3 className={s.title}>{title.length >= 84 ? `${title.slice(0, 84)}...` : title}</h3>\r\n                    <div className={s.publishedBlock}><h4 className={s.published}>{publishedAt}</h4></div>\r\n\r\n                </div>\r\n                <div className={s.descriptionBlock}>\r\n                    <p className={s.description}>{description}</p></div>\r\n            </div>\r\n            <div>\r\n                <Image src={image} className={s.image} alt={''}/>\r\n            </div>\r\n            <br/>\r\n        </div>\r\n        <br/>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default NewsItem;","import React, {FC} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store/redux-store\";\r\nimport NewsItem from \"../../components/NewsItem/NewsItem\";\r\nimport {Divider} from \"antd\";\r\nimport {ExceptionOutlined} from \"@ant-design/icons\";\r\ntype PropsType = {}\r\n\r\nconst News: FC<PropsType> = () => {\r\n    const news = useSelector((state: AppStateType) => state.newsPage.news)\r\n\r\n    let newsElements = news.map((item, index) => <NewsItem\r\n        title={item.title} image={item.imageUrl} description={item.summary}\r\n        publishedAt={item.publishedAt} key={index}/>)\r\n\r\n    return (\r\n        <div style={{width: 700}}>\r\n            <h2><ExceptionOutlined/> Новости</h2>\r\n            <Divider style={{margin: 0, padding: 0}}/>\r\n            <div style={{paddingTop: 5}}>\r\n            {newsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default News;","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../FormsControls/FormsControls.module.css\";\r\nimport {createField, GetStringKeys, InputField} from \"../FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {LoginFormOwnProps, LoginFormValuesType} from \"../../Login/LoginPage\";\r\nimport {Button, Col, Input, Row} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {EyeInvisibleOutlined, EyeTwoTone} from \"@ant-design/icons\";\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nexport const LoginForm: FC<InjectedFormProps<LoginFormValuesType & LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <Row style={{width: '200px'}}>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], InputField)}\r\n                    </Row>\r\n\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        {createField<LoginFormValuesTypeKeys>(\"Пароль\", \"password\", [required], InputField, {type: \"password\"})}\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], InputField, {type: \"checkbox\"}, \"\")}\r\n                            Запомнить меня\r\n                    </Row>\r\n                </Row>\r\n                {error &&\r\n                <div className={style.formSummeryError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n\r\n                <div>\r\n                    <Button htmlType=\"submit\">Войти</Button>\r\n                    <NavLink to={'/signup'}><Button type=\"link\">Создать аккаунт</Button></NavLink>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);","import React, {FC} from \"react\";\r\nimport LoginForm from \"../forms/LoginForm/LoginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/store/redux-store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {LoginOutlined} from \"@ant-design/icons\";\r\nimport {selectIsAuth} from \"../../selectors/auth-selectors\";\r\n\r\nexport type LoginFormOwnProps = {}\r\n\r\nexport type LoginFormValuesType = {\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\n\r\nexport const LoginPage: FC = () => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{paddingBottom: 8}}>Войти в аккаунт &nbsp; &nbsp;<LoginOutlined /></h1>\r\n            <LoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}","import React, {FC} from \"react\";\r\nimport {Button, Col, DatePicker, Input, Radio, Row} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {EyeInvisibleOutlined, EyeTwoTone} from \"@ant-design/icons\";\r\n\r\ntype PropsType = {}\r\n\r\nconst dateFormat = 'YYYY/MM/DD';\r\n\r\nexport const SignUpForm: FC<PropsType> = () => {\r\n    return (\r\n        <form>\r\n            <Row>\r\n                <Col style={{paddingRight: 30}}>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input placeholder={'Email'}/>\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input.Password\r\n                            placeholder=\"Пароль\"\r\n                            iconRender={visible => (visible ? <EyeTwoTone/> : <EyeInvisibleOutlined/>)}\r\n                        />\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input.Password\r\n                            placeholder=\"Повторите пароль\"\r\n                            iconRender={visible => (visible ? <EyeTwoTone/> : <EyeInvisibleOutlined/>)}\r\n                        />\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input placeholder={'Имя'}/>\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input placeholder={'Фамилия'}/>\r\n                    </Row>\r\n                </Col>\r\n                <Col>\r\n                    <Row style={{paddingBottom: 15, width: 220}}>\r\n                        <Input placeholder={'Номер телефона'}/>\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 23}}>\r\n                        <Row style={{paddingRight: 10, paddingTop: 6}}>Дата рождения :</Row>\r\n                        <DatePicker placeholder={'Выберите дату'} format={dateFormat}/>\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Row style={{paddingRight: 30}}>Пол :</Row>\r\n                        <Radio.Group>\r\n                            <Radio value={1} style={{paddingRight: 20}}>Мужской</Radio>\r\n                            <Radio value={2}>Женский</Radio>\r\n                        </Radio.Group>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Button>Создать аккаунт</Button>\r\n                <NavLink to={'/login'}><Button type=\"link\">Уже есть аккаунт</Button></NavLink>\r\n            </Row>\r\n        </form>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {UserAddOutlined} from \"@ant-design/icons\";\r\nimport {SignUpForm} from \"../../components/forms/SignUpForm/SignUpForm\";\r\n\r\nexport const SignUpPage: FC = () => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{paddingBottom: 8}}>Создать аккаунт &nbsp; &nbsp;<UserAddOutlined /></h1>\r\n            <SignUpForm/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\nexport default withSuspense;","import React from 'react';\r\nimport ErrorSadPic from '../../assets/images/sad.svg'\r\n\r\nconst ErrorPage = () => {\r\n    return (\r\n        <div>\r\n            <h2>\r\n                404 NOT FOUND\r\n            </h2>\r\n            <img style={{width: '40px'}}\r\n                 src={ErrorSadPic}\r\n                 alt='404 Error picture'\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorPage;","import React, {FC} from 'react';\r\nimport {UserType} from \"../../../../types/types\";\r\nimport {Card, Col} from \"antd\";\r\nimport Meta from \"antd/es/card/Meta\";\r\nimport userPhoto from \"../../../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    friend: UserType\r\n}\r\n\r\nconst Friend: FC<PropsType> = ({friend}) => {\r\n    return (\r\n        <Col style={{margin: '0 auto', padding: '10px 10px 0 0'}}>\r\n            <NavLink to={'/profile/' + friend.id}>\r\n                <Card\r\n                    bordered={true}\r\n                    hoverable\r\n                    style={{width: 150}}\r\n                    cover={<img\r\n                        alt=\"friend photo\"\r\n                        src={friend.photos.large != null ? friend.photos.large : userPhoto}/>\r\n                    }\r\n                >\r\n                    <Meta title={friend.name} description={friend.status && friend.status.length >= 20 ? `${friend.status.slice(0, 20)}...` : friend.status}/>\r\n\r\n\r\n                </Card>\r\n            </NavLink>\r\n        </Col>\r\n    )\r\n};\r\n\r\nexport default Friend;","import React, {FC, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store/redux-store\";\r\nimport {requestFriends} from \"../../redux/friends-reducer\";\r\nimport {Input, Row} from \"antd\";\r\nimport Friend from \"../../components/Navbar/Friends/Friend/Friend\";\r\nimport {SearchOutlined} from \"@ant-design/icons\";\r\nimport {HeartOutlined} from \"@ant-design/icons\";\r\nimport Preloader from \"../../components/common/Preloader/Preloader\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsAuth} from \"../../selectors/auth-selectors\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {selectUserFriends} from \"../../selectors/friends-selectors\";\r\n\r\ntype PropsType = {}\r\n\r\nconst FriendsPage: FC<PropsType> = () => {\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const friends = useSelector(selectUserFriends)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(requestFriends());\r\n    }, [])\r\n\r\n\r\n    if (!friends) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 style={{paddingBottom: 9}}><HeartOutlined/> Мои друзья</h2>\r\n            <div>\r\n                <Input style={{width: 200}} placeholder={'Поиск...'}\r\n                       onChange={event => {\r\n                           setSearchTerm(event.target.value)\r\n                       }}/>\r\n                <SearchOutlined style={{paddingLeft: 10}}/>\r\n            </div>\r\n            <br/>\r\n            <Row>\r\n                {\r\n                    friends\r\n                        .filter(val => {\r\n                            if (searchTerm === \"\") {\r\n                                return val;\r\n                            } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())) {\r\n                                return val;\r\n                            }\r\n                        })\r\n                        .map(f => <Friend\r\n                            friend={f}\r\n                            key={f.id}\r\n                        />)\r\n                }\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withAuthRedirect(FriendsPage);","import React, {FC, useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames';\r\nimport { Button } from \"antd\";\r\nimport {LeftOutlined, RightOutlined } from \"@ant-design/icons\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    portionSize?: number\r\n\r\n    onPageChanged?: (pageNumber: number) => void\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({\r\n                                      totalItemsCount,\r\n                                      pageSize,\r\n                                      currentPage,\r\n                                      onPageChanged = x => x,\r\n                                      portionSize = 10\r\n                                  }) => {\r\n    // Getting total pages count\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    // Pushing pages to array\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n\r\n        <div className={styles.paginator}>\r\n\r\n            {portionNumber > 1 &&\r\n            <Button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}><LeftOutlined /></Button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [styles.selectedPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p);\r\n                                 }}>{p}</span>\r\n\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <Button onClick={() => {\r\n                setPortionNumber((portionNumber + 1))\r\n            }}><RightOutlined /></Button>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React, {FC} from \"react\";\r\nimport s from \"../../pages/UsersPage/Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Avatar, Button} from \"antd\";\r\nimport BelarusFlag from \"../../assets/images/belarus.svg\";\r\nimport {UserAddOutlined, UserDeleteOutlined} from \"@ant-design/icons\";\r\nimport Item from \"antd/es/list/Item\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <Item style={{backgroundColor: '#f0f2f5', boxShadow: '0px 2px 2px rgba(0, 0, 0, 0.12)', marginTop: 15, borderRadius: 2}}>\r\n            <Item.Meta\r\n                avatar={<NavLink to={'/profile/' + user.id}>\r\n                    <Avatar src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                            size={{xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 80}}/>\r\n                </NavLink>}\r\n                title={user.name}\r\n                description={\r\n                    <div>\r\n                        {user.status ? user.status : ' '}\r\n\r\n                        <div>\r\n                            <img style={{padding: '0 0 3px 0', width: 15}}\r\n                                  src={BelarusFlag}\r\n                                  alt={'Country flag'}/> {\"Беларусь\"}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n            <div>\r\n                {user.followed\r\n                    ? <Button disabled={followingInProgress\r\n                        .some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  unfollow(user.id);\r\n                              }}>\r\n                        <UserDeleteOutlined/></Button>\r\n\r\n                    : <Button disabled={followingInProgress\r\n                        .some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  follow(user.id)\r\n                              }}>\r\n                        <UserAddOutlined/></Button>\r\n                }\r\n            </div>\r\n        </Item>\r\n    )\r\n}\r\n\r\nexport default User;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"../redux/store/redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import {Form, Formik} from \"formik\";\r\nimport React, {FC} from \"react\";\r\nimport {FilterType} from \"../../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../../selectors/users-selectors\";\r\nimport Button from \"antd/lib/button\";\r\nimport {Input, Select} from \"formik-antd\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\n\r\nconst usersSearchFormValidate = () => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n\r\n        const filter = useSelector(getUsersFilter)\r\n        const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === \"null\" ? null : values.friend === \"true\"\r\n            }\r\n            onFilterChanged(filter)\r\n            setSubmitting(false)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                    validate={usersSearchFormValidate}\r\n                    onSubmit={submit}\r\n                >\r\n                    {({isSubmitting}) => (\r\n                        <Form>\r\n                            <Input name=\"term\" style={{width: 200}}/>\r\n\r\n                            <Button htmlType=\"submit\" disabled={isSubmitting}>\r\n                                <SearchOutlined />\r\n                            </Button>\r\n\r\n                            <Select name=\"friend\" style={{width: 160}}>\r\n                                <Select.Option value=\"null\">Все</Select.Option>\r\n                                <Select.Option value=\"true\">Только друзья</Select.Option>\r\n                                <Select.Option value=\"false\">Все кроме друзей</Select.Option>\r\n                            </Select>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n)","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {APIResponseType, ResultCodesEnum} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true as boolean,\r\n    followingInProgress: [] as Array<number>,    // array of user id`s\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state, users: action.users}\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.count}\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER':\r\n            return {...state, filter: action.payload}\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SN/USERS/SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: 'SN/USERS/SET_FILTER',\r\n        payload: filter\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number,\r\n                             filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    }\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsType) => {\r\n\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.userFollow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n\r\nexport const unfollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.userUnfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>","import React, {FC, useEffect} from \"react\";\r\nimport Paginator from \"../../components/common/Paginator/Paginator\";\r\nimport User from \"../../components/User/User\";\r\nimport {UsersSearchForm} from \"../../components/forms/UsersSearchForm/UsersSearchForm\";\r\nimport {FilterType, requestUsers, follow, unfollow} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress, getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../selectors/users-selectors\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\nimport Preloader from \"../../components/common/Preloader/Preloader\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {List, Pagination} from \"antd\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\n\r\nconst UsersPage: FC<PropsType> = () => {\r\n\r\n    const isFetching = useSelector(getIsFetching);\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    }\r\n\r\n    const userFollow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const userUnfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    if (!users) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div style={{width: 1000}}>\r\n            <h2><UserOutlined/> Пользователи</h2>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n            {/*<Pagination*/}\r\n            {/*    pageSize={pageSize}*/}\r\n            {/*    current={currentPage}*/}\r\n            {/*    total={totalUsersCount}*/}\r\n            {/*    onChange={onPageChanged}*/}\r\n            {/*    showSizeChanger={false}*/}\r\n            {/*/>*/}\r\n\r\n            <Paginator\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n            />\r\n            <div style={{borderRadius: 2, marginBottom: 10}}>\r\n                <List size={'large'}>\r\n                    {users.map(u => <User\r\n                        user={u}\r\n                        key={u.id}\r\n                        followingInProgress={followingInProgress}\r\n                        unfollow={userUnfollow}\r\n                        follow={userFollow}\r\n                    />)}\r\n                </List>\r\n            </div>\r\n            <Paginator\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(UsersPage);","import React, {FC} from 'react';\r\nimport {Redirect, Route, RouteComponentProps, Switch, withRouter} from \"react-router-dom\";\r\nimport NewsPage from \"../../pages/NewsPage/NewsPage\";\r\nimport {LoginPage} from \"../Login/LoginPage\";\r\nimport {SignUpPage} from \"../../pages/SignUpPage/SignUpPage\";\r\nimport {BackTop} from \"antd\";\r\nimport withSuspense from \"../../hoc/withSuspense\";\r\nimport {UpOutlined} from \"@ant-design/icons\";\r\nimport styled from 'styled-components';\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport ErrorPage from \"../../pages/ErrorPage/ErrorPage\";\r\nimport FriendsPage from \"../../pages/FriendsPage/FriendsPage\";\r\nimport UsersPage from '../../pages/UsersPage/UsersPage';\r\n\r\nconst BackTopStyled = styled.div`\r\n  height: 40px;\r\n  width: 40px;\r\n  line-height: 40px;\r\n  border-radius: 2px;\r\n  background-color: #1088e9;\r\n  color: #fff;\r\n  text-align: center;\r\n  font-size: 14px\r\n`\r\nconst AppContentWrapper = styled(Content)`\r\n  border-radius: 2px;\r\n  margin: 0 0 0 50px;\r\n  padding: 30px;\r\n  min-height: 300px;\r\n  display: flex;\r\n  background-color: white\r\n`\r\n\r\nconst ProfilePage = React.lazy(() => import('../../pages/ProfilePage/ProfilePage'))\r\nconst ChatPage = React.lazy(() => import('../../pages/ChatPage/ChatPage'))\r\n\r\nconst SuspendedProfilePage = withSuspense(ProfilePage)\r\nconst SuspendedChatPage = withSuspense(ChatPage)\r\n\r\nconst AppContent: FC<PropsType> = () => {\r\n    return (\r\n        <AppContentWrapper>\r\n            <Switch>\r\n                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                <Route path='/profile/:userId?' render={() => <SuspendedProfilePage/>}/>\r\n                <Route path='/news' render={() => <NewsPage/>}/>\r\n                <Route path='/users' render={() => <UsersPage/>}/>\r\n                <Route path='/friends' render={() => <FriendsPage/>}/>\r\n                <Route path='/login' render={() => <LoginPage/>}/>\r\n                <Route path='/signup' render={() => <SignUpPage/>}/>\r\n                <Route path='/chat' render={() => <SuspendedChatPage/>}/>\r\n                <Route path='*' render={() => <ErrorPage/>}/>\r\n            </Switch>\r\n            <BackTop>\r\n                <BackTopStyled>\r\n                    <UpOutlined/>\r\n                </BackTopStyled>\r\n            </BackTop>\r\n        </AppContentWrapper>\r\n    );\r\n}\r\n\r\ntype PropsType = RouteComponentProps & {}\r\n\r\nexport default withRouter(AppContent);","import React from 'react';\r\nimport {Header} from \"antd/es/layout/layout\";\r\nimport styled from \"styled-components\";\r\nimport {Avatar, Button, Col, Row} from \"antd\";\r\nimport Logo from \"../../assets/images/logo.svg\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectAuthorizedUserAvatar, selectAuthorizedUserEmail, selectIsAuth} from \"../../selectors/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/store/redux-store\";\r\n\r\nconst HeaderLogo = styled.img`\r\n  width: 40px;\r\n`\r\n\r\nconst HeaderLogoWrapper = styled(Col)`\r\n  padding-left: 120px;\r\n`\r\n\r\nconst HeaderUserAvatarLink = styled(Link)`\r\n  padding-right: 30px;\r\n`\r\n\r\nconst HeaderLogoLink = styled(Link)`\r\n  color: black;\r\n\r\n  &:hover {\r\n    color: #537f93;\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\n\r\nconst AppHeader = () => {\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const authorizedUserEmail = useSelector(selectAuthorizedUserEmail)\r\n    const authorizedUserAvatar = useSelector(selectAuthorizedUserAvatar)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <Header style={{backgroundColor: '#979ea9'}}>\r\n            <Row>\r\n                <HeaderLogoWrapper flex=\"1 1 50px\">\r\n                    <HeaderLogo src={Logo} alt='App logo'/>\r\n                    <HeaderLogoLink to='/profile'>\r\n                        <span style={{paddingLeft: 63}}>{authorizedUserEmail} </span>\r\n                    </HeaderLogoLink>\r\n                </HeaderLogoWrapper>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col flex=\"0 1 190px\">\r\n                            <HeaderUserAvatarLink to=\"/profile\">\r\n                                <Avatar src={authorizedUserAvatar} size={\"large\"}/>\r\n                            </HeaderUserAvatarLink>\r\n                            <Button onClick={logoutCallback}>\r\n                                Выйти\r\n                            </Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col flex=\"0 1 120px\">\r\n                        <Button>\r\n                            <Link to={'/login'}>\r\n                                Войти\r\n                            </Link>\r\n                        </Button>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        </Header>\r\n    );\r\n}\r\n\r\nexport default AppHeader;","import React, {FC, useEffect} from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {Layout} from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport AppFooter from \"./components/AppFooter/AppFooter\";\r\nimport {selectInitialized} from \"./selectors/app-selectors\";\r\nimport AppSidebar from \"./components/AppSidebar/AppSidebar\";\r\nimport AppContent from \"./components/AppContent/AppContent\";\r\nimport AppHeader from \"./components/AppHeader/AppHeader\";\r\nimport styled from 'styled-components';\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\n\r\nconst MainFrameWrapper = styled(Layout)`\r\n  margin: 0 auto;\r\n  min-width: 1100px;\r\n  padding: 30px 0 0 0;\r\n`\r\n\r\nexport const App: FC<PropsType> = () => {\r\n    const initialized = useSelector(selectInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    // if (!initialized) {\r\n    //     return <div style={{paddingLeft: '45%', paddingTop: 300}}><Preloader/></div>\r\n    // }\r\n\r\n    return (\r\n        <Layout>\r\n            <AppHeader/>\r\n            <MainFrameWrapper>\r\n                <AppSidebar/>\r\n                <AppContent/>\r\n            </MainFrameWrapper>\r\n            <AppFooter/>\r\n        </Layout>\r\n    )\r\n}\r\n\r\ntype PropsType = {}\r\n\r\nexport default App;","import {DialogType, MessageType} from \"../types/types\";\r\nimport {InferActionsTypes} from \"./store/redux-store\";\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi!'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'qq'},\r\n    ] as Array<MessageType>,\r\n    dialogs: [\r\n        {id: 1, name: 'Maxim', imgLink: 'https://picsum.photos/400/400'},\r\n        {id: 2, name: 'Ilya', imgLink: 'https://picsum.photos/100/100'},\r\n        {id: 3, name: 'Ivan', imgLink: 'https://picsum.photos/200/200'},\r\n        {id: 4, name: 'Stas', imgLink: 'https://picsum.photos/80/80'},\r\n        {id: 5, name: 'Sasha', imgLink: 'https://picsum.photos/90/90'},\r\n    ] as Array<DialogType>\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND_MESSAGE\":\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {NewsType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {NewsAPI} from \"../api/news-api\";\r\n\r\nlet initialState: NewsType = {\r\n    news: [\r\n        {\r\n            title: 'Обновлен дизайн приложения',\r\n            imageUrl: 'https://sun9-69.userapi.com/impg/AxxeCAiyethb_wtRT_Mb5kKtcZzP03r3M4zGuA/7RUUWX60C9k.jpg?size=1654x920&quality=96&sign=63d3c45b9b712da473f1163dc399557a&type=album',\r\n            summary: 'Была обнвлена страница профиля пользователя приложения, список пользователей, список друзей. Также ' +\r\n                'убраны баги связанные с профилем пользователя и списком друзей. На страницу профиля добавлено поле количества друзей ' +\r\n                'пользователя, исправлена работа лайков постов пользователя.',\r\n            publishedAt: '04-06-2021'\r\n        },\r\n        {\r\n            title: 'Добавлен поиск пользователей и пагинация',\r\n            imageUrl: 'https://sun9-36.userapi.com/impg/2vy2rXeYUR5uk6OsDvQNmSTknBXX0wKANjXVFA/wnNNnA_QZus.jpg?size=625x603&quality=96&sign=fa931ca45802a1ac04b2c0771bb6b496&type=album',\r\n            summary: 'В раздел \"Пользователи\" было добавлено текстовое поле для поиска пользователей по имени и/или фамилии. ' +\r\n                'Помимо текстового поля был добавлен раскрывающийся список с фильтрами поиска, такими как: поиск по друзьям, поиск всех пользователей' +\r\n                ', а также поиск пользователей, которых нет у вас в друзьях.',\r\n            publishedAt: '21-03-2021'\r\n        },\r\n        {\r\n            title: 'Добавлен раздел \"Мои друзья\"',\r\n            imageUrl: 'https://sun9-34.userapi.com/impg/AND3E6RAo3VSnpSB6H1bItI0rQyaDpFUDPdqqA/kvs3rbDenZk.jpg?size=1093x786&quality=96&sign=269ee2ce00b189f82f74706be94f6d14&type=album',\r\n            summary: 'Создан раздел \"Мои друзья\" со списком добавленных пользователем друзей. Также разработана строка для поиска ' +\r\n                'друзей по имени и/или фамилии.',\r\n            publishedAt: '04-04-2021'\r\n        },\r\n        {\r\n            title: 'Добавлена возможность создавать посты',\r\n            imageUrl: 'https://sun9-73.userapi.com/impg/xc9OitnHM3R2DYw6iqABWnjR3wDxv64bpkKaRA/bjunwNdyJC0.jpg?size=932x594&quality=96&sign=83d78f786cf9387b809f1c2bc8ef2545&type=album',\r\n            summary: 'Добавлена возможность создавать посты на собственных страницах профиля. Также имеется возможность ' +\r\n                '\"лайкать\" созданные посты.',\r\n            publishedAt: '25-02-2021'\r\n        }\r\n    ]\r\n}\r\n\r\nconst newsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setNews: (data: Array<any>) => ({type: 'SN/NEWS/FIND_CITY', data} as const),\r\n}\r\n\r\n// export const requestNews = (size: number): ThunkType => {\r\n//     return async (dispatch) => {\r\n//         let response = await NewsAPI.findApi(size)\r\n//         dispatch(actions.setNews(response.data))\r\n//         console.log(response.data)\r\n//     }\r\n// }\r\n\r\nexport default newsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"../profile-reducer\";\r\nimport dialogsReducer from \"../dialogs-reducer\";\r\nimport usersReducer from \"../users-reducer\";\r\nimport authReducer from \"../auth-reducer\";\r\nimport appReducer from \"../app-reducer\";\r\nimport chatReducer from \"../chat-reducer\";\r\nimport newsReducer from \"../news-reducer\";\r\nimport friendsReducer from \"../friends-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    profilePage: profileReducer,\r\n    friendsPage: friendsReducer,\r\n    newsPage: newsReducer,\r\n    usersPage: usersReducer,\r\n    dialogsPage: dialogsReducer,\r\n    chat: chatReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;  // (globalState: GLOBALSTATE) => GLOBALSTATE\r\nexport type AppStateType = ReturnType<RootReducerType> // Type that return RootReducerType\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store/redux-store\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {createGlobalStyle} from \"styled-components\";\n\nconst Global = createGlobalStyle`\n  * {\n    box-sizing: content-box;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    scrollbar-width: thin;       \n    scrollbar-color: #a3cfff #dadcdf;\n  }\n`\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <Global/>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"NewsItem_image__3X4T5\",\"descriptionBlock\":\"NewsItem_descriptionBlock__gIftY\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n\r\n    savePhoto(photoFile: File) {\r\n        console.log(photoFile)\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n};","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    userFollow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    userUnfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n};"],"sourceRoot":""}