{"version":3,"sources":["utils/scroll-chat-helper.ts","components/forms/AddMessageForm/AddMessageForm.styled.ts","components/CommonChat/Messages/Message/Message.styled.ts","components/CommonChat/Messages/Message/Message.tsx","selectors/chat-selectors.ts","components/CommonChat/Messages/Messages.tsx","components/forms/AddMessageForm/AddMessageForm.tsx","pages/CommonChatPage/CommonChatPage.tsx"],"names":["scrollChatHelper","e","isAutoScroll","setIsAutoScroll","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","autoScrollHelper","current","scrollIntoView","behavior","window","scrollTo","AddMessageFormElement","styled","Col","AddMessageFormTextArea","TextArea","MessageElement","div","MessageUserAvatar","img","MessageUserName","b","MessageText","span","React","memo","message","alt","src","photo","userPhoto","userName","chat","state","selectChatStatus","createSelector","status","selectChatMessages","messages","CommonMessages","Messages","useSelector","messagesAnchorRef","useRef","useState","useEffect","onScroll","map","m","key","id","ref","AddMessageForm","setMessage","dispatch","useDispatch","placeholder","onPressEnter","event","preventDefault","sendMessage","autoSize","onChange","value","disabled","CommonChatMain","withAuthRedirect","startMessagesListening","stopMessagesListening","WechatOutlined"],"mappings":"oHAEA,oEAAO,IAAMA,EAAmB,SAC5BC,EACAC,EACAC,GAEA,IAAMC,EAAUH,EAAEI,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7ER,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAI3BQ,EAAmB,SAACV,EAA8BC,GAC3D,IAAME,EAAUH,EAAEW,QACX,OAAPR,QAAO,IAAPA,KAASS,eAAe,CAACC,SAAU,WAC/BZ,IACO,OAAPE,QAAO,IAAPA,KAASS,eAAe,CAACC,SAAU,YAEvCC,OAAOC,SAAS,EAAE,K,wJCjBTC,EAAwBC,YAAOC,IAAPD,CAAH,oDAIrBE,EAAyBF,YAAOG,IAAPH,CAAH,+D,4LCNtBI,EAAiBJ,IAAOK,IAAV,mFAKdC,EAAoBN,IAAOO,IAAV,oEAKjBC,EAAkBR,IAAOS,EAAV,kEAKfC,EAAcV,IAAOW,KAAV,kDCDTC,MAAMC,MAXgC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnD,OACQ,kBAACV,EAAD,KACI,kBAACE,EAAD,CAAmBS,IAAI,eAAeC,IAAuB,OAAlBF,EAAQG,MAAiBH,EAAQG,MAAQC,MACpF,kBAACV,EAAD,KAAkBM,EAAQK,UAC1B,6BACA,kBAACT,EAAD,KAAcI,EAAQA,a,QCRhCM,EAAO,SAACC,GAAD,OAAyBA,EAAMD,MAE/BE,EAAmBC,YAC5B,CAACH,IACD,SAAAA,GAAI,OAAIA,EAAKI,UAGJC,EAAqBF,YAC9B,CAACH,IACD,SAAAA,GAAI,OAAIA,EAAKM,Y,SCLJC,EAAiB3B,IAAOK,IAAV,sKAgCZuB,EAvBM,WACjB,IAAMF,EAAWG,YAAYJ,GACvBK,EAAoBC,iBAAuB,MAF1B,EAGiBC,oBAAkB,GAHnC,mBAGhBhD,EAHgB,KAGFC,EAHE,KAKvBgD,qBAAU,WACNxC,YAAiBqC,EAAmB9C,KACrC,CAAC0C,IAMJ,OACI,kBAACC,EAAD,CAAgBO,SALE,SAACnD,GACnBD,YAAiBC,EAAGC,EAAcC,KAK7ByC,EAASS,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAASC,IAAKD,EAAEE,GAAIxB,QAASsB,OAClD,yBAAKG,IAAKT,M,2BCQPU,EAjCY,WAAO,IAAD,EACCR,mBAAiB,IADlB,mBACtBlB,EADsB,KACb2B,EADa,KAEvBC,EAAWC,cAEXnB,EAASK,YAAYP,GAa3B,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIsB,YAAY,6GACZC,aAhBW,SAACC,GACN,UAAdA,EAAMT,KACNS,EAAMC,iBAELjC,IAGL4B,EAASM,YAAYlC,IACrB2B,EAAW,MASCQ,UAAU,EACVC,SAAU,SAACnE,GAAD,OAAO0D,EAAW1D,EAAEI,cAAcgE,QAC5CA,MAAOrC,EACPsC,SAAqB,UAAX5B,OCvBjB6B,EAAiBrD,IAAOK,IAAV,wEA6BZiD,uBAxBQ,WACnB,IAAMZ,EAAWC,cACXnB,EAASK,YAAYP,GAS3B,OAPAW,qBAAU,WAEN,OADAS,EAASa,eACF,WACHb,EAASc,kBAEd,CAACd,IAGA,6BACI,4BAAI,kBAACe,EAAA,EAAD,MAAJ,sDACA,kBAACJ,EAAD,KACgB,UAAX7B,GAAsB,6EACvB,kBAAC,EAAD,MACA,kBAAC,EAAD","file":"static/js/8.9955a972.chunk.js","sourcesContent":["import React, {RefObject} from \"react\";\r\n\r\nexport const scrollChatHelper = (\r\n    e: React.UIEvent<HTMLDivElement, UIEvent>,\r\n    isAutoScroll: boolean,\r\n    setIsAutoScroll: (bool: boolean) => void) => {\r\n\r\n    const element = e.currentTarget;\r\n    if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n        !isAutoScroll && setIsAutoScroll(true)\r\n    } else {\r\n        isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n}\r\n\r\nexport const autoScrollHelper = (e: RefObject<HTMLDivElement>, isAutoScroll: boolean) => {\r\n    const element = e.current;\r\n    element?.scrollIntoView({behavior: 'smooth'})\r\n    if (isAutoScroll) {\r\n        element?.scrollIntoView({behavior: 'smooth'})\r\n    }\r\n    window.scrollTo(0,0)\r\n}","import styled from \"styled-components\";\r\nimport {Col} from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\n\r\nexport const AddMessageFormElement = styled(Col)`\r\n  padding: 20px 0 0 0;\r\n`\r\n\r\nexport const AddMessageFormTextArea = styled(TextArea)`\r\n  width: 500px;\r\n  height: 30px;\r\n`","import styled from \"styled-components\";\r\n\r\nexport const MessageElement = styled.div`\r\n  padding: 10px;\r\n  border-bottom: 1px #dadcdf solid;\r\n`\r\n\r\nexport const MessageUserAvatar = styled.img`\r\n  width: 30px;\r\n  border-radius: 15px;\r\n`\r\n\r\nexport const MessageUserName = styled.b`\r\n  width: 30px;\r\n  padding-left: 7px;\r\n`\r\n\r\nexport const MessageText = styled.span`\r\n  padding-left: 5px;\r\n`","import React, {FC} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../../../api/chat-api\";\r\nimport userPhoto from \"../../../../assets/images/user.png\";\r\nimport {MessageElement, MessageText, MessageUserAvatar, MessageUserName} from \"./Message.styled\";\r\n\r\nconst Message: FC<{ message: ChatMessageAPIType }> = ({message}) => {\r\n    return (\r\n            <MessageElement>\r\n                <MessageUserAvatar alt='User message' src={message.photo !== null ? message.photo : userPhoto}/>\r\n                <MessageUserName>{message.userName}</MessageUserName>\r\n                <br/>\r\n                <MessageText>{message.message}</MessageText>\r\n            </MessageElement>\r\n    )\r\n}\r\n\r\nexport default React.memo(Message);","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\n\r\nconst chat = (state: AppStateType) => state.chat\r\n\r\nexport const selectChatStatus = createSelector(\r\n    [chat],\r\n    chat => chat.status\r\n)\r\n\r\nexport const selectChatMessages = createSelector(\r\n    [chat],\r\n    chat => chat.messages\r\n)","import React, {FC, useEffect, useRef, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Message from \"./Message/Message\";\r\nimport {selectChatMessages} from \"../../../selectors/chat-selectors\";\r\nimport styled from \"styled-components\";\r\nimport {autoScrollHelper, scrollChatHelper} from \"../../../utils/scroll-chat-helper\";\r\n\r\nexport const CommonMessages = styled.div`\r\n  height: 500px;\r\n  border-radius: 2px;\r\n  width: 500px;\r\n  overflow-y: auto;\r\n  background-color: #f3f3f7;\r\n  border: 1px #dddede solid\r\n`\r\n\r\nconst Messages: FC = () => {\r\n    const messages = useSelector(selectChatMessages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        autoScrollHelper(messagesAnchorRef, isAutoScroll)\r\n    }, [messages]) // eslint-disable-line\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        scrollChatHelper(e, isAutoScroll, setIsAutoScroll)\r\n    }\r\n\r\n    return (\r\n        <CommonMessages onScroll={scrollHandler}>\r\n            {messages.map((m) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}>\r\n\r\n            </div>\r\n        </CommonMessages>\r\n    )\r\n}\r\n\r\nexport default Messages","import React, {FC, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage} from \"../../../redux/chat-reducer\";\r\nimport {Row} from \"antd\";\r\nimport {selectChatStatus} from \"../../../selectors/chat-selectors\";\r\nimport {AddMessageFormElement, AddMessageFormTextArea} from \"./AddMessageForm.styled\";\r\n\r\nconst AddMessageForm: FC = () => {\r\n    const [message, setMessage] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector(selectChatStatus)\r\n\r\n    const sendMessageHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Enter'){\r\n            event.preventDefault();\r\n        }\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <AddMessageFormElement>\r\n                <AddMessageFormTextArea\r\n                    placeholder=\"Напишите сообщение...\"\r\n                    onPressEnter={sendMessageHandler}\r\n                    autoSize={true}\r\n                    onChange={(e) => setMessage(e.currentTarget.value)}\r\n                    value={message}\r\n                    disabled={status !== 'ready'}>\r\n                </AddMessageFormTextArea>\r\n            </AddMessageFormElement>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default AddMessageForm;","import React, {useEffect} from 'react';\r\nimport {WechatOutlined} from \"@ant-design/icons\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport Messages from \"../../components/CommonChat/Messages/Messages\";\r\nimport AddMessageForm from \"../../components/forms/AddMessageForm/AddMessageForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectChatStatus} from \"../../selectors/chat-selectors\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const CommonChatMain = styled.div`\r\n  margin-top: 30px;\r\n  margin-left: 150px;\r\n`\r\n\r\nconst CommonChatPage = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector(selectChatStatus)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <h2><WechatOutlined/> Общий чат</h2>\r\n            <CommonChatMain>\r\n                {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </CommonChatMain>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default withAuthRedirect(CommonChatPage);"],"sourceRoot":""}