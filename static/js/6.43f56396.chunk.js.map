{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","id","imgLink","name","path","className","s","dialog","alt","src","to","dialogName","activeClassName","activeLink","Message","message","maxLength100","maxLengthCreator","reduxForm","form","handleSubmit","onSubmit","createField","required","Textarea","Dialogs","props","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,2B,uGCmBrPC,EAVoB,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,KAC1CC,GAD8D,uCACvD,YAAcH,GACzB,OACI,yBAAKI,UAAWC,IAAEC,QACd,yBAAKC,IAAI,GAAGC,IAAKP,IACjB,kBAAC,IAAD,CAASQ,GAAIN,EAAMC,UAAWC,IAAEK,WAAYC,gBAAiBN,IAAEO,YAAaV,KCFzEW,EANe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC5B,OACI,yBAAKV,UAAWC,IAAES,SAAUA,I,0BCH9BC,EAAeC,YAAiB,KAkBvBC,cAA+C,CAACC,KAAM,2BAAtDD,EAbwF,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aACrG,OACI,0BAAMC,SAAUD,GACZ,6BACKE,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAeQ,MAEjH,6BACI,6CCsBDC,EAxBgB,SAACC,GAE5B,IAAIC,EAAQD,EAAME,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAY7B,KAAM6B,EAAE7B,KAAM8B,IAAKD,EAAE/B,GAAIA,GAAI+B,EAAE/B,GAAIC,QAAS8B,EAAE9B,aACrGgC,EAAmBP,EAAMQ,SAASJ,KAAI,SAACK,GAAD,OAAO,kBAAC,EAAD,CAASrB,QAASqB,EAAErB,QAASkB,IAAKG,EAAEnC,QAMrF,OACI,yBAAKI,UAAWC,IAAEwB,SACd,yBAAKzB,UAAWC,IAAE+B,cACbR,GAEL,yBAAKxB,UAAWC,IAAE6B,UACd,6BAAMD,GACN,kBAAC,EAAD,CAAgBb,SAXR,SAACiB,GACjBZ,EAAMa,YAAYD,EAAOE,sB,yBCnB7BC,EAA6B,SAACd,GAAD,MAA0B,CACvDe,OAAQf,EAAMgB,KAAKD,S,YCQRE,sBACXC,aAPkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAqBkB,ODAzB,SAA+BC,GAalC,OAHqCF,YACjCJ,EAA4B,GADKI,EARiC,SAAAnB,GAAU,IACvEgB,EAAwBhB,EAAxBgB,OAAWM,EAD2D,YAC9CtB,EAD8C,YAG3E,OAAKgB,EAEE,kBAACK,EAAqBC,GAFT,kBAAC,IAAD,CAAUtC,GAAG,gBCN1BkC,CAGbnB","file":"static/js/6.43f56396.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2sgjw\",\"dialogsItems\":\"Dialogs_dialogsItems__PWwki\",\"dialog\":\"Dialogs_dialog__11VTP\",\"dialogName\":\"Dialogs_dialogName__13PH_\",\"activeLink\":\"Dialogs_activeLink__30sOw\",\"messages\":\"Dialogs_messages__1zSyE\",\"message\":\"Dialogs_message__z1c6H\"};","import React, {FC} from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    imgLink: string\r\n    name: string\r\n}\r\n\r\nconst  DialogItem: FC<PropsType> = ({id, imgLink, name, ...props}) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img alt='' src={imgLink}/>\r\n            <NavLink to={path} className={s.dialogName} activeClassName={s.activeLink}>{name}</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DialogItem;","import React, {FC} from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType>= ({message}) => {\r\n    return (\r\n        <div className={s.message}>{message}</div>\r\n    )\r\n};\r\n\r\nexport default Message;","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport { NewMessageFormValuesType } from \"../Dialogs\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\ntype NewMessageFormValuesKeysType = GetStringKeys<NewMessageFormValuesType>\r\ntype PropsType = {}\r\n\r\nexport const AddMessageForm: FC<InjectedFormProps<NewMessageFormValuesType & PropsType> & PropsType> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody', [required, maxLength100], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType, PropsType>({form: \"dialog-add-message-form\"})(AddMessageForm)","import React, {FC} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id} imgLink={d.imgLink}/>);\r\n    let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,{...actions}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}