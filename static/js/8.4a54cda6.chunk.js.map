{"version":3,"sources":["selectors/friends-selectors.ts","components/forms/ProfileDataForm/ProfileDataForm.styled.ts","components/forms/ProfileDataForm/ProfileDataForm.tsx","selectors/profile-selectors.ts","components/Profile/Profile/ProfileInfo/ProfileAdditionalData/ProfileAdditionalData.styled.ts","components/Profile/Profile/ProfileInfo/ProfileAdditionalData/ProfileAdditionalData.tsx","components/Profile/Profile/ProfileInfo/ProfileStatus/ProfileStatus.styled.ts","components/Profile/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/Profile/ProfileInfo/ProfileInfo.styled.ts","components/Profile/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePosts/Post/Post.styled.ts","components/Profile/ProfilePosts/Post/Post.tsx","components/forms/AddNewPostForm/AddNewPostForm.tsx","components/Profile/ProfilePosts/ProfilePosts.styled.ts","components/Profile/ProfilePosts/ProfilePosts.tsx","pages/ProfilePage/ProfilePage.tsx"],"names":["selectUserFriends","createSelector","state","friendsPage","friends","selectUserFriendsAmount","length","FormElement","styled","div","ProfileDataFormWrapper","form","ProfileDataFormContacts","Col","ProfileDataFormHeader","h3","SaveFormButton","Button","ProfileDataFormReduxForm","reduxForm","handleSubmit","profile","error","onSubmit","Object","keys","contacts","map","key","toUpperCase","substr","createField","InputField","Textarea","htmlType","onClick","SaveOutlined","profilePage","selectProfile","selectProfileStatus","status","selectProfilePosts","posts","selectProfileImage","photos","large","AdditionalDataDivider","Divider","AdditionalDataBlock","AboutMeElement","span","AdditionalDataHeaderWrapper","AdditionalDataContactsWrapper","AboutMeBlock","Contact","contactTitle","contactValue","href","lastIndexOf","ProfileAdditionalData","aboutMe","lookingForAJobDescription","StatusText","StatusInput","Input","ProfileStatus","props","useState","editMode","setEditMode","setStatus","dispatch","useDispatch","useEffect","onDoubleClick","isOwner","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","AvatarImage","Image","AvatarImageWrapperCol","UserName","PageHeader","MainInfoNameRow","Row","MainInfoRow","ProfileEditButton","FriendsAmountBlock","FriendsAmountLink","NavLink","MainProfileDataFields","MainProfileDataFieldValues","ProfileButtons","HiddenUploadInput","input","ProfileInfo","userId","useSelector","friendsAmount","hiddenFileInput","useRef","requestFriends","src","noPhotoPic","title","fullName","subTitle","to","slice","icon","UploadOutlined","current","click","type","ref","target","files","savePhoto","startDialog","MessageOutlined","CloseOutlined","EditOutlined","initialValues","formData","saveProfile","Preloader","PostBlock","LikeElement","DeletePostButton","CloseCircleOutlined","Post","message","likesCount","date","id","profileImage","months","localLikesCount","setLocalLikesCount","isLiked","setIsLiked","formattedDate","getDate","getMonth","toLocaleTimeString","Item","Meta","avatar","size","xs","sm","md","lg","xl","xxl","description","HeartTwoTone","twoToneColor","actions","deletePost","AddPostButtonWrapper","maxLength400","maxLengthCreator","required","StyledDivider","MyPostsHeader","MyPostsMemorized","React","memo","postsElements","reverse","p","values","addPostActionCreator","newPostText","ProfilePageWrapper","ProfilePage","history","match","authorizedUserId","selectAuthorizedUserId","params","push","getUserProfile","getStatus","console","refreshProfile","withAuthRedirect","withRouter"],"mappings":"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","file":"static/js/8.4a54cda6.chunk.js","sourcesContent":["import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\n\r\nconst friendsPage = (state: AppStateType) => state.friendsPage\r\n\r\nexport const selectUserFriends = createSelector(\r\n    [friendsPage],\r\n    friendsPage => friendsPage.friends\r\n)\r\n\r\nexport const selectUserFriendsAmount = createSelector(\r\n    [selectUserFriends],\r\n    selectUserFriends => selectUserFriends.length\r\n)\r\n","import styled from \"styled-components\";\r\nimport {Button, Col} from \"antd\";\r\n\r\nexport const FormElement = styled.div`\r\n  padding-top: 10px;\r\n  width: 300px;\r\n`\r\n\r\nexport const ProfileDataFormWrapper = styled.form`\r\n  border: 1px solid #e4e4e4;\r\n  border-radius: 2px;\r\n  padding: 10px;\r\n`\r\n\r\nexport const ProfileDataFormContacts = styled(Col)`\r\n  padding-right: 80px;\r\n`\r\n\r\nexport const ProfileDataFormHeader = styled.h3`\r\n  padding-top: 5px;\r\n`\r\n\r\nexport const SaveFormButton = styled(Button)`\r\n  margin-top: 30px;\r\n  margin-bottom: 30px;\r\n`","import React, {FC} from \"react\";\r\nimport {createField, GetStringKeys, InputField, Textarea} from \"../FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Col, Row} from \"antd\";\r\nimport {SaveOutlined} from \"@ant-design/icons\";\r\nimport {\r\n    FormElement,\r\n    ProfileDataFormContacts,\r\n    ProfileDataFormHeader,\r\n    ProfileDataFormWrapper,\r\n    SaveFormButton\r\n} from './ProfileDataForm.styled'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <ProfileDataFormWrapper onSubmit={handleSubmit}>\r\n                <Row>\r\n                    <ProfileDataFormContacts>\r\n                        <ProfileDataFormHeader>\r\n                            Контакты\r\n                        </ProfileDataFormHeader>\r\n\r\n                        <div>\r\n                            {Object.keys(profile.contacts).map(key => {\r\n                                return <FormElement key={key}>\r\n                                    <span>{key[0].toUpperCase() + key.substr(1)}\r\n                                        {createField(key, \"contacts.\" + key, [], InputField)}\r\n                                    </span>\r\n                                </FormElement>\r\n                            })}\r\n                        </div>\r\n                    </ProfileDataFormContacts>\r\n\r\n                    <Col>\r\n                        <ProfileDataFormHeader>\r\n                            Персональная информация\r\n                        </ProfileDataFormHeader>\r\n\r\n                        <FormElement>\r\n                            <span>Никнейм</span>\r\n                            {createField<ProfileTypeKeys>(\"Никнейм...\", \"fullName\", [], InputField)}\r\n                        </FormElement>\r\n                        {/*<div>*/}\r\n                        {/*    <b>Looking for a job</b>*/}\r\n                        {/*    {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}*/}\r\n                        {/*</div>*/}\r\n                        <FormElement>\r\n                            <span>Профессиональные навыки</span>\r\n                            {createField<ProfileTypeKeys>(\"Профессиональные навыки...\", \"lookingForAJobDescription\", [], Textarea)}\r\n                        </FormElement>\r\n                        <FormElement>\r\n                            <span>О себе</span>\r\n                            {createField<ProfileTypeKeys>(\"О себе...\", \"aboutMe\", [], Textarea)}\r\n                        </FormElement>\r\n\r\n                            <SaveFormButton htmlType={'submit'} onClick={() => {\r\n                            }}><SaveOutlined/> Сохранить</SaveFormButton>\r\n\r\n                        {error &&\r\n                        <div>\r\n                            {error}\r\n                        </div>\r\n                        }\r\n\r\n                    </Col>\r\n                </Row>\r\n        </ProfileDataFormWrapper>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nconst profilePage = (state: AppStateType) => state.profilePage\r\n\r\nexport const selectProfile = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.profile\r\n)\r\n\r\nexport const selectProfileStatus = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.status\r\n)\r\n\r\nexport const selectProfilePosts = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.posts\r\n)\r\n\r\nexport const selectProfileImage = createSelector(\r\n    [selectProfile],\r\n    selectProfile => selectProfile?.photos.large\r\n)\r\n","import styled from \"styled-components\";\r\nimport {Divider} from \"antd\";\r\n\r\nexport const AdditionalDataDivider = styled(Divider)`\r\n  margin-bottom: 7px;\r\n  margin-top: 3px;\r\n`\r\n\r\nexport const AdditionalDataBlock = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport const AboutMeElement = styled.span`\r\n  font-size: 15px;\r\n  color: gray;\r\n`\r\n\r\nexport const AdditionalDataHeaderWrapper = styled.div`\r\n  border-bottom: 2px gray solid;\r\n`\r\n\r\nexport const AdditionalDataContactsWrapper = styled.div`\r\n  padding-top: 6px;\r\n`\r\n\r\nexport const AboutMeBlock = styled.div`\r\n  display: inline-block;\r\n  padding-right: 70px; \r\n  padding-top: 50px;\r\n  width: 500px;\r\n  float: right;\r\n`\r\n","import React, {FC} from \"react\";\r\nimport {Col, Row} from \"antd\";\r\nimport {ContactsType, ProfileType} from \"../../../../../types/types\";\r\nimport {\r\n    AboutMeBlock,\r\n    AboutMeElement,\r\n    AdditionalDataBlock,\r\n    AdditionalDataContactsWrapper,\r\n    AdditionalDataDivider,\r\n    AdditionalDataHeaderWrapper\r\n} from \"./ProfileAdditionalData.styled\";\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\ntype ProfileAdditionalDataPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileAdditionalData: FC<ProfileAdditionalDataPropsType> = ({profile}) => {\r\n    return (\r\n        <div>\r\n            <AdditionalDataDivider/>\r\n            <AdditionalDataBlock>\r\n                <Row>\r\n                    <Col>\r\n                        <AdditionalDataHeaderWrapper>\r\n                            <h3>\r\n                                Дополнительная информация\r\n                            </h3>\r\n                        </AdditionalDataHeaderWrapper>\r\n                        <Row>\r\n                            <Col>\r\n                                <AdditionalDataContactsWrapper>\r\n                                    <h3>\r\n                                        Контакты\r\n                                    </h3>\r\n                                </AdditionalDataContactsWrapper>\r\n                            </Col>\r\n                        </Row>\r\n                        <div>\r\n                            {\r\n                                Object\r\n                                    .keys(profile.contacts)\r\n                                    .map((key) => {\r\n                                        return profile.contacts[key as keyof ContactsType] ?\r\n                                            <Contact key={key} contactTitle={key}\r\n                                                     contactValue={profile.contacts[key as keyof ContactsType]}/> : null\r\n                                    })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </AdditionalDataBlock>\r\n\r\n            <AboutMeBlock>\r\n\r\n                {/*<span>Ищу работу: </span>*/}\r\n                {/*<span>{profile.lookingForAJob ? \"Да\" : \"Нет\"}</span>*/}\r\n\r\n                {profile.aboutMe &&\r\n                <span>\r\n                    <AboutMeElement>\r\n                        О себе:&nbsp;\r\n                    </AboutMeElement>\r\n                    {profile.aboutMe}\r\n                </span>\r\n                }\r\n                <br/>\r\n                {profile.lookingForAJobDescription &&\r\n                <span>\r\n                    <AboutMeElement>\r\n                        Проф. навыки:&nbsp;\r\n                    </AboutMeElement>\r\n                    {profile.lookingForAJobDescription}\r\n                </span>\r\n                }\r\n            </AboutMeBlock>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <Row>\r\n            <span>{contactTitle[0].toUpperCase() + contactTitle.substr(1)}: &nbsp;</span>\r\n            <a href={contactValue}>@{contactValue.substr(contactValue.lastIndexOf('/') + 1)}</a>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileAdditionalData;","import styled from \"styled-components\";\r\nimport {Input} from \"antd\";\r\n\r\nexport const StatusText = styled.div`\r\n  padding-top: 4px;\r\n  font-size: 16px;\r\n`\r\n\r\nexport const StatusInput = styled(Input)`\r\n  width: 276px;\r\n`","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../../redux/profile-reducer\";\r\nimport {StatusInput, StatusText} from './ProfileStatus.styled';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        props.isOwner && setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        dispatch(updateStatus(status));\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <StatusText onDoubleClick={activateEditMode}>\r\n                    {props.status || \"----\"}\r\n                </StatusText>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <StatusInput\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import styled from \"styled-components\";\r\nimport {Col, Image, PageHeader, Row} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const AvatarImage = styled(Image)`\r\n  width: 200px;\r\n  max-width: 100%;\r\n  border-radius: 2px;\r\n`\r\nexport const AvatarImageWrapperCol = styled(Col)`\r\n  padding-right: 50px;\r\n`\r\nexport const UserName = styled(PageHeader)`\r\n  margin: 0;\r\n  padding: 2px 0 0 0;\r\n  border-bottom: 2px gray solid;\r\n`\r\nexport const MainInfoNameRow = styled(Row)`\r\n  color: gray;\r\n  font-size: 15px;\r\n`\r\nexport const MainInfoRow = styled(Row)`\r\n  color: #416a92;\r\n  font-size: 15px;\r\n`\r\n\r\nexport const ProfileEditButton = styled(Col)`\r\n  padding-left: 47px;\r\n`\r\n\r\nexport const FriendsAmountBlock = styled.div`\r\n  padding-top: 7px;\r\n  font-size: 15px;\r\n`\r\n\r\nexport const FriendsAmountLink = styled(NavLink)`\r\n  color: #06162a;\r\n`\r\n\r\nexport const MainProfileDataFields = styled.div`\r\n  padding-top: 9px;\r\n`\r\n\r\nexport const MainProfileDataFieldValues = styled.div`\r\n  padding-left: 15px;\r\n`\r\n\r\nexport const ProfileButtons = styled(Row)`\r\n  padding-top: 15px;\r\n`\r\n\r\nexport const HiddenUploadInput = styled.input`\r\n  display: none;\r\n`\r\n","import React, {ChangeEvent, FC, useEffect, useRef, useState} from 'react';\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport noPhotoPic from \"../../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"../../../forms/ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport {CloseOutlined, EditOutlined, MessageOutlined, UploadOutlined} from \"@ant-design/icons\";\r\nimport {NavLink, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestFriends} from \"../../../../redux/friends-reducer\";\r\nimport {selectProfileStatus} from \"../../../../selectors/profile-selectors\";\r\nimport {selectUserFriendsAmount} from \"../../../../selectors/friends-selectors\";\r\nimport {savePhoto, saveProfile} from \"../../../../redux/profile-reducer\";\r\nimport ProfileAdditionalData from \"./ProfileAdditionalData/ProfileAdditionalData\";\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport {\r\n    AvatarImage,\r\n    AvatarImageWrapperCol,\r\n    FriendsAmountBlock,\r\n    UserName,\r\n    FriendsAmountLink,\r\n    ProfileEditButton,\r\n    MainProfileDataFields,\r\n    MainProfileDataFieldValues,\r\n    ProfileButtons,\r\n    MainInfoNameRow,\r\n    MainInfoRow,\r\n    HiddenUploadInput\r\n} from './ProfileInfo.styled';\r\nimport {startDialog} from \"../../../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    userId: number\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({isOwner, profile, userId}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const status = useSelector(selectProfileStatus)\r\n    const friendsAmount = useSelector(selectUserFriendsAmount)\r\n\r\n    const hiddenFileInput = useRef<HTMLInputElement>(null);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(requestFriends());\r\n    }, [])\r\n\r\n    const handleCreateDialog = () => {\r\n        dispatch(startDialog(userId))\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            dispatch(savePhoto(e.target.files[0]));\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        hiddenFileInput?.current?.click();\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfile(formData))\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <AvatarImageWrapperCol>\r\n                    <AvatarImage src={profile.photos.large || noPhotoPic}/>\r\n                </AvatarImageWrapperCol>\r\n                <Col>\r\n                    <UserName title={profile.fullName} subTitle={'Беларусь, Гомель'}/>\r\n                    <ProfileStatus status={status} isOwner={isOwner}/>\r\n                    <FriendsAmountBlock>\r\n                        {isOwner ?\r\n                            <FriendsAmountLink to={'/friends'}>\r\n                            <span>\r\n                                Друзей:&nbsp;\r\n                            </span>\r\n                                <span>\r\n                                {friendsAmount}\r\n                            </span>\r\n                            </FriendsAmountLink>\r\n                            : null\r\n                        }\r\n                    </FriendsAmountBlock>\r\n                    <MainProfileDataFields>\r\n                        <Row>\r\n                            <Col>\r\n                                <MainInfoNameRow>\r\n                                    Телефон:\r\n                                </MainInfoNameRow>\r\n                                <MainInfoNameRow>\r\n                                    Дата рождения:\r\n                                </MainInfoNameRow>\r\n                                <MainInfoNameRow>\r\n                                    О себе:\r\n                                </MainInfoNameRow>\r\n                            </Col>\r\n                            <MainProfileDataFieldValues>\r\n                                <MainInfoRow>\r\n                                    +375 (33) 355-29-71\r\n                                </MainInfoRow>\r\n                                <MainInfoRow>\r\n                                    21 июня 2000\r\n                                </MainInfoRow>\r\n                                <MainInfoRow>\r\n                                    {profile.aboutMe && profile.aboutMe.length >= 50\r\n                                        ? `${profile.aboutMe.slice(0, 50)}...` : profile.aboutMe}\r\n                                </MainInfoRow>\r\n                            </MainProfileDataFieldValues>\r\n                        </Row>\r\n                    </MainProfileDataFields>\r\n                </Col>\r\n            </Row>\r\n            <ProfileButtons>\r\n                <Col>\r\n                    {isOwner ?\r\n                        <>\r\n                            <Button icon={<UploadOutlined/>} onClick={handleClick}>\r\n                                Обновить фотографию\r\n                            </Button>\r\n                            <HiddenUploadInput type='file' ref={hiddenFileInput} onChange={onMainPhotoSelected}/>\r\n                        </>\r\n                        :\r\n                        <Button onClick={handleCreateDialog}>\r\n                            <NavLink to={'/chat'}>\r\n                                <MessageOutlined/> Написать сообщение\r\n                            </NavLink>\r\n                        </Button>\r\n                    }\r\n                </Col>\r\n                <ProfileEditButton>\r\n                    {isOwner ?\r\n                        <Row>\r\n                            <Button\r\n                                onClick={\r\n                                    () => {\r\n                                        editMode ? setEditMode(false) : setEditMode(true)\r\n                                    }\r\n                                }>\r\n                                {editMode\r\n                                    ? <div><CloseOutlined/> Выйти из режима редактирования</div>\r\n                                    : <div><EditOutlined/> Редактировать профиль</div>\r\n                                }\r\n\r\n                            </Button>\r\n                        </Row> : null}\r\n                </ProfileEditButton>\r\n            </ProfileButtons>\r\n            <br/>\r\n            <div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileAdditionalData profile={profile}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import styled from \"styled-components\";\r\nimport {CloseCircleOutlined} from \"@ant-design/icons\";\r\n\r\nexport const PostBlock = styled.div`\r\n  background-color: #f0f2f5;\r\n  border-radius: 2px;\r\n  margin-bottom: 10px;\r\n`\r\n\r\nexport const LikeElement = styled.div`\r\n  \r\n`\r\n\r\nexport const DeletePostButton = styled(CloseCircleOutlined)`\r\n  float: right;\r\n  font-size: 20px;\r\n`","import React, {useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Avatar, List} from 'antd';\r\nimport {HeartTwoTone} from \"@ant-design/icons\";\r\nimport {actions} from '../../../../redux/profile-reducer';\r\nimport {DeletePostButton, LikeElement, PostBlock} from './Post.styled';\r\nimport Meta from \"antd/es/card/Meta\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n    date: Date\r\n    id: number\r\n    profileImage: string | null | undefined\r\n    months: Array<string>\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({message, likesCount, date, id, profileImage, months}) => {\r\n\r\n    const [localLikesCount, setLocalLikesCount] = useState(likesCount)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const deletePostCallback = () => {\r\n        dispatch(actions.deletePost(id));\r\n    }\r\n\r\n    const like = () => {\r\n        setLocalLikesCount(likesCount + 1);\r\n        setIsLiked(false);\r\n    };\r\n\r\n    const unlike = () => {\r\n        setLocalLikesCount(likesCount - 1);\r\n        setIsLiked(true);\r\n    };\r\n\r\n    const formattedDate = date.getDate() + ' ' + months[date.getMonth()] + ' в ' +\r\n        date.toLocaleTimeString().slice(0, -3);\r\n\r\n    return (\r\n        <PostBlock>\r\n            <List.Item>\r\n                <Meta\r\n                    avatar={<Avatar src={profileImage} size={{xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 80}}/>}\r\n                    title={message}\r\n                    description={\r\n                        <span>\r\n                                {formattedDate}\r\n                            <LikeElement><HeartTwoTone\r\n                                onClick={!isLiked ? like : unlike}\r\n                                twoToneColor=\"#1890ff\"/> {localLikesCount}\r\n                                </LikeElement>\r\n                            </span>\r\n                    }\r\n                />\r\n                <DeletePostButton onClick={deletePostCallback}/>\r\n            </List.Item>\r\n        </PostBlock>\r\n    )\r\n};\r\n\r\nexport default Post;\r\n\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {Button} from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const AddPostButtonWrapper = styled.div`\r\n  padding-top: 15px;\r\n  padding-bottom: 11px;\r\n`\r\nconst maxLength400 = maxLengthCreator(400);\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype PropsType = {}\r\n\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\n\r\nexport const AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType & PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                {createField<AddPostFormValuesKeysType>('Что у вас нового?', 'newPostText', [required, maxLength400], Textarea)}\r\n                <AddPostButtonWrapper>\r\n                    <Button htmlType=\"submit\">Опубликовать</Button>\r\n                </AddPostButtonWrapper>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-new-post-form'})(AddNewPostForm);","import styled from \"styled-components\";\r\nimport {Divider} from \"antd\";\r\n\r\nexport const StyledDivider = styled(Divider)`\r\n  margin-bottom: 7px;\r\n`\r\n\r\nexport const MyPostsHeader = styled.h3`\r\n  padding-top: 10px;\r\n  padding-bottom: 8px;\r\n`\r\n","import React, {FC} from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"../../forms/AddNewPostForm/AddNewPostForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectProfileImage, selectProfilePosts} from \"../../../selectors/profile-selectors\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport {MyPostsHeader, StyledDivider } from './ProfilePosts.styled';\r\nimport {List} from \"antd\";\r\n\r\ntype PropsType = {}\r\n\r\nconst months = [\"Января\", \"Февраля\", \"Марта\", \"Апреля\", \"Мая\", \"Июня\", \"Июля\", \"Августа\", \"Сентября\", \"Октябля\", \"Ноября\", \"Декабря\"];\r\n\r\nconst ProfilePosts: FC<PropsType> = () => {\r\n    const posts = useSelector(selectProfilePosts)\r\n    const profileImage = useSelector(selectProfileImage)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let postsElements = posts.reverse().map((p) => <Post\r\n        months={months}\r\n        profileImage={profileImage}\r\n        message={p.message}\r\n        key={p.id}\r\n        id={p.id}\r\n        likesCount={p.likesCount}\r\n        date={p.date}\r\n    />);\r\n\r\n    let addNewPost = (values: AddPostFormValuesType) => {\r\n        dispatch(actions.addPostActionCreator(values.newPostText));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <StyledDivider/>\r\n            <MyPostsHeader>\r\n                Мои записи\r\n            </MyPostsHeader>\r\n            <AddNewPostForm onSubmit={addNewPost}/>\r\n            <List size={'large'}>\r\n                {postsElements}\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(ProfilePosts)\r\n\r\nexport default MyPostsMemorized","import React, {FC, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getStatus, getUserProfile} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {selectAuthorizedUserId} from \"../../selectors/auth-selectors\";\r\nimport styled from 'styled-components';\r\nimport ProfileInfo from \"../../components/Profile/Profile/ProfileInfo/ProfileInfo\";\r\nimport ProfilePosts from \"../../components/Profile/ProfilePosts/ProfilePosts\";\r\nimport {selectProfile} from \"../../selectors/profile-selectors\";\r\nimport Preloader from \"../../components/common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst ProfilePageWrapper = styled.div`\r\n  width: 100%;\r\n`\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & {}\r\n\r\nexport const ProfilePage: FC<PropsType> = ({history, match}) => {\r\n    const authorizedUserId = useSelector(selectAuthorizedUserId)\r\n    const profile = useSelector(selectProfile)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const refreshProfile = () => {\r\n        let userId: number | null = +match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = authorizedUserId;\r\n            if (!userId) {\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"Id should exists in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            dispatch(getUserProfile(userId));\r\n            dispatch(getStatus(userId));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshProfile();\r\n    }, [match.params.userId]);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <ProfilePageWrapper>\r\n            <ProfileInfo isOwner={!match.params.userId} profile={profile} userId={+match.params.userId}/>\r\n            {!match.params.userId ?\r\n                <ProfilePosts/>\r\n                : null}\r\n        </ProfilePageWrapper>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(withRouter(ProfilePage));"],"sourceRoot":""}