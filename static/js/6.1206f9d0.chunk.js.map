{"version":3,"sources":["components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/forms/ProfileDataForm/ProfileDataForm.tsx","selectors/profile-selectors.ts","components/Profile/ProfileInfo/ProfileAdditionalData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePosts/Post.tsx","components/forms/AddNewPostForm/AddNewPostForm.tsx","components/Profile/ProfilePosts/ProfilePosts.tsx","pages/ProfilePage/ProfilePage.tsx"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","dispatch","useDispatch","useEffect","style","paddingTop","fontSize","onDoubleClick","isOwner","width","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","FormElement","styled","div","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","border","borderRadius","padding","paddingRight","Object","keys","contacts","map","key","toUpperCase","substr","createField","InputField","Textarea","htmlType","onClick","SaveOutlined","profilePage","state","selectProfile","createSelector","selectProfileStatus","selectProfilePosts","posts","selectProfileImage","photos","large","Contact","contactTitle","contactValue","href","lastIndexOf","ProfileAdditionalData","marginBottom","marginTop","display","borderBottom","float","aboutMe","color","lookingForAJobDescription","ProfileInfoWrapper","AvatarImage","Image","AvatarImageWrapperCol","Col","UserName","PageHeader","MainInfoNameRow","Row","MainInfoRow","ProfileInfo","useSelector","friendsAmount","selectUserFriendsAmount","hiddenFileInput","useRef","requestFriends","src","noPhotoPic","title","fullName","subTitle","to","paddingLeft","length","slice","icon","UploadOutlined","current","click","type","ref","target","files","savePhoto","MessageOutlined","CloseOutlined","EditOutlined","initialValues","formData","saveProfile","Preloader","Post","message","likesCount","date","id","profileImage","localLikesCount","setLocalLikesCount","isLiked","setIsLiked","backgroundColor","size","Item","Meta","avatar","xs","sm","md","lg","xl","xxl","description","toISOString","substring","HeartTwoTone","twoToneColor","CloseCircleOutlined","actions","deletePost","maxLength400","maxLengthCreator","required","paddingBottom","MyPostsMemorized","React","memo","postsElements","reverse","p","values","addPostActionCreator","newPostText","ProfilePageWrapper","ProfilePage","history","match","authorizedUserId","selectAuthorizedUserId","selectIsAuth","userId","params","push","getUserProfile","getStatus","console","refreshProfile","withAuthRedirect","withRouter"],"mappings":"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","file":"static/js/6.1206f9d0.chunk.js","sourcesContent":["import React, {useEffect, useState, FC, ChangeEvent} from 'react';\r\nimport {Input} from \"antd\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatus} from \"../../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        props.isOwner && setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        dispatch(updateStatus(status));\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <div style={{paddingTop: 4, fontSize: '16px'}}\r\n                     onDoubleClick={activateEditMode}>{props.status || \"----\"}</div>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <Input\r\n                    style={{width: '276px'}}\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, {FC} from \"react\";\r\nimport {createField, GetStringKeys, InputField, Textarea} from \"../FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport {SaveOutlined} from \"@ant-design/icons\";\r\nimport styled from 'styled-components';\r\n\r\nconst FormElement = styled.div`\r\n  padding-top: 10px;\r\n`\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} style={{border: '1px solid #e4e4e4', borderRadius: 2}}>\r\n            <div style={{padding: 10}}>\r\n                <Row>\r\n                    <Col style={{paddingRight: 80}}>\r\n                        <h3 style={{paddingTop: 5}}>\r\n                            Контакты\r\n                        </h3>\r\n\r\n                        <div>\r\n                            {Object.keys(profile.contacts).map(key => {\r\n                                return <FormElement key={key}>\r\n                                    <span>{key[0].toUpperCase() + key.substr(1)} {createField(key, \"contacts.\" + key, [], InputField)}</span>\r\n                                </FormElement>\r\n                            })}\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                        <h3 style={{paddingTop: 5}}>\r\n                            Персональная информация\r\n                        </h3>\r\n\r\n                        <FormElement>\r\n                            <span>Никнейм</span>\r\n                            {createField<ProfileTypeKeys>(\"Никнейм...\", \"fullName\", [], InputField)}\r\n                        </FormElement>\r\n                        {/*<div>*/}\r\n                        {/*    <b>Looking for a job</b>*/}\r\n                        {/*    {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}*/}\r\n                        {/*</div>*/}\r\n                        <FormElement>\r\n                            <span>Профессиональные навыки</span>\r\n                            {createField<ProfileTypeKeys>(\"Профессиональные навыки...\", \"lookingForAJobDescription\", [], Textarea)}\r\n                        </FormElement>\r\n                        <FormElement>\r\n                            <span>О себе</span>\r\n                            {createField<ProfileTypeKeys>(\"О себе...\", \"aboutMe\", [], InputField)}\r\n                        </FormElement>\r\n\r\n                        <FormElement style={{paddingTop: 30}}>\r\n                            <Button htmlType={'submit'} onClick={() => {\r\n                            }}><SaveOutlined/> Сохранить</Button>\r\n                        </FormElement>\r\n                        {error &&\r\n                        <div>\r\n                            {error}\r\n                        </div>}\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nconst profilePage = (state: AppStateType) => state.profilePage\r\n\r\nexport const selectProfile = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.profile\r\n)\r\n\r\nexport const selectProfileStatus = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.status\r\n)\r\n\r\nexport const selectProfilePosts = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.posts\r\n)\r\n\r\nexport const selectProfileImage = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.profile?.photos.large\r\n)\r\n","import React, {FC} from \"react\";\r\nimport {Col, Divider, Row} from \"antd\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\nconst ProfileAdditionalData: FC<ProfileAdditionalDataPropsType> = ({profile}) => {\r\n    return (\r\n        <div>\r\n            <Divider style={{marginBottom: 7, marginTop: 3}}/>\r\n            <div style={{display: 'inline-block'}}>\r\n                <Row>\r\n                    <Col>\r\n                        <div style={{borderBottom: '2px gray solid'}}>\r\n                            <h3>\r\n                                Дополнительная информация\r\n                            </h3>\r\n                        </div>\r\n                        <Row>\r\n                            <Col>\r\n                                <div style={{paddingTop: 6}}>\r\n                                    <h3>\r\n                                        Контакты\r\n                                    </h3>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <div>\r\n                            {\r\n                                Object\r\n                                    .keys(profile.contacts)\r\n                                    .map((key) => {\r\n                                        return profile.contacts[key as keyof ContactsType] ?\r\n                                            <Contact key={key} contactTitle={key}\r\n                                                     contactValue={profile.contacts[key as keyof ContactsType]}/> : null\r\n                                    })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n\r\n            <div style={{display: 'inline-block', paddingRight: 70, paddingTop: 50, width: 500, float: 'right'}}>\r\n\r\n                {/*<span>Ищу работу: </span>*/}\r\n                {/*<span>{profile.lookingForAJob ? \"Да\" : \"Нет\"}</span>*/}\r\n\r\n                {profile.aboutMe &&\r\n                <span>\r\n                    <span style={{fontSize: 15, color: 'gray'}}>\r\n                        О себе:&nbsp;\r\n                    </span>\r\n                    {profile.aboutMe}\r\n                </span>\r\n                }\r\n                <br/>\r\n                {profile.lookingForAJobDescription &&\r\n                <span>\r\n                    <span style={{fontSize: 15, color: 'gray'}}>\r\n                        Проф. навыки:&nbsp;\r\n                    </span>\r\n                    {profile.lookingForAJobDescription}\r\n                </span>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <Row>\r\n            <span>{contactTitle[0].toUpperCase() + contactTitle.substr(1)}: &nbsp;</span>\r\n            <a href={contactValue}>@{contactValue.substr(contactValue.lastIndexOf('/') + 1)}</a>\r\n        </Row>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\ntype ProfileAdditionalDataPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport default ProfileAdditionalData;","import React, {ChangeEvent, FC, useEffect, useRef, useState} from 'react';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport noPhotoPic from \"../../../assets/images/user.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"../../forms/ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Button, Col, Image, PageHeader, Row} from \"antd\";\r\nimport {CloseOutlined, EditOutlined, MessageOutlined, UploadOutlined} from \"@ant-design/icons\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestFriends} from \"../../../redux/friends-reducer\";\r\nimport {selectProfileStatus} from \"../../../selectors/profile-selectors\";\r\nimport {selectUserFriendsAmount} from \"../../../selectors/friends-selectors\";\r\nimport {savePhoto, saveProfile} from \"../../../redux/profile-reducer\";\r\nimport styled from 'styled-components';\r\nimport ProfileAdditionalData from \"./ProfileAdditionalData\";\r\n\r\nconst ProfileInfoWrapper = styled.div`\r\n  //border: 1px black solid;\r\n`\r\nconst AvatarImage = styled(Image)`\r\n  width: 200px;\r\n  max-width: 100%;\r\n  border-radius: 2px;\r\n`\r\nconst AvatarImageWrapperCol = styled(Col)`\r\n  padding-right: 50px;\r\n`\r\nconst UserName = styled(PageHeader)`\r\n  margin: 0;\r\n  padding: 2px 0 0 0;\r\n  border-bottom: 2px gray solid;\r\n`\r\nconst MainInfoNameRow = styled(Row)`\r\n  color: gray;\r\n  font-size: 15px;\r\n`\r\nconst MainInfoRow = styled(Row)`\r\n  color: #416a92;\r\n  font-size: 15px;\r\n`\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({isOwner, profile}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const status = useSelector(selectProfileStatus)\r\n    const friendsAmount = useSelector(selectUserFriendsAmount)\r\n\r\n    const hiddenFileInput = useRef<HTMLInputElement>(null);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(requestFriends());\r\n    }, [])\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            dispatch(savePhoto(e.target.files[0]));\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        hiddenFileInput?.current?.click();\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfile(formData))\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <ProfileInfoWrapper>\r\n            <Row>\r\n                <AvatarImageWrapperCol>\r\n                    <AvatarImage src={profile.photos.large || noPhotoPic}/>\r\n                </AvatarImageWrapperCol>\r\n                <Col>\r\n\r\n                    <UserName title={profile.fullName} subTitle={'Беларусь, Гомель'}/>\r\n\r\n                    <ProfileStatusWithHooks status={status} isOwner={isOwner}/>\r\n\r\n                    <div style={{paddingTop: 7, fontSize: 15}}>\r\n                        {isOwner ?\r\n                            <NavLink to={'/friends'} style={{color: '#06162a'}}>\r\n                            <span style={{color: 'gray'}}>\r\n                                Друзей:&nbsp;\r\n                            </span>\r\n                                <span>\r\n                                {friendsAmount}\r\n                            </span>\r\n                            </NavLink>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div style={{paddingTop: 9}}>\r\n                        <Row>\r\n                            <Col>\r\n                                <MainInfoNameRow>\r\n                                    Телефон:\r\n                                </MainInfoNameRow>\r\n                                <MainInfoNameRow>\r\n                                    Дата рождения:\r\n                                </MainInfoNameRow>\r\n                                <MainInfoNameRow>\r\n                                    О себе:\r\n                                </MainInfoNameRow>\r\n                            </Col>\r\n                            <Col style={{paddingLeft: 15}}>\r\n                                <MainInfoRow>\r\n                                    +375 (33) 355-29-71\r\n                                </MainInfoRow>\r\n                                <MainInfoRow>\r\n                                    21 июня 2000\r\n                                </MainInfoRow>\r\n                                <MainInfoRow>\r\n                                    {profile.aboutMe && profile.aboutMe.length >= 50 ? `${profile.aboutMe.slice(0, 50)}...` : profile.aboutMe}\r\n                                </MainInfoRow>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/*todo: photo change*/}\r\n            {/*{isOwner &&*/}\r\n            {/*<input type='file' onChange={onMainPhotoSelected}/>*/}\r\n            {/*}*/}\r\n\r\n            <Row style={{paddingTop: '15px'}}>\r\n                <Col>\r\n                    {isOwner ?\r\n                        <>\r\n                            <Button icon={<UploadOutlined/>} onClick={handleClick}>\r\n                                Обновить фотографию\r\n                            </Button>\r\n                            <input type='file' style={{display: 'none'}} ref={hiddenFileInput} onChange={onMainPhotoSelected}/>\r\n                        </>\r\n\r\n                        :\r\n                        <Button>\r\n                            <NavLink to={'/chat'}>\r\n                                <MessageOutlined/> Написать сообщение\r\n                            </NavLink>\r\n                        </Button>\r\n                    }\r\n                </Col>\r\n                <Col style={{paddingLeft: 47}}>\r\n                    {isOwner ?\r\n                        <Row>\r\n                            <Button\r\n                                onClick={\r\n                                    () => {\r\n                                        editMode ? setEditMode(false) : setEditMode(true)\r\n                                    }\r\n                                }>\r\n                                {editMode\r\n                                    ? <div><CloseOutlined/> Выйти из режима редактирования</div>\r\n                                    : <div><EditOutlined/> Редактировать профиль</div>\r\n                                }\r\n\r\n                            </Button>\r\n                        </Row> : null}\r\n                </Col>\r\n            </Row>\r\n\r\n            <br/>\r\n            <div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileAdditionalData profile={profile}/>}\r\n            </div>\r\n        </ProfileInfoWrapper>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import React, {useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Avatar, List} from 'antd';\r\nimport {CloseCircleOutlined, HeartTwoTone} from \"@ant-design/icons\";\r\nimport {actions} from '../../../redux/profile-reducer';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n    date: Date\r\n    id: number\r\n    profileImage: string | null | undefined\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({message, likesCount, date, id, profileImage}) => {\r\n\r\n    const [localLikesCount, setLocalLikesCount] = useState(likesCount)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const deletePostCallback = () => {\r\n        dispatch(actions.deletePost(id));\r\n    }\r\n\r\n    const like = () => {\r\n        setLocalLikesCount(likesCount + 1);\r\n        setIsLiked(false);\r\n    };\r\n\r\n    const unlike = () => {\r\n        setLocalLikesCount(likesCount - 1);\r\n        setIsLiked(true);\r\n    };\r\n\r\n    return (\r\n        <div style={{backgroundColor: '#f0f2f5', borderRadius: 2, marginBottom: 10}}>\r\n            <List size={'large'}>\r\n                <List.Item>\r\n                    <List.Item.Meta\r\n                        avatar={<Avatar src={profileImage} size={{xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 80}}/>}\r\n                        title={message}\r\n                        description={\r\n                            <span>{date.toISOString().substring(0, 10) + ' ' + date.toISOString().substr(11, 5)}\r\n                            <div style={{paddingTop: 3}}><HeartTwoTone onClick={!isLiked ? like : unlike}\r\n                                                                       twoToneColor=\"#1890ff\"/> {localLikesCount}</div></span>}/>\r\n                    <CloseCircleOutlined style={{float: 'right', fontSize: 20}} onClick={deletePostCallback}/>\r\n                </List.Item>\r\n            </List>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;\r\n\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {Button, Form} from \"antd\";\r\n\r\nconst maxLength400 = maxLengthCreator(400);\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype PropsType = {}\r\n\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\n\r\nexport const AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType & PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                {createField<AddPostFormValuesKeysType>('Что у вас нового?', 'newPostText', [required, maxLength400], Textarea)}\r\n                <div style={{paddingBottom: 11, paddingTop: 15}}>\r\n                    <Button htmlType=\"submit\">Опубликовать</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-new-post-form'})(AddNewPostForm);","import React, {FC} from 'react';\r\nimport Post from \"./Post\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"../../forms/AddNewPostForm/AddNewPostForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectProfileImage, selectProfilePosts} from \"../../../selectors/profile-selectors\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport {Divider} from \"antd\";\r\n\r\ntype PropsType = {}\r\n\r\nconst ProfilePosts: FC<PropsType> = () => {\r\n    const posts = useSelector(selectProfilePosts)\r\n    const profileImage = useSelector(selectProfileImage)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let postsElements = posts.reverse().map((p) => <Post profileImage={profileImage} message={p.message} key={p.id} id={p.id} likesCount={p.likesCount} date={p.date}/>);\r\n\r\n    let addNewPost = (values: AddPostFormValuesType) => {\r\n        dispatch(actions.addPostActionCreator(values.newPostText));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Divider style={{marginBottom: 7}}/>\r\n            <h3 style={{paddingTop: 10}}>\r\n                Мои записи\r\n            </h3>\r\n            <AddNewPostForm onSubmit={addNewPost}/>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(ProfilePosts)\r\n\r\nexport default MyPostsMemorized","import React, {FC, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getStatus, getUserProfile} from \"../../redux/profile-reducer\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {selectAuthorizedUserId, selectIsAuth} from \"../../selectors/auth-selectors\";\r\nimport styled from 'styled-components';\r\nimport ProfileInfo from \"../../components/Profile/ProfileInfo/ProfileInfo\";\r\nimport ProfilePosts from \"../../components/Profile/ProfilePosts/ProfilePosts\";\r\nimport {selectProfile} from \"../../selectors/profile-selectors\";\r\nimport Preloader from \"../../components/common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst ProfilePageWrapper = styled.div`\r\n  width: 100%;\r\n`\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & {}\r\n\r\nexport const ProfilePage: FC<PropsType> = ({history, match}) => {\r\n    const authorizedUserId = useSelector(selectAuthorizedUserId)\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const profile = useSelector(selectProfile)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const refreshProfile = () => {\r\n        let userId: number | null = +match.params.userId;\r\n        if (!userId) {\r\n            userId = authorizedUserId;\r\n            if (!userId) {\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"Id should exists in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            dispatch(getUserProfile(userId));\r\n            dispatch(getStatus(userId));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshProfile();\r\n    }, [match.params.userId]);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <ProfilePageWrapper>\r\n            <ProfileInfo isOwner={!match.params.userId} profile={profile}/>\r\n            {!match.params.userId ?\r\n                <ProfilePosts/>\r\n                : null}\r\n        </ProfilePageWrapper>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(withRouter(ProfilePage));"],"sourceRoot":""}