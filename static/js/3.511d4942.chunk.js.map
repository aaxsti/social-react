{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","className","style","formSummeryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","profileInfo","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","noPhotoPic","mainPhoto","target","files","length","inputPhotoButton","initialValues","formData","then","Post","message","likesCount","posts","item","alt","maxLength400","maxLengthCreator","required","MyPostsMemorized","React","memo","addPost","postsElements","reverse","p","id","postsBlock","values","newPostText","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","MyPosts","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.511d4942.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__8OriO\",\"profileInfo\":\"ProfileInfo_profileInfo__1OXGY\",\"infoList\":\"ProfileInfo_infoList__2awl3\",\"workingImage\":\"ProfileInfo_workingImage__373HE\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3j-IZ\",\"inputPhotoButton\":\"ProfileInfo_inputPhotoButton__37gIn\",\"contact\":\"ProfileInfo_contact__elJLR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3koDc\",\"posts\":\"MyPosts_posts__2jhSQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__27q3Q\"};","import React, {useEffect, useState, FC, ChangeEvent} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n       setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, {FC} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button onClick={() => {}}>Save</button>\r\n            </div>\r\n            {error &&\r\n            <div className={style.formSummeryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <div>\r\n                    <b>Full name</b>\r\n                    {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>\r\n                    {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills</b>\r\n                    {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <b>About me:</b>\r\n                    {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={s.contact}>\r\n                        {/*todo: do some solution fot embedded objects*/}\r\n                        <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {useState, FC, ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport noPhotoPic from \"../../../assets/images/user.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType>= ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img alt='' src='https://klike.net/uploads/posts/2019-09/1568880410_2.jpg'/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n\r\n                <img src={profile.photos.large || noPhotoPic} className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} className={s.inputPhotoButton}/>}\r\n\r\n                <br/>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType>= ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            {isOwner ? <div>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div> : null}\r\n            <div>\r\n                <div>\r\n                    <b>Full name</b> {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n                }\r\n                <div>\r\n                    <b>About me:</b> {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b> {\r\n                    Object\r\n                        .keys(profile.contacts)\r\n                        .map((key) => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}:</b> {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({message, likesCount}) => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img alt ='' src='https://picsum.photos/100/100'/>\r\n                {message}\r\n                <div>\r\n                    <span>{likesCount} likes</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;\r\n\r\n\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\n\r\nconst maxLength400 = maxLengthCreator(400);\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype PropsType = {}\r\n\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\n\r\nexport const AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType & PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesKeysType>('Write your post', 'newPostText', [required, maxLength400], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-new-post-form'})(AddNewPostForm);","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"./AddNewPostForm/AddNewPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MapPropsType & DispatchPropsType> = ({posts, addPost}) => {\r\n\r\n    let postsElements = posts.reverse().map((p) => <Post message={p.message} key={p.id} likesCount={p.likesCount}/>);\r\n\r\n    let addNewPost = (values: AddPostFormValuesType) => {\r\n        addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>\r\n(mapStateToProps,\r\n    {addPost: actions.addPostActionCreator})\r\n(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {FC} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    status: string\r\n    profile: ProfileType | null\r\n\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst Profile: FC<PropsType>= ({savePhoto, isOwner, profile, status, saveProfile, updateStatus}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                savePhoto={savePhoto}\r\n                isOwner={isOwner}\r\n                profile={profile}\r\n                status={status}\r\n                saveProfile={saveProfile}\r\n                updateStatus={updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;\r\n\r\n\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"Id should exists in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType , prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}