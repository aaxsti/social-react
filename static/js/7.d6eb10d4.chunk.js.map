{"version":3,"sources":["pages/Chat/ChatPage.module.css","pages/Chat/ChatPage.tsx"],"names":["module","exports","Dialogs","className","s","dialogsBlock","dialogElement","src","dialogImage","dialogName","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","React","memo","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","width","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","key","message","ref","padding","borderBottom","alt","photo","userPhoto","borderRadius","paddingLeft","userName","setMessage","autoSize","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"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","file":"static/js/7.d6eb10d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogImage\":\"ChatPage_dialogImage__2HaKY\",\"dialogName\":\"ChatPage_dialogName__2RLKE\",\"dialogElement\":\"ChatPage_dialogElement__blpW-\",\"dialogsBlock\":\"ChatPage_dialogsBlock__1OMVM\"};","import {Button, Col, Row} from \"antd\"\r\nimport React, {FC, useEffect, useRef, useState} from \"react\"\r\nimport {ChatMessageAPIType} from \"../../api/chat-api\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport {Image} from 'antd';\r\nimport s from './ChatPage.module.css'\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {SendOutlined} from \"@ant-design/icons\";\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col>\r\n                    <Dialogs/>\r\n                </Col>\r\n                <Col>\r\n                    <Chat/>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Dialogs: FC = () => {\r\n    return (\r\n        <div className={s.dialogsBlock}>\r\n            <Row className={s.dialogElement}>\r\n                <Image src={\"https://picsum.photos/400/400\"} className={s.dialogImage}/>\r\n                <span className={s.dialogName}>Максим</span>\r\n            </Row>\r\n            <Row className={s.dialogElement}>\r\n                <Image src={\"https://picsum.photos/200/200\"} className={s.dialogImage}/>\r\n                <span className={s.dialogName}>Илья</span>\r\n            </Row>\r\n            <Row className={s.dialogElement}>\r\n                <Image src={\"https://picsum.photos/300/300\"} className={s.dialogImage}/>\r\n                <span className={s.dialogName}>Игорь</span>\r\n            </Row>\r\n            <Row className={s.dialogElement}>\r\n                <Image src={\"https://picsum.photos/100/100\"} className={s.dialogImage}/>\r\n                <span className={s.dialogName}>Александр</span>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n            <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: FC<{}> = React.memo(({}) => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{height: '400px', width: '500px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n            <div ref={messagesAnchorRef}>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst Message: FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n    return (\r\n        <div>\r\n\r\n            <div style={{padding: '3px 0 0 10px', borderBottom: '1px #dadcdf solid'}}>\r\n                <img alt='User photo' src={message.photo !== null ? message.photo : userPhoto} style={{width: '30px', borderRadius: 15}}/>\r\n                <b style={{width: '30px', paddingLeft: 7}}>{message.userName}</b>\r\n                <br/>\r\n                {message.message}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: FC<{}> = ({}) => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col style={{padding: '20px 0 0 0'}}>\r\n                <TextArea autoSize={true} style={{width: 420, height: 30}} onChange={(e) => setMessage(e.currentTarget.value)}\r\n                          value={message}>\r\n\r\n                </TextArea>\r\n            </Col>\r\n            <Col style={{padding: '20px 0 0 0'}}>\r\n                <Button disabled={status !== 'ready'} onClick={sendMessageHandler}><SendOutlined /></Button>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}