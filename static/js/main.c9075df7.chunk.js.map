{"version":3,"sources":["components/Users/Users.module.css","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","api/profile-api.ts","redux/profile-reducer.ts","assets/images/user.png","api/api.ts","redux/dialogs-reducer.ts","assets/images/preloader.svg","serviceWorker.js","components/News/News.tsx","components/Settings/Settings.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/LoginForm/LoginForm.tsx","api/security-api.ts","api/auth-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","dialogs","name","imgLink","sendMessage","newMessageBody","dialogsReducer","body","Boolean","window","location","hostname","match","News","Settings","getUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","useState","portionNumber","setPortionNumber","portionCount","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","onClick","map","cn","selectedPage","pageNumber","key","e","User","user","unfollow","follow","to","alt","src","small","userPhoto","s","followed","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","isSubmitting","as","updateObjectInArray","items","itemId","objPropName","newObjProps","usersAPI","userFollow","post","userUnfollow","delete","payload","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","Users","props","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","bind","UsersPage","pageTitle","Preloader","reduxForm","form","handleSubmit","error","createField","Input","undefined","style","formSummeryError","securityAPI","authAPI","email","password","rememberMe","captcha","login","isAuth","captchaUrl","getAuthUserData","meData","getCaptchaUrl","url","authReducer","LoginPage","setState","CaptchaIsRequired","initialized","appReducer","friends","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","app","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","Suspense","fallback","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","backgroundColor","icon","UserOutlined","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","addEventListener","removeEventListener","Content","Footer","Sider","padding","margin","width","height","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SocialNetworkApp","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text","position","preloader"],"mappings":"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","file":"static/js/main.c9075df7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__3Bbc9\",\"users\":\"Users_users__2JqzX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2p4Lg\",\"pageNumbers\":\"Paginator_pageNumbers__nScyD\",\"paginator\":\"Paginator_paginator__1u4Wr\",\"pageNumber\":\"Paginator_pageNumber__3RwdL\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value)=> {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n};","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Привет, как дела?', likesCount: 25},\r\n        {id: 2, message: 'Это мой первый пост', likesCount: 15},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD_POST':\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case 'SN/PROFILE/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case 'SN/PROFILE/SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            };\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    } catch (error) {\r\n        // Error\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if (userId != null) {\r\n            dispatch(await getUserProfile(userId))\r\n        } else {\r\n            throw new Error('userIf can`t be null')\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/user.57b075ed.png\";","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"31c269a2-4de2-4018-98f9-0e5ea8f600fd\"\r\n    }\r\n});\r\n\r\n// 6a3eaab1-e015-4834-8a3d-4dbe63a05c04 - aaxsti\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired= 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","import {DialogType, MessageType} from \"../types/types\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi!'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'qq'},\r\n    ] as Array<MessageType>,\r\n    dialogs: [\r\n        {id: 1, name: 'Maxim', imgLink: 'https://picsum.photos/400/400'},\r\n        {id: 2, name: 'Ilya', imgLink: 'https://picsum.photos/100/100'},\r\n        {id: 3, name: 'Ivan', imgLink: 'https://picsum.photos/200/200'},\r\n        {id: 4, name: 'Stas', imgLink: 'https://picsum.photos/80/80'},\r\n        {id: 5, name: 'Sasha', imgLink: 'https://picsum.photos/90/90'},\r\n    ] as Array<DialogType>\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND_MESSAGE\":\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","module.exports = __webpack_public_path__ + \"static/media/preloader.b159c782.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default News;\r\n\r\n","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Settings;\r\n\r\n","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import React, {FC, useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    portionSize?: number\r\n\r\n    onPageChanged?: (pageNumber: number) => void\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({\r\n                                      totalItemsCount,\r\n                                      pageSize,\r\n                                      currentPage,\r\n                                      onPageChanged = x => x,\r\n                                      portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n\r\n        <div className={styles.paginator}>\r\n\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [styles.selectedPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p);\r\n                                 }}>{p}</span>\r\n\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber((portionNumber + 1))\r\n            }}>NEXT</button>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React, {FC} from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + user.id}>\r\n                                <img alt=\"User picture\" src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                     className={s.userPhoto}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {user.followed\r\n                                ? <button disabled={followingInProgress\r\n                                    .some(id => id === user.id)}\r\n                                          onClick={() => {\r\n                                              unfollow(user.id);\r\n                                          }}>\r\n                                    Unfollow</button>\r\n\r\n                                : <button disabled={followingInProgress\r\n                                    .some(id => id === user.id)}\r\n                                          onClick={() => {\r\n                                              follow(user.id)\r\n                                          }}>\r\n                                    Follow</button>\r\n                            }\r\n\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{user.name}</div>\r\n                            <div>{user.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"user.location.country\"}</div>\r\n                            <div>{\"user.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React, {FC} from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n\r\n        const filter = useSelector(getUsersFilter)\r\n\r\n        const submit = (values: FormType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === \"null\" ? null : values.friend === \"true\"\r\n            }\r\n            onFilterChanged(filter)\r\n            setSubmitting(false)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                    validate={usersSearchFormValidate}\r\n                    onSubmit={submit}\r\n                >\r\n                    {({isSubmitting}) => (\r\n                        <Form>\r\n                            <Field type=\"text\" name=\"term\"/>\r\n\r\n                            <Field name=\"friend\" as=\"select\">\r\n                                <option value=\"null\">All</option>\r\n                                <option value=\"true\">Only followed</option>\r\n                                <option value=\"false\">Only unfollowed</option>\r\n                            </Field>\r\n\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Find\r\n                            </button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n)","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    userFollow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    userUnfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n};","import {APIResponseType, ResultCodesEnum} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true as boolean,\r\n    followingInProgress: [] as Array<number>,    // array of user id`s\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state, users: action.users}\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.count}\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER':\r\n            return {...state, filter: action.payload}\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SN/USERS/SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: 'SN/USERS/SET_FILTER',\r\n        payload: filter\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number,\r\n                             filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    }\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsType) => {\r\n\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.userFollow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n\r\nexport const unfollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.userUnfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>","import React, {FC, useEffect} from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {FilterType, requestUsers, follow, unfollow} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\n\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    }\r\n\r\n    const userFollow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const userUnfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return (\r\n        <div className={s.users}>\r\n\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n            <Paginator\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n            />\r\n            <div>\r\n                {users.map(u => <User\r\n                    user={u}\r\n                    key={u.id}\r\n                    followingInProgress={followingInProgress}\r\n                    unfollow={userUnfollow}\r\n                    follow={userFollow}\r\n                />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\nimport {Users} from \"./Users\";\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage: FC<UsersPagePropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching);\r\n\r\n    return <>\r\n        {/*Code line down causes bad preloading look!*/}\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n}","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {createField, GetStringKeys, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {LoginFormOwnProps, LoginFormValuesType } from \"../LoginPage\";\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nexport const LoginForm: FC<InjectedFormProps<LoginFormValuesType & LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember me\")}\r\n\r\n            {error &&\r\n            <div className={style.formSummeryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);","import {instance} from \"./api\";\r\n\r\ntype getCaptchaUrlResponseType = {\r\n    url: string;\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<getCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n};","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum & ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {authAPI} from \"../api/auth-api\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string | null    // if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n        case 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/AUTH/SET_USER_DATA', payload:\r\n            {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch, setState) => {\r\n    let data = await authAPI.login(email, password, rememberMe);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import React, {FC} from \"react\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\n\r\nexport type LoginFormOwnProps = {}\r\n\r\nexport type LoginFormValuesType = {\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\n\r\nexport const LoginPage: FC = () => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state=  initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<any, AppStateType, unknown, ActionsType>\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n};\r\n\r\nexport default appReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {FriendType, UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {friendsAPI} from \"../api/friends-api\";\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Maxim', imgLink: 'https://picsum.photos/400/400'},\r\n        {id: 2, name: 'Ilya', imgLink: 'https://picsum.photos/100/100'},\r\n        {id: 3, name: 'Ivan', imgLink: 'https://picsum.photos/200/200'},\r\n    ] as Array<FriendType>,\r\n}\r\n\r\nconst sidebarReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/SIDEBAR/SET_FRIENDS':\r\n            return {...state, friends: action.friends}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setFriends: (friends: Array<FriendType>) => ({type: 'SN/SIDEBAR/SET_FRIENDS', friends} as const),\r\n}\r\n\r\nexport const requestFriends = (): ThunkType =>\r\n    async (dispatch) => {\r\n        let data = await friendsAPI.getFriends();\r\n        // dispatch(actions.setFriends(data.items));\r\n    }\r\n\r\nexport default sidebarReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;  // (globalState: GLOBALSTATE) => GLOBALSTATE\r\nexport type AppStateType = ReturnType<RootReducerType> // Type that return RootReducerType\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\nexport default withSuspense;","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n}","import React, {FC} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nexport type MapPropsType = {}\r\n\r\nconst Header: FC<MapPropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n    const dispatch = useDispatch()\r\n\r\n    const {Header} = Layout;\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\"><Link to=\"/users\">Пользователи</Link></Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col span={1}>\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                        </Col>\r\n                        <Col span={5}>\r\n                            <Button onClick={logoutCallback}>Log out</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={6}>\r\n                        <Button>\r\n                            <Link to={'/login'}>Login</Link>\r\n                        </Button>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        </Header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React, {ComponentType, FC} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Breadcrumb, Layout, Menu} from 'antd';\r\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport News from \"./components/News/News\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {UsersPage} from \"./components/Users/UsersContainer\";\r\nimport {LoginPage} from \"./components/Login/LoginPage\";\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport withSuspense from \"./hoc/withSuspense\";\r\nimport Header from \"./components/Header/Header\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedChatPage = withSuspense(ChatPage)\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        //dispatch thunk of global error\r\n        alert(\"Some error occurred\");\r\n        // console.error(promiseRejectionEvent);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        const {Content, Footer, Sider} = Layout;\r\n\r\n        return (\r\n\r\n            <Layout>\r\n                <Header/>\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                // defaultSelectedKeys={['1']}\r\n                                // defaultOpenKeys={['sub1']}\r\n                                style={{height: '100%'}}\r\n                            >\r\n                                <Menu.Item key=\"1\"><Link to=\"/profile\">Моя страница</Link></Menu.Item>\r\n                                <Menu.Item key=\"2\"><Link to=\"/dialogs\">Мессенджер</Link></Menu.Item>\r\n                                <Menu.Item key=\"3\"><Link to=\"/news\">Новоости</Link></Menu.Item>\r\n                                <Menu.Item key=\"4\"><Link to=\"/users\">Пользователи</Link></Menu.Item>\r\n                                <Menu.Item key=\"5\"><Link to=\"/settings\">Настройки</Link></Menu.Item>\r\n                                <Menu.Item key=\"6\"><Link to=\"/chat\">Мессенджер (Чат)</Link></Menu.Item>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                            <Switch>\r\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n\r\n                                <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n                                <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n                                <Route path='/news' render={() => <News/>}/>\r\n                                <Route path='/settings' render={() => <Settings/>}/>\r\n                                <Route path='/users' render={() => <UsersPage pageTitle={\"Users\"}/>}/>\r\n                                <Route path='/login' render={() => <LoginPage/>}/>\r\n                                <Route path='/chat' render={() => <SuspendedChatPage/>}/>\r\n\r\n                                {/*<Route path='*' render={() => <div>404 NOT FOUND</div>}/>*/}\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>Social Network ©2021 Created by Maxim Astapenko</Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nlet AppContainer = compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nconst SocialNetworkApp: FC = () => {\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default SocialNetworkApp;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SocialNetworkApp from \"./App\";\n\nReactDOM.render(<SocialNetworkApp/>, document.getElementById('root'));\n\nserviceWorker.unregister();","import React, {FC} from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   component={component}\r\n                   validate={validators}\r\n                   {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nlet Preloader  = () => {\r\n    return <div style={{backgroundColor: '#e7f0ff', position: \"absolute\"}}>\r\n        <img src={preloader} alt=\"Preloader picture\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3FZxU\",\"error\":\"FormsControls_error__2wZcU\",\"formSummeryError\":\"FormsControls_formSummeryError__1a8XU\"};"],"sourceRoot":""}