{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["wsChannel","WebSocket","Chat","Messages","AddMessageForm","useState","messages","setMessages","useEffect","addEventListener","e","newMessages","JSON","parse","data","prevMessages","style","height","overflowY","map","m","index","Message","key","message","src","photo","width","userName","setMessage","onChange","currentTarget","value","disabled","readyState","OPEN","onClick","send","ChatPage"],"mappings":"yKAGMA,EAAY,IAAIC,UAAU,gEAiB1BC,EAAW,WACb,OACI,6BACI,kBAACC,EAAD,MACA,kBAACC,EAAD,QAKND,EAAe,WAAO,IAAD,EAESE,mBAA4B,IAFrC,mBAEhBC,EAFgB,KAENC,EAFM,KAWvB,OAPAC,qBAAU,WACNR,EAAUS,iBAAiB,WAAW,SAACC,GACnC,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCJ,YAExD,IAGC,yBAAKK,MAAO,CAACC,OAAQ,QAASC,UAAW,SACpCZ,EAASa,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAACC,EAAD,CAASC,IAAKF,EAAOG,QAASJ,SAKhEE,EAA0C,SAAC,GAAe,IAAdE,EAAa,EAAbA,QAC9C,OACI,6BACI,yBAAKC,IAAKD,EAAQE,MAAOV,MAAO,CAACW,MAAO,UAD5C,IACuD,2BAAIH,EAAQI,UAC/D,6BACCJ,EAAQA,QACT,+BAKNpB,EAAqB,WAAO,IAAD,EACCC,mBAAS,IADV,mBACtBmB,EADsB,KACbK,EADa,KAU7B,OACI,6BACI,6BACI,8BAAUC,SAAU,SAACpB,GAAD,OAAOmB,EAAWnB,EAAEqB,cAAcC,QAAQA,MAAOR,KAIzE,6BACI,kBAAC,IAAD,CAAQS,SAAUjC,EAAUkC,aAAejC,UAAUkC,KAAMC,QAhBnD,WACXZ,IAGLxB,EAAUqC,KAAKb,GACfK,EAAW,OAWH,WAODS,UAvEM,WACjB,OACI,6BACI,kBAACpC,EAAD","file":"static/js/5.53483404.chunk.js","sourcesContent":["import {Button} from \"antd\"\r\nimport React, {FC, useEffect, useState} from \"react\"\r\n\r\nconst wsChannel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: FC = () => {\r\n    return (\r\n        <div>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: FC = () => {\r\n\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        wsChannel.addEventListener('message', (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{height: '400px', overflowY: 'auto'}}>\r\n            {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: FC<{message: ChatMessageType}> = ({message}) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm: FC = () => {\r\n    const [message, setMessage] = useState('')\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        wsChannel.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}>\r\n\r\n                </textarea>\r\n            </div>\r\n            <div>\r\n                <Button disabled={wsChannel.readyState !== WebSocket.OPEN} onClick={sendMessage}>Send</Button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}