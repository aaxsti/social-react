{"version":3,"sources":["components/forms/FormsControls/FormsControls.tsx","components/common/Preloader/Preloader.tsx","components/forms/FormsControls/FormsControls.module.css","hoc/withAuthRedirect.tsx","api/dialogs-api.ts","redux/dialogs-reducer.ts","utils/validators/validators.ts","redux/profile-reducer.ts","assets/images/user.png","redux/friends-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","assets/about/github.svg","assets/about/linkedin.svg","assets/about/vkontakte.svg","assets/about/telegram.svg","assets/about/gmail.svg","assets/images/preloader.svg","assets/images/sad.svg","assets/images/belarus.svg","assets/images/logo.svg","api/api.ts","components/AppFooter/AppFooter.styled.ts","components/AppFooter/AppFooter.tsx","selectors/app-selectors.ts","components/AppSidebar/AppSidebar.styled.ts","components/AppSidebar/AppSidebar.tsx","components/forms/LoginForm/LoginForm.styled.ts","components/forms/LoginForm/LoginForm.tsx","api/auth-api.ts","redux/auth-reducer.ts","pages/LoginPage/LoginPage.tsx","components/forms/SignUpForm/SignUpForm.styled.ts","components/forms/SignUpForm/SignUpForm.tsx","pages/SignUpPage/SignUpPage.tsx","hoc/withSuspense.tsx","pages/ErrorPage/ErrorPage.tsx","components/Users/User.styled.ts","components/Users/User.tsx","selectors/users-selectors.ts","components/forms/UsersSearchForm/UsersSearchForm.styled.ts","components/forms/UsersSearchForm/UsersSearchForm.tsx","utils/object-helpers.ts","redux/users-reducer.ts","pages/UsersPage/UsersPage.styles.ts","pages/UsersPage/UsersPage.tsx","components/AppContent/AppContent.styled.ts","components/Dialogs/DialogsChat/DialogsChat.tsx","selectors/dialogs-selectors.ts","components/Dialogs/Dialog/Dialog.styled.ts","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Dialogs/Dialogs.styled.ts","components/Dialogs/Dialogs/Dialogs.tsx","pages/DialogsPage/DialogsPage.tsx","components/AppContent/AppContent.tsx","components/AppHeader/AppHeader.styled.ts","components/AppHeader/AppHeader.tsx","components/App/App.styled.ts","redux/app-reducer.ts","components/App/App.tsx","redux/news-reducer.ts","redux/store/redux-store.ts","Global.styled.ts","index.tsx","selectors/auth-selectors.ts","api/profile-api.ts","api/users-api.ts"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","allowClear","InputField","createField","placeholder","name","validators","component","text","validate","PreloaderWrapper","styled","div","Preloader","src","preloader","alt","module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","dialogsAPI","userId","instance","put","then","res","data","get","initialState","messages","dialogs","actions","type","startDialog","a","getDialogs","dispatch","dialogsReducer","action","required","value","maxLengthCreator","maxLength","length","posts","id","message","likesCount","date","Date","profile","status","editMode","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","profileAPI","getProfile","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","savePhoto","file","saveProfile","getState","Error","stopSubmit","_error","Promise","reject","profileReducer","newPost","Math","floor","random","filter","p","friends","requestFriends","usersAPI","getUsers","items","friendsReducer","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","map","m","v4","index","array","axios","create","withCredentials","baseURL","headers","FooterWrapper","Footer","AboutBlock","AboutBlockHeader","h3","IconsBlock","IconsBlockElement","AboutBlockInfo","AppFooter","href","githubIcon","linkedinIcon","vkIcon","telegramIcon","gmailIcon","selectInitialized","createSelector","app","initialized","MenuWrapper","Menu","SidebarWrapper","Sider","AppSidebar","width","mode","Item","key","HomeOutlined","HeartOutlined","ExceptionOutlined","UserOutlined","MessageOutlined","WechatOutlined","Divider","InfoCircleOutlined","LoginFormWrapper","Row","LoginFormField","reduxForm","form","handleSubmit","onSubmit","undefined","style","formSummeryError","htmlType","authAPI","email","password","rememberMe","captcha","post","delete","login","avatar","getAuthUserData","meData","myAvatar","small","authReducer","LoginFormHeader","h1","LoginPage","useSelector","selectIsAuth","useDispatch","LoginOutlined","formData","SignUpFormWrapper","Col","SignUpFormElement","SignUpForm","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","paddingBottom","paddingRight","paddingTop","format","Group","SignUpPage","UserAddOutlined","withSuspense","Suspense","fallback","ErrorPage","ErrorSadPic","UserItem","CountryFlagIcon","img","UserNameLink","NavLink","UserListContent","UserCountry","UserItemRow","UserStatus","User","user","followingInProgress","unfollow","follow","userPhoto","size","xs","sm","md","lg","xl","xxl","BelarusFlag","followed","disabled","some","onClick","UserDeleteOutlined","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getFollowingInProgress","getUsersFilter","SearchUserInput","Input","SearchTermSelect","Select","usersSearchFormValidate","UsersSearchForm","React","memo","onFilterChanged","enableReinitialize","initialValues","term","friend","String","values","setSubmitting","isSubmitting","SearchOutlined","Option","updateObjectInArray","itemId","objPropName","newObjProps","isFetching","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","UsersPageWrapper","UserList","PaginatorWrapper","Pagination","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","pathname","onPageChanged","pageNumber","userFollow","bind","userUnfollow","current","total","onChange","showSizeChanger","BackTopStyled","AppContentWrapper","Content","DialogsChat","paddingLeft","height","overflowY","selectDialogs","DialogDate","DialogItemInfo","DialogItem","DialogItemRight","NewMessagesCount","span","Dialog","photo","userName","lastUserActivityDate","newMessagesCount","formattedDate","split","join","CloseCircleOutlined","DialogsListCol","DialogsList","List","Dialogs","d","hasNewMessage","ProfilePage","lazy","NewsPage","FriendsPage","InfoPage","CommonChatPage","SuspendedProfilePage","SuspendedNewsPage","SuspendedFriendsPage","SuspendedInfoPage","SuspendedCommonChatPage","withRouter","exact","path","render","UpOutlined","HeaderWrapper","Header","HeaderLogo","HeaderLogoWrapper","HeaderUserAvatarLink","Link","HeaderUserEmail","HeaderLogoLink","AppHeader","authorizedUserEmail","selectAuthorizedUserEmail","authorizedUserAvatar","selectAuthorizedUserAvatar","flex","Logo","MainFrameWrapper","Layout","GlobalPreloader","appReducer","App","promise","all","news","title","imageUrl","summary","publishedAt","newsReducer","rootReducer","combineReducers","profilePage","friendsPage","newsPage","chat","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Global","createGlobalStyle","ReactDOM","basename","process","document","getElementById","selectAuthorizedUserId","photoFile","log","FormData","append"],"mappings":"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","file":"static/js/main.70d8d3be.chunk.js","sourcesContent":["import React, {FC} from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport {Input} from \"antd\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <span>\r\n                {children}\r\n            </span>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><TextArea {...input} {...restProps} allowClear/></FormControl>\r\n}\r\n\r\nexport const InputField: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><Input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: FC<WrappedFieldProps>,\r\n                                                         props = {},\r\n                                                         text = \"\") {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   component={component}\r\n                   validate={validators}\r\n                   {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const PreloaderWrapper = styled.div`\r\n  position: absolute;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst Preloader  = () => {\r\n    return <PreloaderWrapper>\r\n        <img src={preloader} alt=\"Preloader picture\"/>\r\n    </PreloaderWrapper>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3MkGv\",\"error\":\"FormsControls_error__3kbED\",\"formSummeryError\":\"FormsControls_formSummeryError__1-U67\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})(RedirectComponent);\r\n}","import {instance, APIResponseType} from \"./api\";\r\n\r\nexport const dialogsAPI = {\r\n    startDialog(userId: number) {\r\n        return instance.put<APIResponseType>(`dialogs/${userId}`).then(res => res.data);\r\n    },\r\n\r\n    getDialogs() {\r\n        return instance.get('dialogs').then(res => res.data);\r\n    },\r\n\r\n};","import {DialogType, MessageType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {dialogsAPI} from \"../api/dialogs-api\";\r\n\r\nlet initialState = {\r\n    messages: [] as Array<MessageType>,\r\n    dialogs: [] as Array<DialogType>\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SET_DIALOGS\":\r\n            return {...state, dialogs: action.dialogs}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setDialogs: (dialogs: Array<DialogType>) => ({type: 'SN/DIALOGS/SET_DIALOGS', dialogs} as const)\r\n}\r\n\r\nexport const startDialog = (userId: number): ThunkType => async () => {\r\n    await dialogsAPI.startDialog(userId);\r\n}\r\n\r\nexport const getDialogs = (): ThunkType => async (dispatch) => {\r\n    let data = await dialogsAPI.getDialogs();\r\n    dispatch(actions.setDialogs(data));\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Заполните поле\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value)=> {\r\n    if (value && value.length > maxLength) return `Максимальная длина: ${maxLength} символов`;\r\n    return undefined;\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Это мой первый пост', likesCount: 25,\r\n            date: new Date(2021, 1, 21, 17, 55)},\r\n        {id: 2, message: 'Всем привет', likesCount: 15,\r\n            date: new Date(2021, 3, 13, 13, 27)}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    editMode: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD_POST':\r\n            let newPost = {\r\n                id: Math.floor(Math.random() * 100000),\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n                date: new Date()\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case 'SN/PROFILE/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case 'SN/PROFILE/SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            };\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    } catch (error) {\r\n        // Error\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if (userId != null) {\r\n            dispatch(await getUserProfile(userId))\r\n        } else {\r\n            throw new Error('userId can`t be null')\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/user.57b075ed.png\";","import {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    friends: [] as Array<UserType>\r\n}\r\n\r\nconst friendsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/FRIENDS/SET_FRIENDS':\r\n            return {...state, friends: action.friends}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setFriends: (friends: Array<UserType>) => ({type: 'SN/FRIENDS/SET_FRIENDS', friends} as const)\r\n}\r\n\r\nexport const requestFriends = (): ThunkType =>\r\n    async (dispatch) => {\r\n        let data = await usersAPI.getUsers(1, 100, '', true);\r\n        dispatch(actions.setFriends(data.items));\r\n    }\r\n\r\nexport default friendsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","const subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n};\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n};\r\n\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n};\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback);\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error';\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}","import {FormAction} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v4} from \"uuid\";\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n};\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEIVED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v4() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEIVED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const),\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async () => {\r\n    chatAPI.sendMessage(message);\r\n}\r\n\r\nexport default chatReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/github.19f49232.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.4989ae0f.svg\";","module.exports = __webpack_public_path__ + \"static/media/vkontakte.b5870904.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.71da0f1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmail.aabb690e.svg\";","module.exports = __webpack_public_path__ + \"static/media/preloader.3ba7224e.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad.07a0b701.svg\";","module.exports = __webpack_public_path__ + \"static/media/belarus.54f7e3da.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d614f5e.svg\";","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"6395d35c-2111-4d92-a3c3-f0a81868a921\"\r\n    }\r\n});\r\n\r\n// 6a3eaab1-e015-4834-8a3d-4dbe63a05c04 - aaxsti\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","import styled from \"styled-components\";\r\nimport {Footer} from \"antd/es/layout/layout\";\r\n\r\nexport const FooterWrapper = styled(Footer)`\r\n  text-align: center;\r\n  background-color: #e8e8ed\r\n`\r\nexport const AboutBlock = styled.div`\r\n  margin: 0 auto;\r\n  width: 500px;\r\n`\r\nexport const AboutBlockHeader = styled.h3`\r\n  margin: 0;\r\n  padding: 0 0 15px 0;\r\n  font-weight: lighter;\r\n  text-align: center;\r\n  font-size: 18px;\r\n`\r\nexport const IconsBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const IconsBlockElement = styled.a`\r\n  outline: none;\r\n  padding-right: 10px;\r\n\r\n  &:last-child {\r\n    padding-right: 0;\r\n  }\r\n`\r\nexport const AboutBlockInfo = styled.div`\r\n  font-weight: lighter;\r\n  padding-top: 20px;\r\n`\r\n","import React, {FC} from \"react\";\r\nimport githubIcon from '../../assets/about/github.svg'\r\nimport linkedinIcon from '../../assets/about/linkedin.svg'\r\nimport vkIcon from '../../assets/about/vkontakte.svg'\r\nimport telegramIcon from '../../assets/about/telegram.svg'\r\nimport gmailIcon from '../../assets/about/gmail.svg'\r\nimport {\r\n    AboutBlock,\r\n    AboutBlockHeader,\r\n    AboutBlockInfo,\r\n    FooterWrapper,\r\n    IconsBlock,\r\n    IconsBlockElement} from \"./AppFooter.styled\";\r\n\r\ntype PropsType = {}\r\n\r\nconst AppFooter: FC<PropsType> = () => {\r\n    return (\r\n        <FooterWrapper>\r\n            <AboutBlock>\r\n                <AboutBlockHeader>\r\n                    Me in social\r\n                </AboutBlockHeader>\r\n                <IconsBlock>\r\n                    <IconsBlockElement href='https://github.com/aaxsti'>\r\n                        <img src={githubIcon} alt='github link icon'/>\r\n                    </IconsBlockElement>\r\n                    <IconsBlockElement href='https://linkedin.com/in/astapenko-maxim'>\r\n                        <img src={linkedinIcon} alt='linkedin link icon'/>\r\n                    </IconsBlockElement>\r\n                    <IconsBlockElement href='https://vk.com/bladerunner1'>\r\n                        <img src={vkIcon} alt='vk link icon'/>\r\n                    </IconsBlockElement>\r\n                    <IconsBlockElement href='https://t.me/astapenkomaxim'>\r\n                        <img src={telegramIcon} alt='telegram link icon'/>\r\n                    </IconsBlockElement>\r\n                    <IconsBlockElement href='mailto:3646824@gmail.com'>\r\n                        <img src={gmailIcon} alt='gmail link icon'/>\r\n                    </IconsBlockElement>\r\n                </IconsBlock>\r\n                <AboutBlockInfo>\r\n                    Social Network ©2021 Created by Maxim Astapenko\r\n                </AboutBlockInfo>\r\n            </AboutBlock>\r\n        </FooterWrapper>\r\n    )\r\n}\r\n\r\nexport default AppFooter;","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst app = (state: AppStateType) => state.app\r\n\r\nexport const selectInitialized = createSelector(\r\n    [app],\r\n    app => app.initialized\r\n)\r\n","import styled from \"styled-components\";\r\nimport {Menu} from \"antd\";\r\nimport Sider from \"antd/es/layout/Sider\";\r\n\r\nexport const MenuWrapper = styled(Menu)`\r\n  padding-top: 15px;\r\n  height: 100%;\r\n  border-radius: 2px;\r\n`\r\n\r\nexport const SidebarWrapper = styled(Sider)`\r\n  border-radius: 2px;\r\n`","import React from 'react';\r\nimport {Menu} from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n    ExceptionOutlined,\r\n    HeartOutlined,\r\n    HomeOutlined,\r\n    InfoCircleOutlined,\r\n    MessageOutlined,\r\n    UserOutlined, WechatOutlined\r\n} from \"@ant-design/icons\";\r\nimport {MenuWrapper, SidebarWrapper} from './AppSidebar.styled';\r\n\r\nconst AppSidebar = () => {\r\n    return (\r\n        <SidebarWrapper width={190}>\r\n            <MenuWrapper mode=\"inline\">\r\n                <Menu.Item key=\"1\">\r\n                    <Link to=\"/profile\">\r\n                        <HomeOutlined/>\r\n                        Моя страница\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\">\r\n                    <Link to=\"/friends\">\r\n                        <HeartOutlined/>\r\n                        Мои друзья\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\">\r\n                    <Link to=\"/news\">\r\n                        <ExceptionOutlined/>\r\n                        Новоости\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\">\r\n                    <Link to=\"/users\">\r\n                        <UserOutlined/>\r\n                        Пользователи\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\">\r\n                    <Link to=\"/dialogs\">\r\n                        <MessageOutlined/>\r\n                        Мессенджер\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"6\">\r\n                    <Link to=\"/commonChat\">\r\n                        <WechatOutlined />\r\n                        Общий чат\r\n                    </Link>\r\n                </Menu.Item>\r\n                <Menu.Divider/>\r\n                <Menu.Item key=\"7\">\r\n                    <Link to=\"/info\">\r\n                        <InfoCircleOutlined />\r\n                        Информация\r\n                    </Link>\r\n                </Menu.Item>\r\n            </MenuWrapper>\r\n        </SidebarWrapper>\r\n    );\r\n}\r\n\r\nexport default AppSidebar;","import styled from \"styled-components\";\r\nimport {Row} from \"antd\";\r\n\r\nexport const LoginFormWrapper = styled(Row)`\r\n  width: 200px;\r\n`\r\n\r\nexport const LoginFormField = styled(Row)`\r\n  padding-bottom: 15px;\r\n`","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../FormsControls/FormsControls.module.css\";\r\nimport {createField, GetStringKeys, InputField} from \"../FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {LoginFormOwnProps, LoginFormValuesType} from \"../../../pages/LoginPage/LoginPage\";\r\nimport {Button} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {LoginFormField, LoginFormWrapper } from \"./LoginForm.styled\";\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nexport const LoginForm: FC<InjectedFormProps<LoginFormValuesType & LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <LoginFormWrapper>\r\n                    <LoginFormField>\r\n                        {createField<LoginFormValuesTypeKeys>(\r\n                            \"Email\",\r\n                            \"email\",\r\n                            [required], InputField)\r\n                        }\r\n                    </LoginFormField>\r\n                    <LoginFormField>\r\n                        {createField<LoginFormValuesTypeKeys>(\r\n                            \"Пароль\",\r\n                            \"password\",\r\n                            [required],\r\n                            InputField,\r\n                            {type: \"password\"})}\r\n                    </LoginFormField>\r\n                    Запомнить меня &nbsp;\r\n                    <LoginFormField>\r\n                            {createField<LoginFormValuesTypeKeys>(\r\n                                undefined,\r\n                                \"rememberMe\",\r\n                                [],\r\n                                InputField,\r\n                                {type: \"checkbox\"},\r\n                                \"\")}\r\n                    </LoginFormField>\r\n                </LoginFormWrapper>\r\n\r\n                {error &&\r\n                <div className={style.formSummeryError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n\r\n                <div>\r\n                    <Button htmlType=\"submit\">Войти</Button>\r\n                    <NavLink to={'/signup'}><Button type=\"link\">Создать аккаунт</Button></NavLink>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);","import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n};","import {ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean,\r\n    avatar: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean, avatar: string | null) => ({\r\n        type: 'SN/AUTH/SET_USER_DATA', payload:\r\n            {userId, email, login, isAuth, avatar}\r\n    } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let myAvatar = await profileAPI.getProfile(meData.data.id);\r\n        const avatar = myAvatar.photos.small;\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true, avatar));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        await dispatch(getAuthUserData());\r\n    } else {\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false, null));\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import React, {FC} from \"react\";\r\nimport LoginForm from \"../../components/forms/LoginForm/LoginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {LoginOutlined} from \"@ant-design/icons\";\r\nimport {selectIsAuth} from \"../../selectors/auth-selectors\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LoginFormHeader = styled.h1`\r\n  padding-bottom: 8px;\r\n`\r\nexport type LoginFormOwnProps = {}\r\nexport type LoginFormValuesType = {\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\n\r\nexport const LoginPage: FC = () => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <LoginFormHeader>Войти в аккаунт &nbsp; &nbsp;<LoginOutlined /></LoginFormHeader>\r\n            <LoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}","import styled from \"styled-components\";\r\nimport {Col, Row} from \"antd\";\r\n\r\nexport const SignUpFormWrapper = styled(Col)`\r\n  padding-right: 30px;\r\n`\r\n\r\nexport const SignUpFormElement = styled(Row)`\r\n  padding-bottom: 15px;\r\n`\r\n","import React, {FC} from \"react\";\r\nimport {Button, Col, DatePicker, Input, Radio, Row} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {EyeInvisibleOutlined, EyeTwoTone} from \"@ant-design/icons\";\r\nimport {SignUpFormElement, SignUpFormWrapper } from \"./SignUpForm.styled\";\r\n\r\ntype PropsType = {}\r\n\r\nconst dateFormat = 'YYYY/MM/DD';\r\n\r\nexport const SignUpForm: FC<PropsType> = () => {\r\n    return (\r\n        <form>\r\n            <Row>\r\n                <SignUpFormWrapper>\r\n                    <SignUpFormElement>\r\n                        <Input placeholder={'Email'}/>\r\n                    </SignUpFormElement>\r\n                    <SignUpFormElement>\r\n                        <Input.Password\r\n                            placeholder=\"Пароль\"\r\n                            iconRender={visible => (visible ? <EyeTwoTone/> : <EyeInvisibleOutlined/>)}\r\n                        />\r\n                    </SignUpFormElement>\r\n                    <SignUpFormElement>\r\n                        <Input.Password\r\n                            placeholder=\"Повторите пароль\"\r\n                            iconRender={visible => (visible ? <EyeTwoTone/> : <EyeInvisibleOutlined/>)}\r\n                        />\r\n                    </SignUpFormElement>\r\n                    <SignUpFormElement>\r\n                        <Input placeholder={'Имя'}/>\r\n                    </SignUpFormElement>\r\n                    <SignUpFormElement>\r\n                        <Input placeholder={'Фамилия'}/>\r\n                    </SignUpFormElement>\r\n                </SignUpFormWrapper>\r\n                <Col>\r\n                    <SignUpFormElement style={{width: 220}}>\r\n                        <Input placeholder={'Номер телефона'}/>\r\n                    </SignUpFormElement>\r\n                    <Row style={{paddingBottom: 23}}>\r\n                        <Row style={{paddingRight: 10, paddingTop: 6}}>Дата рождения :</Row>\r\n                        <DatePicker placeholder={'Выберите дату'} format={dateFormat}/>\r\n                    </Row>\r\n                    <SignUpFormElement>\r\n                        <Row style={{paddingRight: 30}}>Пол :</Row>\r\n                        <Radio.Group>\r\n                            <Radio value={1} style={{paddingRight: 20}}>Мужской</Radio>\r\n                            <Radio value={2}>Женский</Radio>\r\n                        </Radio.Group>\r\n                    </SignUpFormElement>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Button>Создать аккаунт</Button>\r\n                <NavLink to={'/login'}><Button type=\"link\">Уже есть аккаунт</Button></NavLink>\r\n            </Row>\r\n        </form>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {UserAddOutlined} from \"@ant-design/icons\";\r\nimport {SignUpForm} from \"../../components/forms/SignUpForm/SignUpForm\";\r\nimport styled from \"styled-components\";\r\nimport {selectIsAuth} from \"../../selectors/auth-selectors\";\r\n\r\nexport const SignUpHeader = styled.h1`\r\n  padding-bottom: 8px;\r\n`\r\n\r\nexport const SignUpPage: FC = () => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Создать аккаунт &nbsp; &nbsp;<UserAddOutlined /></h1>\r\n            <SignUpForm/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\nexport default withSuspense;","import React from 'react';\r\nimport ErrorSadPic from '../../assets/images/sad.svg'\r\n\r\nconst ErrorPage = () => {\r\n    return (\r\n        <div>\r\n            <h2>\r\n                404 NOT FOUND\r\n            </h2>\r\n            <img style={{width: '40px'}}\r\n                 src={ErrorSadPic}\r\n                 alt='404 Error picture'\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorPage;","import styled from \"styled-components\";\r\nimport Item from \"antd/es/list/Item\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Col, Row} from \"antd\";\r\n\r\nexport const UserItem = styled(Item)`\r\n  background-color: #f0f2f5;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.12);\r\n  margin-top: 15px;\r\n  border-radius: 2px;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    background-color: #d4d7de;\r\n  }\r\n`\r\n\r\nexport const CountryFlagIcon = styled.img`\r\n  width: 15px;\r\n`\r\n\r\nexport const UserNameLink = styled(NavLink)`\r\n  color: black;\r\n  &:hover {\r\n    color: gray;\r\n  }\r\n`\r\n\r\nexport const UserListContent = styled(Col)`\r\n  padding-left: 30px;\r\n`\r\n\r\nexport const UserCountry = styled.div`\r\n  padding-top: 5px;\r\n`\r\n\r\nexport const UserItemRow = styled(Row)`\r\n  padding: 0 10px 0 10px;\r\n`\r\n\r\nexport const UserStatus = styled.p`\r\n  margin: 0;\r\n  padding: 0;\r\n  color: gray;\r\n  font-size: 13px;\r\n  word-wrap: break-word,;\r\n  width: 600px;\r\n`","import React, {FC} from \"react\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Avatar, Button, Col} from \"antd\";\r\nimport {UserAddOutlined, UserDeleteOutlined} from \"@ant-design/icons\";\r\nimport {\r\n    CountryFlagIcon,\r\n    UserCountry,\r\n    UserItem,\r\n    UserItemRow,\r\n    UserListContent,\r\n    UserNameLink,\r\n    UserStatus\r\n} from \"./User.styled\";\r\nimport BelarusFlag from \"../../assets/images/belarus.svg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <UserItem>\r\n            <UserItemRow>\r\n                <Col>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <Avatar\r\n                            src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                            size={{xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 80}}\r\n                        />\r\n                    </NavLink>\r\n                </Col>\r\n                <UserListContent>\r\n                    <UserNameLink to={'/profile/' + user.id}>\r\n                        <span>{user.name}</span>\r\n                    </UserNameLink>\r\n                    <UserStatus>\r\n                        {user.status ? user.status : ' '}\r\n                    </UserStatus>\r\n                    <UserCountry>\r\n                        <CountryFlagIcon\r\n                            src={BelarusFlag}\r\n                            alt={'Country flag'}/> Беларусь\r\n                    </UserCountry>\r\n                </UserListContent>\r\n                <Col>\r\n                    {user.followed\r\n                        ? <Button disabled={followingInProgress\r\n                            .some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      unfollow(user.id);\r\n                                  }}>\r\n                            <UserDeleteOutlined/></Button>\r\n\r\n                        : <Button disabled={followingInProgress\r\n                            .some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      follow(user.id)\r\n                                  }}>\r\n                            <UserAddOutlined/></Button>\r\n                    }\r\n                </Col>\r\n            </UserItemRow>\r\n        </UserItem>\r\n    )\r\n}\r\n\r\nexport default User;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"../redux/store/redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import styled from \"styled-components\";\r\nimport {Input, Select} from \"formik-antd\";\r\n\r\nexport const SearchUserInput = styled(Input)`\r\n  width: 200px;\r\n`\r\n\r\nexport const SearchTermSelect = styled(Select)`\r\n  width: 160px;\r\n`\r\n","import {Form, Formik} from \"formik\";\r\nimport React, {FC} from \"react\";\r\nimport {FilterType} from \"../../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../../selectors/users-selectors\";\r\nimport Button from \"antd/lib/button\";\r\nimport {Select} from \"formik-antd\";\r\nimport {SearchOutlined} from \"@ant-design/icons\";\r\nimport {SearchTermSelect, SearchUserInput } from \"./UsersSearchForm.styled\";\r\n\r\nconst usersSearchFormValidate = () => {\r\n    return {};\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n\r\n        const filter = useSelector(getUsersFilter)\r\n        const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === \"null\" ? null : values.friend === \"true\"\r\n            }\r\n            onFilterChanged(filter)\r\n            setSubmitting(false)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                    validate={usersSearchFormValidate}\r\n                    onSubmit={submit}\r\n                >\r\n                    {({isSubmitting}) => (\r\n                        <Form>\r\n                            <SearchUserInput name=\"term\"/>\r\n\r\n                            <Button htmlType=\"submit\" disabled={isSubmitting}>\r\n                                <SearchOutlined />\r\n                            </Button>\r\n\r\n                            <SearchTermSelect name=\"friend\">\r\n                                <Select.Option value=\"null\">Все</Select.Option>\r\n                                <Select.Option value=\"true\">Только друзья</Select.Option>\r\n                                <Select.Option value=\"false\">Все кроме друзей</Select.Option>\r\n                            </SearchTermSelect>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n)","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {APIResponseType, ResultCodesEnum} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./store/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true as boolean,\r\n    followingInProgress: [] as Array<number>,    // array of user id`s\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state, users: action.users}\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.count}\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER':\r\n            return {...state, filter: action.payload}\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SN/USERS/SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: 'SN/USERS/SET_FILTER',\r\n        payload: filter\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number,\r\n                             filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    }\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsType) => {\r\n\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.userFollow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n\r\nexport const unfollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.userUnfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>","import styled from \"styled-components\";\r\nimport {Pagination} from \"antd\";\r\n\r\nexport const UsersPageWrapper = styled.div`\r\n  width: 100%;\r\n`\r\n\r\nexport const UserList = styled.div`\r\n  border-radius: 2px;\r\n  margin-bottom: 10px;\r\n`\r\n\r\nexport const PaginatorWrapper = styled(Pagination)`\r\n  padding-top: 10px;\r\n`","import React, {FC, useEffect} from \"react\";\r\nimport User from \"../../components/Users/User\";\r\nimport {UsersSearchForm} from \"../../components/forms/UsersSearchForm/UsersSearchForm\";\r\nimport {FilterType, follow, requestUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../selectors/users-selectors\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\nimport Preloader from \"../../components/common/Preloader/Preloader\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {List} from \"antd\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {PaginatorWrapper, UserList, UsersPageWrapper } from \"./UsersPage.styles\";\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\n\r\nconst UsersPage: FC<PropsType> = () => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    }\r\n\r\n    const userFollow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const userUnfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    if (!users) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <UsersPageWrapper>\r\n            <h2><UserOutlined/> Пользователи ({totalUsersCount})</h2>\r\n\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n            <PaginatorWrapper\r\n                pageSize={pageSize}\r\n                current={currentPage}\r\n                total={totalUsersCount}\r\n                onChange={onPageChanged}\r\n                showSizeChanger={false}\r\n            />\r\n\r\n            <UserList>\r\n                    {users.map(u => <User\r\n                        user={u}\r\n                        key={u.id}\r\n                        followingInProgress={followingInProgress}\r\n                        unfollow={userUnfollow}\r\n                        follow={userFollow}\r\n                    />)}\r\n            </UserList>\r\n\r\n            <PaginatorWrapper\r\n                pageSize={pageSize}\r\n                current={currentPage}\r\n                total={totalUsersCount}\r\n                onChange={onPageChanged}\r\n                showSizeChanger={false}\r\n            />\r\n\r\n        </UsersPageWrapper>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(UsersPage);","import styled from \"styled-components\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\n\r\nexport const BackTopStyled = styled.div`\r\n  height: 40px;\r\n  width: 40px;\r\n  line-height: 40px;\r\n  border-radius: 2px;\r\n  background-color: #1088e9;\r\n  color: #fff;\r\n  text-align: center;\r\n  font-size: 14px\r\n`\r\nexport const AppContentWrapper = styled(Content)`\r\n  border-radius: 2px;\r\n  margin: 0 0 0 50px;\r\n  padding: 30px;\r\n  min-height: 300px;\r\n  display: flex;\r\n  background-color: white\r\n`","import React from 'react';\r\nimport {Col} from \"antd\";\r\n\r\nconst DialogsChat = () => {\r\n    return (\r\n        <Col style={{paddingLeft: 20,height: '400px', overflowY: 'auto'}}>\r\n            <div>\r\ndgf\r\n            </div>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default DialogsChat;","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\n\r\nconst dialogs = (state: AppStateType) => state.dialogs\r\n\r\nexport const selectDialogs = createSelector(\r\n    [dialogs],\r\n    dialogs => dialogs.dialogs\r\n)","import styled from \"styled-components\";\r\nimport {Col, Row} from \"antd\";\r\n\r\nexport const DialogDate = styled.p`\r\n  margin: 0;\r\n  padding: 0;\r\n  color: gray;\r\n  font-size: 13px;\r\n`\r\n\r\nexport const DialogItemInfo = styled(Col)`\r\n  padding-left: 20px;\r\n`\r\n\r\nexport const DialogItem = styled(Row)`\r\n  \r\n  width: 300px;\r\n  padding: 10px;\r\n  transition: 0.3s;\r\n  &:hover {\r\n    opacity: 1;\r\n    background-color: #ebedee;\r\n  }\r\n`\r\n\r\nexport const DialogItemRight = styled(Col)`\r\n  font-size: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nexport const NewMessagesCount = styled.span`\r\n  color: gray;\r\n`","import {Avatar, Col} from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {CloseCircleOutlined} from \"@ant-design/icons\";\r\nimport {\r\n    DialogDate,\r\n    DialogItem, DialogItemInfo, DialogItemRight, NewMessagesCount\r\n} from './Dialog.styled';\r\n\r\ntype PropsType = {\r\n    hasNewMessage: boolean\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photo: string | null\r\n    userName: string\r\n}\r\n\r\nconst Dialog: FC<PropsType> = ({photo, userName, lastUserActivityDate, newMessagesCount}) => {\r\n    const formattedDate = lastUserActivityDate.substr(5, 5).split('-').join('.') + ' в '\r\n        + lastUserActivityDate.substr(11, 5)\r\n\r\n    return (\r\n        <DialogItem>\r\n            <Col>\r\n                <Avatar size={'large'} src={photo}/>\r\n            </Col>\r\n            <DialogItemInfo>\r\n                <span>{userName}</span>\r\n                <DialogDate>{formattedDate}</DialogDate>\r\n            </DialogItemInfo>\r\n            <DialogItemRight>\r\n                <NewMessagesCount>{newMessagesCount} </NewMessagesCount>\r\n                <CloseCircleOutlined onClick={() => {\r\n                }}/>\r\n            </DialogItemRight>\r\n        </DialogItem>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import styled from \"styled-components\";\r\nimport {Col, List} from \"antd\";\r\n\r\nexport const DialogsListCol = styled(Col)`\r\n  padding-right: 15px;\r\n  border-right: 1px #ebedee solid;\r\n`\r\n\r\nexport const DialogsList = styled(List)`\r\n  width: 300px;\r\n`","import React, {FC, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectDialogs} from \"../../../selectors/dialogs-selectors\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport Dialog from \"../Dialog/Dialog\";\r\nimport {DialogsList, DialogsListCol} from \"./Dialogs.styled\";\r\n\r\nconst Dialogs: FC = () => {\r\n    const dialogs = useSelector(selectDialogs);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <DialogsListCol>\r\n            <DialogsList>\r\n                {dialogs.map(d => <Dialog\r\n                    key={d.id}\r\n                    userName={d.userName}\r\n                    lastUserActivityDate={d.lastUserActivityDate}\r\n                    newMessagesCount={d.newMessagesCount}\r\n                    photo={d.photos.small}\r\n                    hasNewMessage={d.hasNewMessage}\r\n                />)}\r\n            </DialogsList>\r\n        </DialogsListCol>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {Col, Row} from \"antd\"\r\nimport React, {FC} from \"react\"\r\nimport {MessageOutlined} from \"@ant-design/icons\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport DialogsChat from \"../../components/Dialogs/DialogsChat/DialogsChat\";\r\nimport Dialogs from \"../../components/Dialogs/Dialogs/Dialogs\";\r\n\r\nconst DialogsPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <h2><MessageOutlined/> Мессенджер</h2>\r\n            <Row>\r\n                <Dialogs/>\r\n                <DialogsChat/>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default withAuthRedirect(DialogsPage);","import React, {FC} from 'react';\r\nimport {Redirect, Route, RouteComponentProps, Switch, withRouter} from \"react-router-dom\";\r\nimport {LoginPage} from \"../../pages/LoginPage/LoginPage\";\r\nimport {SignUpPage} from \"../../pages/SignUpPage/SignUpPage\";\r\nimport {BackTop} from \"antd\";\r\nimport withSuspense from \"../../hoc/withSuspense\";\r\nimport {UpOutlined} from \"@ant-design/icons\";\r\nimport ErrorPage from \"../../pages/ErrorPage/ErrorPage\";\r\nimport UsersPage from '../../pages/UsersPage/UsersPage';\r\nimport { AppContentWrapper, BackTopStyled } from './AppContent.styled';\r\nimport DialogsPage from \"../../pages/DialogsPage/DialogsPage\";\r\n\r\nconst ProfilePage = React.lazy(() => import('../../pages/ProfilePage/ProfilePage'))\r\nconst NewsPage = React.lazy(() => import('../../pages/NewsPage/NewsPage'))\r\nconst FriendsPage = React.lazy(() => import('../../pages/FriendsPage/FriendsPage'))\r\nconst InfoPage = React.lazy(() => import('../../pages/InfoPage/InfoPage'))\r\nconst CommonChatPage = React.lazy(() => import('../../pages/CommonChatPage/CommonChatPage'))\r\n\r\nconst SuspendedProfilePage = withSuspense(ProfilePage)\r\nconst SuspendedNewsPage = withSuspense(NewsPage)\r\nconst SuspendedFriendsPage = withSuspense(FriendsPage)\r\nconst SuspendedInfoPage = withSuspense(InfoPage)\r\nconst SuspendedCommonChatPage = withSuspense(CommonChatPage)\r\n\r\nconst AppContent: FC<PropsType> = () => {\r\n    return (\r\n        <AppContentWrapper>\r\n            <Switch>\r\n                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                <Route path='/profile/:userId?' render={() => <SuspendedProfilePage/>}/>\r\n                <Route path='/news' render={() => <SuspendedNewsPage/>}/>\r\n                <Route path='/users' render={() => <UsersPage/>}/>\r\n                <Route path='/friends' render={() => <SuspendedFriendsPage/>}/>\r\n                <Route path='/login' render={() => <LoginPage/>}/>\r\n                <Route path='/signup' render={() => <SignUpPage/>}/>\r\n                <Route path='/dialogs' render={() => <DialogsPage/>}/>\r\n                <Route path='/commonChat' render={() => <SuspendedCommonChatPage/>}/>\r\n                <Route path='/info' render={() => <SuspendedInfoPage/>}/>\r\n                <Route path='*' render={() => <ErrorPage/>}/>\r\n            </Switch>\r\n            <BackTop>\r\n                <BackTopStyled>\r\n                    <UpOutlined/>\r\n                </BackTopStyled>\r\n            </BackTop>\r\n        </AppContentWrapper>\r\n    );\r\n}\r\n\r\ntype PropsType = RouteComponentProps & {}\r\n\r\nexport default withRouter(AppContent);","import styled from \"styled-components\";\r\nimport {Header} from \"antd/es/layout/layout\";\r\nimport {Col} from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const HeaderWrapper = styled(Header)`\r\n  background-color: #979ea9;\r\n  border-bottom: #bac2ce;\r\n`\r\nexport const HeaderLogo = styled.img`\r\n  width: 40px;\r\n`\r\n\r\nexport const HeaderLogoWrapper = styled(Col)`\r\n  padding-left: 120px;\r\n`\r\n\r\nexport const HeaderUserAvatarLink = styled(Link)`\r\n  padding-right: 30px;\r\n`\r\n\r\nexport const HeaderUserEmail = styled.span`\r\n  padding-left: 63px;\r\n`\r\n\r\n\r\nexport const HeaderLogoLink = styled(Link)`\r\n  color: black;\r\n\r\n  &:hover {\r\n    color: #414141;\r\n    text-decoration: underline;\r\n  }\r\n`\r\n","import React from 'react';\r\nimport {Avatar, Button, Col, Row} from \"antd\";\r\nimport Logo from \"../../assets/images/logo.svg\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectAuthorizedUserAvatar, selectAuthorizedUserEmail, selectIsAuth} from \"../../selectors/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {\r\n    HeaderLogo,\r\n    HeaderLogoLink,\r\n    HeaderLogoWrapper,\r\n    HeaderUserAvatarLink,\r\n    HeaderUserEmail,\r\n    HeaderWrapper} from './AppHeader.styled';\r\n\r\nconst AppHeader = () => {\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const authorizedUserEmail = useSelector(selectAuthorizedUserEmail)\r\n    const authorizedUserAvatar = useSelector(selectAuthorizedUserAvatar)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <HeaderWrapper>\r\n            <Row>\r\n                <HeaderLogoWrapper flex=\"1 1 50px\">\r\n                    <HeaderLogo src={Logo} alt='App logo'/>\r\n                    <HeaderLogoLink to='/profile'>\r\n                        <HeaderUserEmail>{authorizedUserEmail} </HeaderUserEmail>\r\n                    </HeaderLogoLink>\r\n                </HeaderLogoWrapper>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col flex=\"0 1 190px\">\r\n                            <HeaderUserAvatarLink to=\"/profile\">\r\n                                <Avatar src={authorizedUserAvatar} size={\"large\"}/>\r\n                            </HeaderUserAvatarLink>\r\n                            <Button onClick={logoutCallback}>\r\n                                Выйти\r\n                            </Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col flex=\"0 1 120px\">\r\n                        <Button>\r\n                            <Link to={'/login'}>\r\n                                Войти\r\n                            </Link>\r\n                        </Button>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        </HeaderWrapper>\r\n    );\r\n}\r\n\r\nexport default AppHeader;","import styled from \"styled-components\";\r\nimport {Layout} from \"antd\";\r\n\r\nexport const MainFrameWrapper = styled(Layout)`\r\n  margin: 0 auto;\r\n  min-width: 1100px;\r\n  padding: 30px 0 0 0;\r\n`\r\n\r\nexport const GlobalPreloader = styled.div`\r\n  padding-left: 45%;\r\n  padding-top: 300px;\r\n`","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsTypes} from \"./store/redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state=  initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<any, AppStateType, unknown, ActionsType>\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n};\r\n\r\nexport default appReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import React, {FC, useEffect} from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {Layout} from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport AppFooter from \"../AppFooter/AppFooter\";\r\nimport {selectInitialized} from \"../../selectors/app-selectors\";\r\nimport AppSidebar from \"../AppSidebar/AppSidebar\";\r\nimport AppContent from \"../AppContent/AppContent\";\r\nimport AppHeader from \"../AppHeader/AppHeader\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {GlobalPreloader, MainFrameWrapper} from './App.styled';\r\nimport {initializeApp} from \"../../redux/app-reducer\";\r\n\r\nexport const App: FC<PropsType> = () => {\r\n    const initialized = useSelector(selectInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    if (!initialized) {\r\n        return <GlobalPreloader><Preloader/></GlobalPreloader>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <Layout>\r\n            <AppHeader/>\r\n            <MainFrameWrapper>\r\n                <AppSidebar/>\r\n                <AppContent/>\r\n            </MainFrameWrapper>\r\n            <AppFooter/>\r\n        </Layout>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {}\r\n\r\nexport default App;","import {NewsType} from \"../types/types\";\r\nimport {InferActionsTypes} from \"./store/redux-store\";\r\n\r\nlet initialState: NewsType = {\r\n    news: [\r\n        {\r\n            title: 'Обновлен дизайн приложения',\r\n            imageUrl: 'https://sun9-69.userapi.com/impg/AxxeCAiyethb_wtRT_Mb5kKtcZzP03r3M4zGuA/7RUUWX60C9k.jpg?size=1654x920&quality=96&sign=63d3c45b9b712da473f1163dc399557a&type=album',\r\n            summary: 'Была обнвлена страница профиля пользователя приложения, список пользователей, список друзей. Также ' +\r\n                'убраны баги связанные с профилем пользователя и списком друзей. На страницу профиля добавлено поле количества друзей ' +\r\n                'пользователя, исправлена работа лайков постов пользователя.',\r\n            publishedAt: '04-06-2021'\r\n        },\r\n        {\r\n            title: 'Добавлен поиск пользователей и пагинация',\r\n            imageUrl: 'https://sun9-36.userapi.com/impg/2vy2rXeYUR5uk6OsDvQNmSTknBXX0wKANjXVFA/wnNNnA_QZus.jpg?size=625x603&quality=96&sign=fa931ca45802a1ac04b2c0771bb6b496&type=album',\r\n            summary: 'В раздел \"Пользователи\" было добавлено текстовое поле для поиска пользователей по имени и/или фамилии. ' +\r\n                'Помимо текстового поля был добавлен раскрывающийся список с фильтрами поиска, такими как: поиск по друзьям, поиск всех пользователей' +\r\n                ', а также поиск пользователей, которых нет у вас в друзьях.',\r\n            publishedAt: '21-03-2021'\r\n        },\r\n        {\r\n            title: 'Добавлен раздел \"Мои друзья\"',\r\n            imageUrl: 'https://sun9-34.userapi.com/impg/AND3E6RAo3VSnpSB6H1bItI0rQyaDpFUDPdqqA/kvs3rbDenZk.jpg?size=1093x786&quality=96&sign=269ee2ce00b189f82f74706be94f6d14&type=album',\r\n            summary: 'Создан раздел \"Мои друзья\" со списком добавленных пользователем друзей. Также разработана строка для поиска ' +\r\n                'друзей по имени и/или фамилии.',\r\n            publishedAt: '04-04-2021'\r\n        },\r\n        {\r\n            title: 'Добавлена возможность создавать посты',\r\n            imageUrl: 'https://sun9-73.userapi.com/impg/xc9OitnHM3R2DYw6iqABWnjR3wDxv64bpkKaRA/bjunwNdyJC0.jpg?size=932x594&quality=96&sign=83d78f786cf9387b809f1c2bc8ef2545&type=album',\r\n            summary: 'Добавлена возможность создавать посты на собственных страницах профиля. Также имеется возможность ' +\r\n                '\"лайкать\" созданные посты.',\r\n            publishedAt: '25-02-2021'\r\n        }\r\n    ]\r\n}\r\n\r\nconst newsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setNews: (data: Array<any>) => ({type: 'SN/NEWS/FIND_CITY', data} as const),\r\n}\r\n\r\nexport default newsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"../profile-reducer\";\r\nimport dialogsReducer from \"../dialogs-reducer\";\r\nimport usersReducer from \"../users-reducer\";\r\nimport authReducer from \"../auth-reducer\";\r\nimport appReducer from \"../app-reducer\";\r\nimport chatReducer from \"../chat-reducer\";\r\nimport newsReducer from \"../news-reducer\";\r\nimport friendsReducer from \"../friends-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    profilePage: profileReducer,\r\n    friendsPage: friendsReducer,\r\n    newsPage: newsReducer,\r\n    usersPage: usersReducer,\r\n    dialogs: dialogsReducer,\r\n    chat: chatReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;  // (globalState: GLOBALSTATE) => GLOBALSTATE\r\nexport type AppStateType = ReturnType<RootReducerType> // Type that return RootReducerType\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store","import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const Global = createGlobalStyle`\r\n  * {\r\n    box-sizing: content-box;\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    scrollbar-width: thin;       \r\n    scrollbar-color: #a3cfff #dadcdf;\r\n  }\r\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App/App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store/redux-store\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Global} from \"./Global.styled\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <Global/>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root'));","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\n\r\nconst auth = (state: AppStateType) => state.auth\r\n\r\nexport const selectIsAuth = createSelector(\r\n    [auth],\r\n    auth => auth.isAuth\r\n)\r\n\r\nexport const selectCurrentUserLogin = createSelector(\r\n    [auth],\r\n    auth => auth.login\r\n)\r\n\r\nexport const selectAuthorizedUserId = createSelector(\r\n    [auth],\r\n    auth => auth.userId\r\n)\r\n\r\nexport const selectAuthorizedUserAvatar = createSelector(\r\n    [auth],\r\n    auth => auth.avatar\r\n)\r\n\r\nexport const selectAuthorizedUserEmail = createSelector(\r\n    [auth],\r\n    auth => auth.email\r\n)","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n\r\n    savePhoto(photoFile: File) {\r\n        console.log(photoFile)\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n};","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    userFollow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    userUnfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n};"],"sourceRoot":""}