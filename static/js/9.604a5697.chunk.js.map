{"version":3,"sources":["selectors/chat-selectors.ts","components/forms/AddMessageForm/AddMessageForm.tsx","components/CommonChat/Messages/Message/Message.tsx","components/CommonChat/Messages/Messages.tsx","components/CommonChat/CommonChat.tsx","pages/CommonChatPage/CommonChatPage.tsx"],"names":["chat","state","selectChatStatus","createSelector","status","selectChatMessages","messages","AddMessageForm","useState","message","setMessage","dispatch","useDispatch","useSelector","style","padding","autoSize","width","height","onChange","e","currentTarget","value","disabled","onClick","sendMessage","SendOutlined","React","memo","borderBottom","alt","src","photo","userPhoto","borderRadius","paddingLeft","userName","Messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","overflowY","backgroundColor","border","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","key","id","ref","CommonChat","startMessagesListening","stopMessagesListening","marginLeft","withAuthRedirect","WechatOutlined"],"mappings":"gPAGMA,EAAO,SAACC,GAAD,OAAyBA,EAAMD,MAE/BE,EAAmBC,YAC5B,CAACH,IACD,SAAAA,GAAI,OAAIA,EAAKI,UAGJC,EAAqBF,YAC9B,CAACH,IACD,SAAAA,GAAI,OAAIA,EAAKM,YCyBFC,EA7BY,WAAO,IAAD,EACCC,mBAAS,IADV,mBACtBC,EADsB,KACbC,EADa,KAEvBC,EAAWC,cAEXR,EAASS,YAAYX,GAU3B,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKY,MAAO,CAACC,QAAS,eAClB,kBAAC,IAAD,CAAUC,UAAU,EAAMF,MAAO,CAACG,MAAO,IAAKC,OAAQ,IAAKC,SAAU,SAACC,GAAD,OAAOV,EAAWU,EAAEC,cAAcC,QAC7FA,MAAOb,KAIrB,kBAAC,IAAD,CAAKK,MAAO,CAACC,QAAS,eAClB,kBAAC,IAAD,CAAQQ,SAAqB,UAAXnB,EAAoBoB,QAjBvB,WAClBf,IAGLE,EAASc,YAAYhB,IACrBC,EAAW,OAYgE,kBAACgB,EAAA,EAAD,U,kBCfpEC,MAAMC,MAZgC,SAAC,GAAe,IAAdnB,EAAa,EAAbA,QACnD,OACQ,yBAAKK,MAAO,CAACC,QAAS,GAAIc,aAAc,sBACpC,yBAAKC,IAAI,aAAaC,IAAuB,OAAlBtB,EAAQuB,MAAiBvB,EAAQuB,MAAQC,IAC/DnB,MAAO,CAACG,MAAO,OAAQiB,aAAc,MAC1C,uBAAGpB,MAAO,CAACG,MAAO,OAAQkB,YAAa,IAAK1B,EAAQ2B,UACpD,6BACC3B,EAAQA,YCwBV4B,EA9BM,WACjB,IAAM/B,EAAWO,YAAYR,GACvBiC,EAAoBC,iBAAuB,MAF1B,EAGiB/B,oBAAS,GAH1B,mBAGhBgC,EAHgB,KAGFC,EAHE,KAoBvB,OANAC,qBAAU,WACa,IAAD,EAAdF,IACA,UAAAF,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACvC,IAGA,yBAAKQ,MAAO,CAACI,OAAQ,QAASgB,aAAc,EAAGjB,MAAO,QAAS6B,UAAW,OAAQC,gBAAiB,UAAWC,OAAQ,qBAAsBC,SAhB1H,SAAC7B,GACnB,IAAM8B,EAAU9B,EAAEC,cACd8B,KAAKC,IAAKF,EAAQG,aAAeH,EAAQI,UAAaJ,EAAQK,cAAgB,KAC7Ef,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,KAY/BnC,EAASkD,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAASC,IAAKD,EAAEE,GAAIlD,QAASgD,OAClD,yBAAKG,IAAKtB,MCEPuB,EAvBQ,WAEnB,IAAMlD,EAAWC,cACXR,EAASS,YAAYX,GAS3B,OAPAwC,qBAAU,WAEN,OADA/B,EAASmD,eACF,WACHnD,EAASoD,kBAEd,IAGC,yBAAKjD,MAAO,CAACkD,WAAY,MACT,UAAX5D,GAAsB,6EACvB,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,S,SCTD6D,uBAVQ,WACnB,OACI,6BACI,4BAAI,kBAACC,EAAA,EAAD,MAAJ,sDACA,kBAAC,EAAD","file":"static/js/9.604a5697.chunk.js","sourcesContent":["import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\n\r\nconst chat = (state: AppStateType) => state.chat\r\n\r\nexport const selectChatStatus = createSelector(\r\n    [chat],\r\n    chat => chat.status\r\n)\r\n\r\nexport const selectChatMessages = createSelector(\r\n    [chat],\r\n    chat => chat.messages\r\n)","import React, {FC, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage} from \"../../../redux/chat-reducer\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport {SendOutlined} from \"@ant-design/icons\";\r\nimport {selectChatStatus} from \"../../../selectors/chat-selectors\";\r\n\r\nconst AddMessageForm: FC = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector(selectChatStatus)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col style={{padding: '20px 0 0 0'}}>\r\n                <TextArea autoSize={true} style={{width: 454, height: 30}} onChange={(e) => setMessage(e.currentTarget.value)}\r\n                          value={message}>\r\n\r\n                </TextArea>\r\n            </Col>\r\n            <Col style={{padding: '20px 0 0 0'}}>\r\n                <Button disabled={status !== 'ready'} onClick={sendMessageHandler}><SendOutlined /></Button>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default AddMessageForm;","import React, {FC} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../../../api/chat-api\";\r\nimport userPhoto from \"../../../../assets/images/user.png\";\r\n\r\nconst Message: FC<{ message: ChatMessageAPIType }> = ({message}) => {\r\n    return (\r\n            <div style={{padding: 10, borderBottom: '1px #dadcdf solid'}}>\r\n                <img alt='User photo' src={message.photo !== null ? message.photo : userPhoto}\r\n                     style={{width: '30px', borderRadius: 15}}/>\r\n                <b style={{width: '30px', paddingLeft: 7}}>{message.userName}</b>\r\n                <br/>\r\n                {message.message}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Message);","import React, {FC, useEffect, useRef, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Message from \"./Message/Message\";\r\nimport {selectChatMessages} from \"../../../selectors/chat-selectors\";\r\n\r\nconst Messages: FC = () => {\r\n    const messages = useSelector(selectChatMessages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{height: '500px', borderRadius: 2, width: '500px', overflowY: 'auto', backgroundColor: '#f0f2f5', border: '1px #dddede solid'}} onScroll={scrollHandler}>\r\n            {messages.map((m) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages","import React, {FC, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport AddMessageForm from \"../forms/AddMessageForm/AddMessageForm\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport {selectChatStatus} from \"../../selectors/chat-selectors\";\r\n\r\nconst CommonChat: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector(selectChatStatus)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{marginLeft: 150}}>\r\n            {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n            <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommonChat;\r\n","import React from 'react';\r\nimport {WechatOutlined} from \"@ant-design/icons\";\r\nimport CommonChat from \"../../components/CommonChat/CommonChat\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst CommonChatPage = () => {\r\n    return (\r\n        <div>\r\n            <h2><WechatOutlined/> Общий чат</h2>\r\n            <CommonChat/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default withAuthRedirect(CommonChatPage);"],"sourceRoot":""}