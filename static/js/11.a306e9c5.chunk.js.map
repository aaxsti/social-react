{"version":3,"sources":["selectors/friends-selectors.ts","components/forms/ProfileDataForm/ProfileDataForm.styled.ts","components/forms/ProfileDataForm/ProfileDataForm.tsx","selectors/profile-selectors.ts","components/Profile/Profile/ProfileInfo/ProfileAdditionalData/ProfileAdditionalData.styled.ts","components/Profile/Profile/ProfileInfo/ProfileAdditionalData/ProfileAdditionalData.tsx","components/Profile/Profile/ProfileInfo/ProfileStatus/ProfileStatus.styled.ts","components/Profile/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/Profile/ProfileInfo/ProfileInfo.styled.ts","components/Profile/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePosts/Post/Post.styled.ts","components/Profile/ProfilePosts/Post/Post.tsx","components/forms/AddNewPostForm/AddNewPostForm.tsx","components/Profile/ProfilePosts/ProfilePosts.styled.ts","components/Profile/ProfilePosts/ProfilePosts.tsx","pages/ProfilePage/ProfilePage.tsx"],"names":["selectUserFriends","createSelector","state","friendsPage","friends","selectUserFriendsAmount","length","FormElement","styled","div","ProfileDataFormWrapper","form","ProfileDataFormContacts","Col","ProfileDataFormHeader","h3","SaveFormButton","Button","maxLength150","maxLengthCreator","maxLength50","maxLength300","ProfileDataFormReduxForm","reduxForm","handleSubmit","profile","error","onSubmit","Object","keys","contacts","map","key","toUpperCase","substr","createField","InputField","Textarea","htmlType","SaveOutlined","profilePage","selectProfile","selectProfileStatus","status","selectProfilePosts","posts","selectProfileImage","photos","large","AdditionalDataDivider","Divider","AdditionalDataBlock","AboutMeElement","span","AdditionalDataHeaderWrapper","AdditionalDataContactsWrapper","AboutMeBlock","Contact","contactTitle","contactValue","href","lastIndexOf","ProfileAdditionalData","aboutMe","lookingForAJobDescription","StatusText","StatusInput","Input","ProfileStatus","props","useState","editMode","setEditMode","setStatus","dispatch","useDispatch","useEffect","onDoubleClick","isOwner","onChange","e","currentTarget","value","autoFocus","onBlur","toast","info","updateStatus","AvatarImage","Image","AvatarImageWrapperCol","UserName","PageHeader","MainInfoNameRow","Row","MainInfoRow","ProfileEditButton","FriendsAmountBlock","FriendsAmountLink","NavLink","MainProfileDataFields","MainProfileDataFieldValues","ProfileButtons","HiddenUploadInput","input","React","memo","userId","useSelector","friendsAmount","hiddenFileInput","useRef","requestFriends","src","noPhotoPic","title","fullName","subTitle","to","slice","icon","UploadOutlined","onClick","current","click","type","ref","target","files","savePhoto","startDialog","MessageOutlined","CloseOutlined","EditOutlined","initialValues","formData","saveProfile","Preloader","PostBlock","DeletePostButton","CloseCircleOutlined","PostInfo","PostDate","PostText","p","PostActionsBlock","message","likesCount","date","id","profileImage","months","localLikesCount","setLocalLikesCount","isLiked","setIsLiked","formattedDate","getDate","getMonth","toLocaleTimeString","size","xs","sm","md","lg","xl","xxl","HeartTwoTone","twoToneColor","actions","deletePost","AddPostButtonWrapper","maxLength400","required","StyledDivider","MyPostsHeader","MyPostsMemorized","postsElements","reverse","values","addPostActionCreator","newPostText","ProfilePageWrapper","ProfilePage","history","match","authorizedUserId","selectAuthorizedUserId","refreshProfile","useCallback","params","push","getUserProfile","getStatus","withAuthRedirect","withRouter"],"mappings":"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","file":"static/js/11.a306e9c5.chunk.js","sourcesContent":["import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\n\r\nconst friendsPage = (state: AppStateType) => state.friendsPage\r\n\r\nexport const selectUserFriends = createSelector(\r\n    [friendsPage],\r\n    friendsPage => friendsPage.friends\r\n)\r\n\r\nexport const selectUserFriendsAmount = createSelector(\r\n    [selectUserFriends],\r\n    selectUserFriends => selectUserFriends.length\r\n)\r\n","import styled from \"styled-components\";\r\nimport {Button, Col} from \"antd\";\r\n\r\nexport const FormElement = styled.div`\r\n  padding-top: 10px;\r\n  width: 300px;\r\n`\r\n\r\nexport const ProfileDataFormWrapper = styled.form`\r\n  border: 1px solid #e4e4e4;\r\n  border-radius: 2px;\r\n  padding: 10px;\r\n`\r\n\r\nexport const ProfileDataFormContacts = styled(Col)`\r\n  padding-right: 80px;\r\n`\r\n\r\nexport const ProfileDataFormHeader = styled.h3`\r\n  padding-top: 5px;\r\n`\r\n\r\nexport const SaveFormButton = styled(Button)`\r\n  margin-top: 30px;\r\n  margin-bottom: 30px;\r\n`","import React, {FC} from \"react\";\r\nimport {createField, GetStringKeys, InputField, Textarea} from \"../FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Col, Row} from \"antd\";\r\nimport {SaveOutlined} from \"@ant-design/icons\";\r\nimport {\r\n    FormElement,\r\n    ProfileDataFormContacts,\r\n    ProfileDataFormHeader,\r\n    ProfileDataFormWrapper,\r\n    SaveFormButton\r\n} from './ProfileDataForm.styled'\r\nimport {maxLengthCreator} from \"../../../utils/validators\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst maxLength150 = maxLengthCreator(150)\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst maxLength300 = maxLengthCreator(300)\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <ProfileDataFormWrapper onSubmit={handleSubmit}>\r\n                <Row>\r\n                    <ProfileDataFormContacts>\r\n                        <ProfileDataFormHeader>\r\n                            Контакты\r\n                        </ProfileDataFormHeader>\r\n                        <div>\r\n                            {Object.keys(profile.contacts).map(key => {\r\n                                return <FormElement key={key}>\r\n                                    <span>{key[0].toUpperCase() + key.substr(1)}\r\n                                        {createField(key, \"contacts.\" + key, [maxLength150], InputField)}\r\n                                    </span>\r\n                                </FormElement>\r\n                            })}\r\n                        </div>\r\n                    </ProfileDataFormContacts>\r\n\r\n                    <Col>\r\n                        <ProfileDataFormHeader>\r\n                            Персональная информация\r\n                        </ProfileDataFormHeader>\r\n\r\n                        <FormElement>\r\n                            <span>Никнейм</span>\r\n                            {createField<ProfileTypeKeys>(\"Никнейм...\", \"fullName\", [maxLength50], InputField)}\r\n                        </FormElement>\r\n                        {/*<div>*/}\r\n                        {/*    <b>Looking for a job</b>*/}\r\n                        {/*    {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}*/}\r\n                        {/*</div>*/}\r\n                        <FormElement>\r\n                            <span>Профессиональные навыки</span>\r\n                            {createField<ProfileTypeKeys>(\"Профессиональные навыки...\", \"lookingForAJobDescription\", [maxLength300], Textarea)}\r\n                        </FormElement>\r\n                        <FormElement>\r\n                            <span>О себе</span>\r\n                            {createField<ProfileTypeKeys>(\"О себе...\", \"aboutMe\", [maxLength300], Textarea)}\r\n                        </FormElement>\r\n\r\n                            <SaveFormButton htmlType={'submit'}><SaveOutlined/> Сохранить</SaveFormButton>\r\n\r\n                        {error &&\r\n                        <div>\r\n                            {error}\r\n                        </div>\r\n                        }\r\n\r\n                    </Col>\r\n                </Row>\r\n        </ProfileDataFormWrapper>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nconst profilePage = (state: AppStateType) => state.profilePage\r\n\r\nexport const selectProfile = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.profile\r\n)\r\n\r\nexport const selectProfileStatus = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.status\r\n)\r\n\r\nexport const selectProfilePosts = createSelector(\r\n    [profilePage],\r\n    profilePage => profilePage.posts\r\n)\r\n\r\nexport const selectProfileImage = createSelector(\r\n    [selectProfile],\r\n    selectProfile => selectProfile?.photos?.large\r\n)\r\n","import styled from \"styled-components\";\r\nimport {Divider} from \"antd\";\r\n\r\nexport const AdditionalDataDivider = styled(Divider)`\r\n  margin-bottom: 7px;\r\n  margin-top: 3px;\r\n`\r\n\r\nexport const AdditionalDataBlock = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport const AboutMeElement = styled.span`\r\n  font-size: 15px;\r\n  color: gray;\r\n`\r\n\r\nexport const AdditionalDataHeaderWrapper = styled.div`\r\n  border-bottom: 2px gray solid;\r\n`\r\n\r\nexport const AdditionalDataContactsWrapper = styled.div`\r\n  padding-top: 6px;\r\n`\r\n\r\nexport const AboutMeBlock = styled.div`\r\n  display: inline-block;\r\n  padding-right: 70px; \r\n  padding-top: 50px;\r\n  width: 500px;\r\n  float: right;\r\n`\r\n","import React, {FC} from \"react\";\r\nimport {Col, Row} from \"antd\";\r\nimport {ContactsType, ProfileType} from \"../../../../../types/types\";\r\nimport {\r\n    AboutMeBlock,\r\n    AboutMeElement,\r\n    AdditionalDataBlock,\r\n    AdditionalDataContactsWrapper,\r\n    AdditionalDataDivider,\r\n    AdditionalDataHeaderWrapper\r\n} from \"./ProfileAdditionalData.styled\";\r\n\r\ntype ProfileAdditionalDataPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileAdditionalData: FC<ProfileAdditionalDataPropsType> = ({profile}) => {\r\n    return (\r\n        <>\r\n            <AdditionalDataDivider/>\r\n            <AdditionalDataBlock>\r\n                <Row>\r\n                    <Col>\r\n                        <AdditionalDataHeaderWrapper>\r\n                            <h3>\r\n                                Дополнительная информация\r\n                            </h3>\r\n                        </AdditionalDataHeaderWrapper>\r\n                        <Row>\r\n                            <Col>\r\n                                <AdditionalDataContactsWrapper>\r\n                                    <h3>\r\n                                        Контакты\r\n                                    </h3>\r\n                                </AdditionalDataContactsWrapper>\r\n                            </Col>\r\n                        </Row>\r\n                        <div>\r\n                            {\r\n                                Object\r\n                                    .keys(profile.contacts)\r\n                                    .map((key) => {\r\n                                        return profile.contacts[key as keyof ContactsType] ?\r\n                                            <Contact key={key} contactTitle={key}\r\n                                                     contactValue={profile.contacts[key as keyof ContactsType]}/> : null\r\n                                    })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </AdditionalDataBlock>\r\n\r\n            <AboutMeBlock>\r\n\r\n                {/*<span>Ищу работу: </span>*/}\r\n                {/*<span>{profile.lookingForAJob ? \"Да\" : \"Нет\"}</span>*/}\r\n\r\n                {profile.aboutMe &&\r\n                <span>\r\n                    <AboutMeElement>\r\n                        О себе:&nbsp;\r\n                    </AboutMeElement>\r\n                    {profile.aboutMe}\r\n                </span>\r\n                }\r\n                <br/>\r\n                {profile.lookingForAJobDescription &&\r\n                <span>\r\n                    <AboutMeElement>\r\n                        Проф. навыки:&nbsp;\r\n                    </AboutMeElement>\r\n                    {profile.lookingForAJobDescription}\r\n                </span>\r\n                }\r\n            </AboutMeBlock>\r\n        </>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <Row>\r\n            <span>{contactTitle[0].toUpperCase() + contactTitle.substr(1)}: &nbsp;</span>\r\n            <a href={contactValue}>@{contactValue.substr(contactValue.lastIndexOf('/') + 1)}</a>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileAdditionalData;","import styled from \"styled-components\";\r\nimport {Input} from \"antd\";\r\n\r\nexport const StatusText = styled.div`\r\n  padding-top: 4px;\r\n  font-size: 16px;\r\n`\r\n\r\nexport const StatusInput = styled(Input)`\r\n  width: 276px;\r\n`","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatus} from \"../../../../../redux/profile-reducer\";\r\nimport {StatusInput, StatusText} from './ProfileStatus.styled';\r\nimport {toast} from \"react-toastify\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    isOwner?: boolean\r\n}\r\n\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [status, setStatus] = useState<string>(props.status);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        props.isOwner && setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        if (status.length > 50) {\r\n            toast.info('Статус слишком длинный')\r\n        } else {\r\n            setEditMode(false);\r\n            dispatch(updateStatus(status));\r\n        }\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <StatusText onDoubleClick={activateEditMode}>\r\n                {props.status || \"----\"}\r\n            </StatusText>\r\n            }\r\n            {editMode &&\r\n            <StatusInput\r\n                onChange={onStatusChange}\r\n                autoFocus={true}\r\n                onBlur={deactivateEditMode}\r\n                value={status}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import styled from \"styled-components\";\r\nimport {Col, Image, PageHeader, Row} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const AvatarImage = styled(Image)`\r\n  width: 200px;\r\n  max-width: 100%;\r\n  border-radius: 2px;\r\n`\r\nexport const AvatarImageWrapperCol = styled(Col)`\r\n  padding-right: 50px;\r\n`\r\nexport const UserName = styled(PageHeader)`\r\n  margin: 0;\r\n  padding: 2px 0 0 0;\r\n  border-bottom: 2px gray solid;\r\n`\r\nexport const MainInfoNameRow = styled(Row)`\r\n  color: gray;\r\n  font-size: 15px;\r\n`\r\nexport const MainInfoRow = styled(Row)`\r\n  color: #416a92;\r\n  font-size: 15px;\r\n`\r\n\r\nexport const ProfileEditButton = styled(Col)`\r\n  padding-left: 47px;\r\n`\r\n\r\nexport const FriendsAmountBlock = styled.div`\r\n  padding-top: 7px;\r\n  font-size: 15px;\r\n`\r\n\r\nexport const FriendsAmountLink = styled(NavLink)`\r\n  color: #06162a;\r\n`\r\n\r\nexport const MainProfileDataFields = styled.div`\r\n  padding-top: 9px;\r\n`\r\n\r\nexport const MainProfileDataFieldValues = styled.div`\r\n  padding-left: 15px;\r\n`\r\n\r\nexport const ProfileButtons = styled(Row)`\r\n  padding-top: 15px;\r\n`\r\n\r\nexport const HiddenUploadInput = styled.input`\r\n  display: none;\r\n`\r\n","import React, {ChangeEvent, FC, useEffect, useRef, useState} from 'react';\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport noPhotoPic from \"../../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"../../../forms/ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport {CloseOutlined, EditOutlined, MessageOutlined, UploadOutlined} from \"@ant-design/icons\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectProfileStatus} from \"../../../../selectors/profile-selectors\";\r\nimport {selectUserFriendsAmount} from \"../../../../selectors/friends-selectors\";\r\nimport {savePhoto, saveProfile} from \"../../../../redux/profile-reducer\";\r\nimport ProfileAdditionalData from \"./ProfileAdditionalData/ProfileAdditionalData\";\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport {\r\n    AvatarImage,\r\n    AvatarImageWrapperCol,\r\n    FriendsAmountBlock,\r\n    FriendsAmountLink,\r\n    HiddenUploadInput,\r\n    MainInfoNameRow,\r\n    MainInfoRow,\r\n    MainProfileDataFields,\r\n    MainProfileDataFieldValues,\r\n    ProfileButtons,\r\n    ProfileEditButton,\r\n    UserName\r\n} from './ProfileInfo.styled';\r\nimport {startDialog} from \"../../../../redux/dialogs-reducer\";\r\nimport {requestFriends} from \"../../../../redux/friends-reducer\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    userId: number\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({isOwner, profile, userId}) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const status = useSelector(selectProfileStatus)\r\n    const friendsAmount = useSelector(selectUserFriendsAmount)\r\n\r\n    const hiddenFileInput = useRef<HTMLInputElement>(null);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(requestFriends());\r\n    }, [dispatch])\r\n\r\n    const handleCreateDialog = () => {\r\n        dispatch(startDialog(userId))\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            dispatch(savePhoto(e.target.files[0]));\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        hiddenFileInput?.current?.click();\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfile(formData))\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <AvatarImageWrapperCol>\r\n                    <AvatarImage src={profile.photos.large || noPhotoPic}/>\r\n                </AvatarImageWrapperCol>\r\n                <Col>\r\n                    <UserName title={profile.fullName} subTitle={'Беларусь, Гомель'}/>\r\n                    <ProfileStatus status={status} isOwner={isOwner}/>\r\n                    <FriendsAmountBlock>\r\n                        {isOwner ?\r\n                            <FriendsAmountLink to={'/friends'}>\r\n                            <span>\r\n                                Друзей:&nbsp;\r\n                            </span>\r\n                                <span>\r\n                                {friendsAmount}\r\n                            </span>\r\n                            </FriendsAmountLink>\r\n                            : null\r\n                        }\r\n                    </FriendsAmountBlock>\r\n                    <MainProfileDataFields>\r\n                        <Row>\r\n                            <Col>\r\n                                <MainInfoNameRow>\r\n                                    Телефон:\r\n                                </MainInfoNameRow>\r\n                                <MainInfoNameRow>\r\n                                    Дата рождения:\r\n                                </MainInfoNameRow>\r\n                                <MainInfoNameRow>\r\n                                    О себе:\r\n                                </MainInfoNameRow>\r\n                            </Col>\r\n                            <MainProfileDataFieldValues>\r\n                                <MainInfoRow>\r\n                                    +375 (33) 355-29-71\r\n                                </MainInfoRow>\r\n                                <MainInfoRow>\r\n                                    21 июня 2000\r\n                                </MainInfoRow>\r\n                                <MainInfoRow>\r\n                                    {profile.aboutMe && profile.aboutMe.length >= 50\r\n                                        ? `${profile.aboutMe.slice(0, 50)}...` : profile.aboutMe}\r\n                                </MainInfoRow>\r\n                            </MainProfileDataFieldValues>\r\n                        </Row>\r\n                    </MainProfileDataFields>\r\n                </Col>\r\n            </Row>\r\n            <ProfileButtons>\r\n                <Col>\r\n                    {isOwner ?\r\n                        <>\r\n                            <Button icon={<UploadOutlined/>} onClick={handleClick}>\r\n                                Обновить фотографию\r\n                            </Button>\r\n                            <HiddenUploadInput type='file' ref={hiddenFileInput} onChange={onMainPhotoSelected}/>\r\n                        </>\r\n                        :\r\n                        <Button onClick={handleCreateDialog}>\r\n                            <NavLink to={'/dialogs'}>\r\n                                <MessageOutlined/> Написать сообщение\r\n                            </NavLink>\r\n                        </Button>\r\n                    }\r\n                </Col>\r\n                <ProfileEditButton>\r\n                    {isOwner ?\r\n                        <Row>\r\n                            <Button\r\n                                onClick={\r\n                                    () => {\r\n                                        editMode ? setEditMode(false) : setEditMode(true)\r\n                                    }\r\n                                }>\r\n                                {editMode\r\n                                    ? <div><CloseOutlined/> Выйти из режима редактирования</div>\r\n                                    : <div><EditOutlined/> Редактировать профиль</div>\r\n                                }\r\n\r\n                            </Button>\r\n                        </Row> : null}\r\n                </ProfileEditButton>\r\n            </ProfileButtons>\r\n            <br/>\r\n            <div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileAdditionalData profile={profile}/>}\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default React.memo(ProfileInfo);","import styled from \"styled-components\";\r\nimport {CloseCircleOutlined} from \"@ant-design/icons\";\r\nimport {Col} from \"antd\";\r\n\r\nexport const PostBlock = styled.div`\r\n  background-color: #f0f2f5;\r\n  border-radius: 2px;\r\n  margin-bottom: 10px;\r\n  padding: 15px;\r\n`\r\n\r\nexport const DeletePostButton = styled(CloseCircleOutlined)`\r\n  float: right;\r\n  font-size: 20px;\r\n  transition: 0.2s;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    color: #000;\r\n  }\r\n`\r\n\r\nexport const PostInfo = styled(Col)`\r\n  padding-left: 30px;\r\n  padding-top: 10px;\r\n`\r\n\r\nexport const PostDate = styled.span`\r\n  color: gray;\r\n  font-size: 13px;\r\n`\r\n\r\nexport const PostText = styled.p`\r\n  word-wrap: break-word;\r\n  width: 600px;\r\n`\r\n\r\nexport const PostActionsBlock = styled.div`\r\n  color: gray;\r\n  font-size: 16px;\r\n`","import React, {useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Avatar, Col, Row} from 'antd';\r\nimport {HeartTwoTone} from \"@ant-design/icons\";\r\nimport {actions} from '../../../../redux/profile-reducer';\r\nimport {DeletePostButton, PostActionsBlock, PostBlock, PostDate, PostInfo, PostText} from './Post.styled';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n    date: Date\r\n    id: string\r\n    profileImage: string | null | undefined\r\n    months: Array<string>\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({message, likesCount, date, id, profileImage, months}) => {\r\n\r\n    const [localLikesCount, setLocalLikesCount] = useState<number>(likesCount)\r\n    const [isLiked, setIsLiked] = useState<boolean>(false);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const deletePostCallback = () => {\r\n        dispatch(actions.deletePost(id));\r\n    }\r\n\r\n    const like = () => {\r\n        setLocalLikesCount(likesCount + 1);\r\n        setIsLiked(false);\r\n    };\r\n\r\n    const unlike = () => {\r\n        setLocalLikesCount(likesCount - 1);\r\n        setIsLiked(true);\r\n    };\r\n\r\n    const formattedDate = date.getDate() + ' ' + months[date.getMonth()] + ' в ' +\r\n        date.toLocaleTimeString().slice(0, -3);\r\n\r\n    return (\r\n        <PostBlock>\r\n            <Row>\r\n                <Col>\r\n                    <Avatar src={profileImage} size={{xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 80}}/>\r\n                </Col>\r\n                <PostInfo>\r\n                    <PostDate>{formattedDate}</PostDate>\r\n                    <PostText>{message}</PostText>\r\n                </PostInfo>\r\n                <PostActionsBlock>\r\n                    <Col>\r\n                        {localLikesCount} <HeartTwoTone\r\n                            onClick={!isLiked ? like : unlike}\r\n                            twoToneColor=\"#1890ff\"\r\n                        />\r\n                    </Col>\r\n                    &nbsp;\r\n                    <Col>\r\n                        <DeletePostButton onClick={deletePostCallback}/>\r\n                    </Col>\r\n                </PostActionsBlock>\r\n            </Row>\r\n        </PostBlock>\r\n    )\r\n};\r\n\r\nexport default React.memo(Post);","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {Button} from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const AddPostButtonWrapper = styled.div`\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n`\r\nconst maxLength400 = maxLengthCreator(400);\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype PropsType = {}\r\n\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\n\r\nexport const AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType & PropsType> & PropsType> = ({handleSubmit}) => {\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                {createField<AddPostFormValuesKeysType>('Что у вас нового?', 'newPostText', [required, maxLength400], Textarea)}\r\n                <AddPostButtonWrapper>\r\n                    <Button htmlType=\"submit\">Опубликовать</Button>\r\n                </AddPostButtonWrapper>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-new-post-form'})(AddNewPostForm);","import styled from \"styled-components\";\r\nimport {Divider} from \"antd\";\r\n\r\nexport const StyledDivider = styled(Divider)`\r\n  margin-bottom: 7px;\r\n`\r\n\r\nexport const MyPostsHeader = styled.h3`\r\n  padding-top: 10px;\r\n  padding-bottom: 8px;\r\n`\r\n","import React, {FC} from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"../../forms/AddNewPostForm/AddNewPostForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectProfileImage, selectProfilePosts} from \"../../../selectors/profile-selectors\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport {MyPostsHeader, StyledDivider} from './ProfilePosts.styled';\r\nimport {List} from \"antd\";\r\n\r\nconst months = [\"Января\", \"Февраля\", \"Марта\",\r\n    \"Апреля\", \"Мая\", \"Июня\", \"Июля\", \"Августа\", \"Сентября\", \"Октябля\", \"Ноября\", \"Декабря\"];\r\n\r\nconst ProfilePosts: FC = () => {\r\n    const posts = useSelector(selectProfilePosts)\r\n    const profileImage = useSelector(selectProfileImage)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let postsElements = posts\r\n        .map((p) => <Post\r\n            months={months}\r\n            profileImage={profileImage}\r\n            message={p.message}\r\n            key={p.id}\r\n            id={p.id}\r\n            likesCount={p.likesCount}\r\n            date={p.date}\r\n        />).reverse();\r\n\r\n    let addNewPost = (values: AddPostFormValuesType) => {\r\n        dispatch(actions.addPostActionCreator(values.newPostText));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledDivider/>\r\n            <MyPostsHeader>\r\n                Мои записи\r\n            </MyPostsHeader>\r\n            <AddNewPostForm onSubmit={addNewPost}/>\r\n            <List size={'large'}>\r\n                {postsElements}\r\n            </List>\r\n        </>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(ProfilePosts)\r\n\r\nexport default MyPostsMemorized","import React, {FC, useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getStatus, getUserProfile} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {selectAuthorizedUserId} from \"../../selectors/auth-selectors\";\r\nimport styled from 'styled-components';\r\nimport ProfileInfo from \"../../components/Profile/Profile/ProfileInfo/ProfileInfo\";\r\nimport ProfilePosts from \"../../components/Profile/ProfilePosts/ProfilePosts\";\r\nimport {selectProfile} from \"../../selectors/profile-selectors\";\r\nimport Preloader from \"../../components/common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst ProfilePageWrapper = styled.div`\r\n  width: 100%;\r\n`\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & {}\r\n\r\nexport const ProfilePage: FC<PropsType> = ({history, match}) => {\r\n    const authorizedUserId = useSelector(selectAuthorizedUserId)\r\n    const profile = useSelector(selectProfile)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const refreshProfile = useCallback(() => {\r\n        let userId: number | null = +match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = authorizedUserId;\r\n            if (!userId) {\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            toast.info(\"Id should exists in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            dispatch(getUserProfile(userId));\r\n            dispatch(getStatus(userId));\r\n        }\r\n    }, [authorizedUserId, match.params.userId, history, dispatch])\r\n\r\n    useEffect(() => {\r\n        refreshProfile();\r\n    }, [match.params.userId, refreshProfile]);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <ProfilePageWrapper>\r\n            <ProfileInfo isOwner={!match.params.userId} profile={profile} userId={+match.params.userId}/>\r\n            {!match.params.userId ?\r\n                <ProfilePosts/>\r\n                : null}\r\n        </ProfilePageWrapper>\r\n    )\r\n}\r\n\r\nexport default React.memo(withAuthRedirect(withRouter(ProfilePage)));"],"sourceRoot":""}