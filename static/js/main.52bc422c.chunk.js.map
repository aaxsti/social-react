{"version":3,"sources":["components/common/Preloader/Preloader.tsx","components/Users/Users.module.css","components/common/FormsControls/FormsControls.module.css","assets/images/user.png","api/friends-api.ts","redux/friends-reducer.ts","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","pages/About/AboutPage.module.css","api/profile-api.ts","redux/profile-reducer.ts","assets/images/belarus.svg","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","assets/images/preloader.svg","assets/images/logo.svg","assets/images/sad.svg","assets/about/github.svg","assets/about/linkedin.svg","assets/about/vkontakte.svg","assets/about/telegram.svg","assets/about/gmail.svg","api/api.ts","serviceWorker.js","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/LoginForm/LoginForm.tsx","api/security-api.ts","api/auth-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/news-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","pages/News/NewsItem.tsx","pages/News/NewsPage.tsx","components/Navbar/Friends/Friend/Friend.tsx","pages/Friends/Friends.tsx","pages/About/AboutPage.tsx","pages/SignUp/SignUpForm.tsx","pages/SignUp/SignUpPage.tsx","App.tsx","index.tsx","pages/News/NewsItem.module.css","components/common/FormsControls/FormsControls.tsx"],"names":["Preloader","style","backgroundColor","position","src","preloader","alt","module","exports","friendsAPI","instance","get","then","res","data","initialState","friends","actions","type","requestFriends","dispatch","a","console","log","items","friendsReducer","state","action","required","value","maxLengthCreator","maxLength","length","profileAPI","userId","status","put","photoFile","formData","FormData","append","headers","profile","posts","id","message","likesCount","date","Date","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","newPost","Math","floor","random","filter","p","dialogs","name","imgLink","sendMessage","newMessageBody","dialogsReducer","body","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","m","index","array","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","getUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","ceil","pages","i","useState","portionNumber","setPortionNumber","portionCount","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","onClick","LeftOutlined","map","cn","selectedPage","pageNumber","key","RightOutlined","User","user","unfollow","follow","userBlock","to","small","userPhoto","padding","followed","disabled","some","UserDeleteOutlined","UserAddOutlined","countryFlag","BelarusFlag","usersSearchFormValidate","values","UsersSearchForm","React","memo","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","isSubmitting","width","htmlType","SearchOutlined","Option","updateObjectInArray","itemId","objPropName","newObjProps","usersAPI","userFollow","post","userUnfollow","delete","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","Users","props","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","bind","UsersPage","reduxForm","form","handleSubmit","paddingBottom","createField","InputField","paddingRight","paddingLeft","undefined","formSummeryError","securityAPI","authAPI","email","password","rememberMe","captcha","login","isAuth","captchaUrl","getAuthUserData","meData","getCaptchaUrl","url","authReducer","LoginPage","LoginOutlined","setState","CaptchaIsRequired","initialized","appReducer","news","title","imageUrl","summary","publishedAt","newsReducer","rootReducer","combineReducers","profilePage","dialogsPage","app","formReducer","chat","friendsPage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","Suspense","fallback","selectIsAuth","selectCurrentUserLogin","Header","userAvatar","large","Layout","span","Logo","size","NewsItem","image","description","main","mainBlock","titleFlex","slice","publishedBlock","published","descriptionBlock","imageBlock","News","elements","item","Friend","bordered","hoverable","fontSize","headStyle","cover","Meta","Friends","searchTerm","setSearchTerm","placeholder","onChange","event","target","val","toLowerCase","includes","f","About","aboutBlock","iconsBlock","href","githubIcon","linkedinIcon","vkIcon","telegramIcon","gmailIcon","SignUpForm","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","paddingTop","format","Group","SignUpPage","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","Content","Footer","Sider","mode","height","Item","HomeOutlined","HeartOutlined","ExceptionOutlined","UserOutlined","MessageOutlined","minHeight","exact","path","render","component","NewsPage","ErrorSadPic","UpOutlined","textAlign","AboutPage","fontWeight","Component","AppContainer","withRouter","connect","promise","all","SocialNetworkApp","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","allowClear","autoSize","validators","text"],"mappings":"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","file":"static/js/main.52bc422c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader  = () => {\r\n    return <div style={{backgroundColor: '#f0f2f5', position: \"absolute\"}}>\r\n        <img src={preloader} alt=\"Preloader picture\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__3Bbc9\",\"userBlock\":\"Users_userBlock__wSpKs\",\"users\":\"Users_users__2JqzX\",\"countryFlag\":\"Users_countryFlag__1dieC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3FZxU\",\"error\":\"FormsControls_error__2wZcU\",\"formSummeryError\":\"FormsControls_formSummeryError__1a8XU\"};","module.exports = __webpack_public_path__ + \"static/media/user.57b075ed.png\";","import {GetItemsType, instance} from \"./api\";\r\n\r\nexport const friendsAPI = {\r\n    getFriends() {\r\n        return instance.get<GetItemsType>('users?friend=true')\r\n            .then(res => res.data)\r\n    }\r\n}","import {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {friendsAPI} from \"../api/friends-api\";\r\nimport {FilterType} from \"./users-reducer\";\r\n\r\nlet initialState = {\r\n    friends: [] as Array<UserType>\r\n}\r\n\r\nconst friendsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/FRIENDS/SET_FRIENDS':\r\n            return {...state, friends: action.friends}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setFriends: (friends: Array<UserType>) => ({type: 'SN/FRIENDS/SET_FRIENDS', friends} as const)\r\n}\r\n\r\nexport const requestFriends = (): ThunkType =>\r\n    async (dispatch) => {\r\n        console.log(1)\r\n        let data = await friendsAPI.getFriends();\r\n        dispatch(actions.setFriends(data.items));\r\n    }\r\n\r\nexport default friendsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2p4Lg\",\"pageNumbers\":\"Paginator_pageNumbers__nScyD\",\"paginator\":\"Paginator_paginator__1u4Wr\",\"pageNumber\":\"Paginator_pageNumber__3RwdL\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Заполните поле\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value)=> {\r\n    if (value && value.length > maxLength) return `Максимальная длина: ${maxLength} символов`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutBlock\":\"AboutPage_aboutBlock__lV2gw\",\"iconsBlock\":\"AboutPage_iconsBlock__2Riat\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n\r\n    savePhoto(photoFile: File) {\r\n        console.log(photoFile)\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n};","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {ResultCodesEnum} from \"../api/api\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Привет, как дела?', likesCount: 25, date: new Date()},\r\n        {id: 2, message: 'Это мой первый пост', likesCount: 15, date: new Date()}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD_POST':\r\n            let newPost = {\r\n                id: Math.floor(Math.random()* 1000),\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n                date: new Date()\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case 'SN/PROFILE/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case 'SN/PROFILE/SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            };\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    } catch (error) {\r\n        // Error\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if (userId != null) {\r\n            dispatch(await getUserProfile(userId))\r\n        } else {\r\n            throw new Error('userIf can`t be null')\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/belarus.54f7e3da.svg\";","import {DialogType, MessageType} from \"../types/types\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi!'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'qq'},\r\n    ] as Array<MessageType>,\r\n    dialogs: [\r\n        {id: 1, name: 'Maxim', imgLink: 'https://picsum.photos/400/400'},\r\n        {id: 2, name: 'Ilya', imgLink: 'https://picsum.photos/100/100'},\r\n        {id: 3, name: 'Ivan', imgLink: 'https://picsum.photos/200/200'},\r\n        {id: 4, name: 'Stas', imgLink: 'https://picsum.photos/80/80'},\r\n        {id: 5, name: 'Sasha', imgLink: 'https://picsum.photos/90/90'},\r\n    ] as Array<DialogType>\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND_MESSAGE\":\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","const subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n};\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n};\r\n\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n};\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback);\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error';\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}","import {FormAction} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ChatMessageType = ChatMessageAPIType\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n};\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEIVED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEIVED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const),\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message);\r\n}\r\n\r\nexport default chatReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/preloader.62ba7bf9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.a0c70392.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad.07a0b701.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.19f49232.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.4989ae0f.svg\";","module.exports = __webpack_public_path__ + \"static/media/vkontakte.b5870904.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.71da0f1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmail.aabb690e.svg\";","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"31c269a2-4de2-4018-98f9-0e5ea8f600fd\"\r\n    }\r\n});\r\n\r\n// 6a3eaab1-e015-4834-8a3d-4dbe63a05c04 - aaxsti\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired= 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import React, {FC, useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from 'classnames';\r\nimport { Button } from \"antd\";\r\nimport {LeftOutlined, RightOutlined } from \"@ant-design/icons\";\r\n\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    portionSize?: number\r\n\r\n    onPageChanged?: (pageNumber: number) => void\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({\r\n                                      totalItemsCount,\r\n                                      pageSize,\r\n                                      currentPage,\r\n                                      onPageChanged = x => x,\r\n                                      portionSize = 10\r\n                                  }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n\r\n        <div className={styles.paginator}>\r\n\r\n            {portionNumber > 1 &&\r\n            <Button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}><LeftOutlined /></Button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [styles.selectedPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p);\r\n                                 }}>{p}</span>\r\n\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <Button onClick={() => {\r\n                setPortionNumber((portionNumber + 1))\r\n            }}><RightOutlined /></Button>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React, {FC} from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport BelarusFlag from \"../../assets/images/belarus.svg\";\r\nimport {UserAddOutlined, UserDeleteOutlined} from \"@ant-design/icons\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div className={s.userBlock}>\r\n            <Row>\r\n                <Col>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + user.id}>\r\n                                <img alt=\"User picture\" src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                     className={s.userPhoto}/>\r\n                            </NavLink>\r\n                        </div>\r\n                         <div style={{padding: '10px 0 0 35px'}}>\r\n                            {user.followed\r\n                                ? <Button disabled={followingInProgress\r\n                                    .some(id => id === user.id)}\r\n                                          onClick={() => {\r\n                                              unfollow(user.id);\r\n                                          }}>\r\n                                    <UserDeleteOutlined /></Button>\r\n\r\n                                : <Button disabled={followingInProgress\r\n                                    .some(id => id === user.id)}\r\n                                          onClick={() => {\r\n                                              follow(user.id)\r\n                                          }}>\r\n                                    <UserAddOutlined /></Button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                </Col>\r\n                <Col style={{padding: '5px 0 0 30px'}}>\r\n                    <b>{user.name}</b>\r\n                    <div>{user.status ? user.status : ' '}</div>\r\n                    <div>ГГУ им. Ф. Скорины</div>\r\n                    <div><img className={s.countryFlag}\r\n                              src={BelarusFlag}\r\n                              alt={'country flag'}/>{\"Беларусь\"}</div>\r\n                    <div>{\"Гомель\"}</div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React, {FC} from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\nimport Button from \"antd/lib/button\";\r\nimport {Input, Select} from \"formik-antd\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n\r\n        const filter = useSelector(getUsersFilter)\r\n\r\n        const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === \"null\" ? null : values.friend === \"true\"\r\n            }\r\n            onFilterChanged(filter)\r\n            setSubmitting(false)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                    validate={usersSearchFormValidate}\r\n                    onSubmit={submit}\r\n                >\r\n                    {({isSubmitting}) => (\r\n                        <Form>\r\n                            <Input name=\"term\" style={{width: '20%'}}/>\r\n\r\n                            <Button htmlType=\"submit\" disabled={isSubmitting}>\r\n                                <SearchOutlined />\r\n                            </Button>\r\n\r\n                            <Select\r\n                                name=\"friend\"\r\n                                style={{width: \"20%\"}}\r\n                            >\r\n                                <Select.Option value=\"null\">Все</Select.Option>\r\n                                <Select.Option value=\"true\">Только друзья</Select.Option>\r\n                                <Select.Option value=\"false\">Все кроме друзей</Select.Option>\r\n                            </Select>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n)","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    userFollow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    userUnfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n};","import {APIResponseType, ResultCodesEnum} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true as boolean,\r\n    followingInProgress: [] as Array<number>,    // array of user id`s\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state, users: action.users}\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.count}\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER':\r\n            return {...state, filter: action.payload}\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SN/USERS/SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: 'SN/USERS/SET_FILTER',\r\n        payload: filter\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number,\r\n                             filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    }\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsType) => {\r\n\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.userFollow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n\r\nexport const unfollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.userUnfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>","import React, {FC, useEffect} from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {FilterType, requestUsers, follow, unfollow} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\n\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    }\r\n\r\n    const userFollow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const userUnfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return (\r\n        <div className={s.users}>\r\n            <h2>Пользователи</h2>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n            <Paginator\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n            />\r\n            <div>\r\n                {users.map(u => <User\r\n                    user={u}\r\n                    key={u.id}\r\n                    followingInProgress={followingInProgress}\r\n                    unfollow={userUnfollow}\r\n                    follow={userFollow}\r\n                />)}\r\n            </div>\r\n            <Paginator\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\nimport {Users} from \"./Users\";\r\n\r\ntype UsersPagePropsType = {}\r\n\r\nexport const UsersPage: FC<UsersPagePropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching);\r\n\r\n    return <>\r\n        {/*Code line down causes bad preloading look!*/}\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n}","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {createField, GetStringKeys, InputField} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {LoginFormOwnProps, LoginFormValuesType} from \"../LoginPage\";\r\nimport {Button, Col, Input, Row} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {EyeInvisibleOutlined, EyeTwoTone} from \"@ant-design/icons\";\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nexport const LoginForm: FC<InjectedFormProps<LoginFormValuesType & LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div style={{width: '200px'}}>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], InputField)}\r\n                    </Row>\r\n\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        {createField<LoginFormValuesTypeKeys>(\"Пароль\", \"password\", [required], InputField, {type: \"password\"})}\r\n                        {/*<Input.Password*/}\r\n                        {/*    placeholder=\"input password\"*/}\r\n                        {/*    iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}*/}\r\n                        {/*/>*/}\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Col style={{paddingRight: 15, paddingLeft: 2}}>\r\n                            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], InputField, {type: \"checkbox\"}, \"\")}\r\n                        </Col>\r\n                        <Col>\r\n                            Запомнить меня\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {error &&\r\n                <div className={style.formSummeryError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n\r\n                <div>\r\n                    <Button htmlType=\"submit\">Войти</Button>\r\n                    <NavLink to={'/signup'}><Button type=\"link\">Создать аккаунт</Button></NavLink>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);","import {instance} from \"./api\";\r\n\r\ntype getCaptchaUrlResponseType = {\r\n    url: string;\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<getCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n};","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum & ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {authAPI} from \"../api/auth-api\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string | null    // if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n        case 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/AUTH/SET_USER_DATA', payload:\r\n            {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch, setState) => {\r\n    let data = await authAPI.login(email, password, rememberMe);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import React, {FC} from \"react\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {LoginOutlined} from \"@ant-design/icons\";\r\n\r\nexport type LoginFormOwnProps = {}\r\n\r\nexport type LoginFormValuesType = {\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\n\r\nexport const LoginPage: FC = () => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{paddingBottom: 8}}>Войти в аккаунт &nbsp; &nbsp;<LoginOutlined /></h1>\r\n            <LoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state=  initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<any, AppStateType, unknown, ActionsType>\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n};\r\n\r\nexport default appReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {NewsType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {NewsAPI} from \"../api/news-api\";\r\n\r\nlet initialState: NewsType = {\r\n    news: [\r\n        {\r\n            title: 'Добавлен поиск пользователей и пагинация',\r\n            imageUrl: 'https://sun9-36.userapi.com/impg/2vy2rXeYUR5uk6OsDvQNmSTknBXX0wKANjXVFA/wnNNnA_QZus.jpg?size=625x603&quality=96&sign=fa931ca45802a1ac04b2c0771bb6b496&type=album',\r\n            summary: 'В раздел \"Пользователи\" было добавлено текстовое поле для поиска пользователей по имени и/или фамилии. ' +\r\n                'Помимо текстового поля был добавлен раскрывающийся список с фильтрами поиска, такими как: поиск по друзьям, поиск всех пользователей' +\r\n                ', а также поиск пользователей, которых нет у вас в друзьях.',\r\n            publishedAt: '21-03-2021'\r\n        },\r\n        {\r\n            title: 'Добавлен раздел \"Мои друзья\"',\r\n            imageUrl: 'https://sun9-34.userapi.com/impg/AND3E6RAo3VSnpSB6H1bItI0rQyaDpFUDPdqqA/kvs3rbDenZk.jpg?size=1093x786&quality=96&sign=269ee2ce00b189f82f74706be94f6d14&type=album',\r\n            summary: 'Создан раздел \"Мои друзья\" со списком добавленных пользователем друзей. Также разработана строка для поиска ' +\r\n                'друзей по имени и/или фамилии.',\r\n            publishedAt: '04-04-2021'\r\n        },\r\n        {\r\n            title: 'Добавлена возможность создавать посты',\r\n            imageUrl: 'https://sun9-73.userapi.com/impg/xc9OitnHM3R2DYw6iqABWnjR3wDxv64bpkKaRA/bjunwNdyJC0.jpg?size=932x594&quality=96&sign=83d78f786cf9387b809f1c2bc8ef2545&type=album',\r\n            summary: 'Добавлена возможность создавать посты на собственных страницах профиля. Также имеется возможность ' +\r\n                '\"лайкать\" созданные посты.',\r\n            publishedAt: '25-02-2021'\r\n        }\r\n    ]\r\n}\r\n\r\nconst newsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setNews: (data: Array<any>) => ({type: 'SN/NEWS/FIND_CITY', data} as const),\r\n}\r\n\r\n// export const requestNews = (size: number): ThunkType => {\r\n//     return async (dispatch) => {\r\n//         let response = await NewsAPI.findApi(size)\r\n//         dispatch(actions.setNews(response.data))\r\n//         console.log(response.data)\r\n//     }\r\n// }\r\n\r\nexport default newsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reducer\";\r\nimport newsReducer from \"./news-reducer\";\r\nimport friendsReducer from \"./friends-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n    chat: chatReducer,\r\n    news: newsReducer,\r\n    friendsPage: friendsReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;  // (globalState: GLOBALSTATE) => GLOBALSTATE\r\nexport type AppStateType = ReturnType<RootReducerType> // Type that return RootReducerType\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\nexport default withSuspense;","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n}","import React, {FC} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {HomeOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Logo from '../../assets/images/logo.svg'\r\n\r\nexport type MapPropsType = {}\r\n\r\nconst Header: FC<MapPropsType> = (props) => {\r\n\r\n    const userAvatar = useSelector((state: AppStateType) => state.profilePage.profile?.photos.large)\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n    const dispatch = useDispatch()\r\n\r\n    const {Header} = Layout;\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n            <Row>\r\n                <Col span={20}>\r\n                    <img src={Logo} style={{width: '40px'}}/>\r\n                    {/*<Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>*/}\r\n                    {/*    <Menu.Item key=\"1\"><Link to=\"/users\">Пользователи</Link></Menu.Item>*/}\r\n                    {/*    <Menu.Item key=\"2\"><Link to=\"/chat\">Мессенджер</Link></Menu.Item>*/}\r\n                    {/*</Menu>*/}\r\n                </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col span={1}>\r\n                            <Link to=\"/profile\"><Avatar src={userAvatar} size={\"large\"}/></Link>\r\n                        </Col>\r\n                        <Col span={2}>\r\n                            <Button onClick={logoutCallback}>Выйти</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={6}>\r\n                        <Button>\r\n                            <Link to={'/login'}>Войти</Link>\r\n                        </Button>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        </Header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React, {FC} from \"react\";\r\nimport s from './NewsItem.module.css'\r\nimport {Image} from 'antd';\r\n\r\ntype PropsType = {\r\n    title : string\r\n    image : string\r\n    description : string\r\n    publishedAt : string\r\n    key ?: number\r\n}\r\n\r\nconst NewsItem: FC<PropsType>  = ({title, image, description, publishedAt}) => {\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.mainBlock}>\r\n                <div className={s.titleFlex}>\r\n                    <h2 className={s.title}>{title.length >= 84 ? `${title.slice(0, 84)}...` : title}</h2>\r\n                    <div className={s.publishedBlock}><h4 className={s.published}>{publishedAt}</h4></div>\r\n\r\n                </div>\r\n                <div className={s.descriptionBlock}>\r\n                    <p className={s.description}>{description}</p></div>\r\n            </div>\r\n            <div className={s.imageBlock}>\r\n                <Image src={image} className={s.image} alt={''}/>\r\n            </div>\r\n            <br/>\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewsItem;","import React, {FC} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport NewsItem from \"./NewsItem\";\r\nimport {Button} from \"antd\";\r\n\r\ntype PropsType = {}\r\n\r\nconst News: FC<PropsType> = () => {\r\n\r\n    const news = useSelector((state: AppStateType) => state.news.news)\r\n\r\n    let elements = news.map((item, index) => <NewsItem\r\n        title={item.title} image={item.imageUrl} description={item.summary}\r\n        publishedAt={item.publishedAt} key={index}/>)\r\n\r\n    return (\r\n        <div style={{width: 600}}>\r\n            <h2>Новости</h2>\r\n            {elements}\r\n            <br/>\r\n            <Button onClick={() => {\r\n            }}>Показать еще</Button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default News;","import React, {FC} from 'react';\r\nimport {UserType} from \"../../../../types/types\";\r\nimport {Card, Col} from \"antd\";\r\nimport Meta from \"antd/es/card/Meta\";\r\nimport userPhoto from \"../../../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    friend: UserType\r\n}\r\n\r\nconst Friend: FC<PropsType> = ({friend}) => {\r\n    return (\r\n        <Col style={{padding: '8px 8px 0 0'}}>\r\n            <NavLink to={'/profile/' + friend.id}>\r\n                <Card\r\n                    bordered={true}\r\n                    hoverable\r\n                    style={{width: 170, fontSize: 13}}\r\n                    headStyle={{fontSize: 13}}\r\n\r\n                    cover={<img alt=\"friend photo\"\r\n                                src={friend.photos.small != null ? friend.photos.small : userPhoto}/>}\r\n                >\r\n                    <Meta style={{fontSize: 13}} title={friend.name} description=\"ГГУ им. Ф. Скорины\"/>\r\n                </Card>\r\n            </NavLink>\r\n        </Col>\r\n    )\r\n};\r\n\r\nexport default Friend;","import React, {FC, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestFriends} from \"../../redux/friends-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Friend from \"../../components/Navbar/Friends/Friend/Friend\";\r\nimport {Input, Row} from \"antd\";\r\n\r\nimport Button from \"antd/lib/button\";\r\nimport {SearchOutlined} from \"@ant-design/icons\";\r\n\r\ntype PropsType = {}\r\n\r\nconst Friends: FC<PropsType> = () => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const dispatch = useDispatch()\r\n    const friends = useSelector((state: AppStateType) => state.friendsPage.friends)\r\n\r\n    useEffect(() => {\r\n        dispatch(requestFriends());\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{paddingBottom: 9}}>Мои друзья</h1>\r\n            <Input style={{width: '20%'}} placeholder={'Поиск...'}\r\n                   onChange={event => {\r\n                       setSearchTerm(event.target.value)\r\n                   }}/>\r\n            {/*<Button>*/}\r\n            {/*    <SearchOutlined/>*/}\r\n            {/*</Button>*/}\r\n            <br/>\r\n            <br/>\r\n            <Row>\r\n                {\r\n                    friends\r\n                        .filter(val => {\r\n                            if (searchTerm === \"\") {\r\n                                return val;\r\n                            } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())) {\r\n                                return val;\r\n                            }\r\n                        })\r\n                        .map(f => <Friend\r\n                            friend={f}\r\n                            key={f.id}\r\n                        />)\r\n                }\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friends;","import React, {FC} from \"react\";\r\nimport style from \"./AboutPage.module.css\"\r\nimport githubIcon from '../../assets/about/github.svg'\r\nimport linkedinIcon from '../../assets/about/linkedin.svg'\r\nimport vkIcon from '../../assets/about/vkontakte.svg'\r\nimport telegramIcon from '../../assets/about/telegram.svg'\r\nimport gmailIcon from '../../assets/about/gmail.svg'\r\n\r\ntype PropsType = {}\r\n\r\nconst About: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={style.aboutBlock}>\r\n            <h3>Me in social</h3>\r\n            <div className={style.iconsBlock}>\r\n                <a href='https://github.com/aaxsti'><img src={githubIcon} alt='link icons'/></a>\r\n                <a href='https://linkedin.com/in/astapenko-maxim'><img src={linkedinIcon} alt='link icons'/></a>\r\n                <a href='https://vk.com/bladerunner1'><img src={vkIcon} alt='link icons'/></a>\r\n                <a href='https://t.me/astapenkomaxim'><img src={telegramIcon} alt='link icons'/></a>\r\n                <a href='mailto:3646824@gmail.com'><img src={gmailIcon} alt='link icons'/></a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React, {FC} from \"react\";\r\nimport {Button, Col, DatePicker, Input, Radio, Row} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {EyeInvisibleOutlined, EyeTwoTone} from \"@ant-design/icons\";\r\n\r\ntype PropsType = {}\r\n\r\nconst dateFormat = 'YYYY/MM/DD';\r\n\r\nexport const SignUpForm: FC<PropsType> = () => {\r\n    return (\r\n        <form>\r\n            <Row>\r\n                <Col style={{paddingRight: 30}}>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input placeholder={'Email'}/>\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input.Password\r\n                            placeholder=\"Пароль\"\r\n                            iconRender={visible => (visible ? <EyeTwoTone/> : <EyeInvisibleOutlined/>)}\r\n                        />\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input.Password\r\n                            placeholder=\"Повторите пароль\"\r\n                            iconRender={visible => (visible ? <EyeTwoTone/> : <EyeInvisibleOutlined/>)}\r\n                        />\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input placeholder={'Имя'}/>\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Input placeholder={'Фамилия'}/>\r\n                    </Row>\r\n                </Col>\r\n                <Col>\r\n                    <Row style={{paddingBottom: 15, width: 220}}>\r\n                        <Input placeholder={'Номер телефона'}/>\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 23}}>\r\n                        <Row style={{paddingRight: 10, paddingTop: 6}}>Дата рождения :</Row>\r\n                        <DatePicker placeholder={'Выберите дату'} format={dateFormat}/>\r\n                    </Row>\r\n                    <Row style={{paddingBottom: 15}}>\r\n                        <Row style={{paddingRight: 30}}>Пол :</Row>\r\n                        <Radio.Group>\r\n                            <Radio value={1} style={{paddingRight: 20}}>Мужской</Radio>\r\n                            <Radio value={2}>Женский</Radio>\r\n                        </Radio.Group>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Button>Создать аккаунт</Button>\r\n                <NavLink to={'/login'}><Button type=\"link\">Уже есть аккаунт</Button></NavLink>\r\n            </Row>\r\n        </form>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {UserAddOutlined} from \"@ant-design/icons\";\r\nimport {SignUpForm} from \"./SignUpForm\";\r\n\r\nexport const SignUpPage: FC = () => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{paddingBottom: 8}}>Создать аккаунт &nbsp; &nbsp;<UserAddOutlined /></h1>\r\n            <SignUpForm/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType, FC} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {BackTop, Layout, Menu} from 'antd';\r\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport {UsersPage} from \"./components/Users/UsersContainer\";\r\nimport {LoginPage} from \"./components/Login/LoginPage\";\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport withSuspense from \"./hoc/withSuspense\";\r\nimport Header from \"./components/Header/Header\";\r\nimport ErrorSadPic from './assets/images/sad.svg'\r\nimport {\r\n    ExceptionOutlined,\r\n    HeartOutlined,\r\n    HomeOutlined,\r\n    MessageOutlined,\r\n    UpOutlined,\r\n    UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport NewsPage from \"./pages/News/NewsPage\";\r\nimport Friends from \"./pages/Friends/Friends\";\r\nimport AboutPage from \"./pages/About/AboutPage\";\r\nimport {SignUpPage} from \"./pages/SignUp/SignUpPage\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedChatPage = withSuspense(ChatPage)\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        //dispatch thunk of global error\r\n        alert(\"Some error occurred\");\r\n        // console.error(promiseRejectionEvent);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        const {Content, Footer, Sider} = Layout;\r\n\r\n        return (\r\n            <Layout>\r\n                <Header/>\r\n                <Content style={{padding: '0 50px 0 180px'}}>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                // defaultSelectedKeys={['1']}\r\n                                // defaultOpenKeys={['sub1']}\r\n                                style={{height: '100%'}}\r\n                            >\r\n                                <Menu.Item key=\"1\"><Link to=\"/profile\"><HomeOutlined/> Моя\r\n                                    страница</Link></Menu.Item>\r\n                                <Menu.Item key=\"2\"><Link to=\"/friends\"><HeartOutlined/> Мои\r\n                                    друзья</Link></Menu.Item>\r\n                                <Menu.Item key=\"3\"><Link to=\"/news\"><ExceptionOutlined/> Новоости</Link></Menu.Item>\r\n                                <Menu.Item key=\"4\"><Link to=\"/users\"><UserOutlined/> Пользователи</Link></Menu.Item>\r\n                                <Menu.Item key=\"5\"><Link to=\"/chat\"><MessageOutlined/> Мессенджер</Link></Menu.Item>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 80px', minHeight: 280}}>\r\n                            <Switch>\r\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n\r\n                                <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n                                <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n                                <Route path='/news' component={NewsPage}/>\r\n                                <Route path='/users' render={() => <UsersPage/>}/>\r\n                                <Route path='/friends' render={() => <Friends/>}/>\r\n                                <Route path='/login' render={() => <LoginPage/>}/>\r\n                                <Route path='/signup' render={() => <SignUpPage/>}/>\r\n                                <Route path='/chat' render={() => <SuspendedChatPage/>}/>\r\n\r\n                                <Route path='*' render={() => <div>404 NOT FOUND <br/><img style={{width: '40px'}}\r\n                                                                                           src={ErrorSadPic}\r\n                                                                                           alt='404 Error picture'/>\r\n                                </div>}/>\r\n                            </Switch>\r\n                            <BackTop>\r\n                                <div className='scroll-up-button'>\r\n                                    <UpOutlined/>\r\n                                </div>\r\n                            </BackTop>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center', backgroundColor: '#e8e8ed'}}>\r\n                    <AboutPage/>\r\n                    <br/>\r\n                    <div style={{fontWeight: 'lighter'}}>Social Network ©2021 Created by Maxim Astapenko</div>\r\n                </Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nlet AppContainer = compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nconst SocialNetworkApp: FC = () => {\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default SocialNetworkApp;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SocialNetworkApp from \"./App\";\n\nReactDOM.render(<SocialNetworkApp/>, document.getElementById('root'));\n\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"NewsItem_image__3xa4W\"};","import React, {FC} from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport {Input} from \"antd\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <span>\r\n                {children}\r\n            </span>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><TextArea {...input} {...restProps} allowClear autoSize={true}/></FormControl>\r\n}\r\n\r\nexport const InputField: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><Input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   component={component}\r\n                   validate={validators}\r\n                   {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>"],"sourceRoot":""}