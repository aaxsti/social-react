{"version":3,"sources":["utils/scroll-chat-helper.ts","components/forms/AddMessageForm/AddMessageForm.styled.ts","../node_modules/@ant-design/icons-svg/es/asn/CloseCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js","selectors/dialogs-selectors.ts","components/Dialogs/Dialogs/Dialogs.styled.ts","components/Dialogs/Dialog/Dialog.styled.ts","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Dialogs/Dialogs.tsx","components/Dialogs/DialogsChat/DialogsChat.styled.ts","components/Dialogs/DialogsChat/DialogMessage/DialogMessage.styled.ts","components/Dialogs/DialogsChat/DialogMessage/DialogMessage.tsx","components/forms/AddDialogMessageForm/AddDialogMessageForm.styled.ts","components/forms/AddDialogMessageForm/AddDialogMessageForm.tsx","components/Dialogs/DialogsChat/DialogsChat.tsx","pages/DialogsPage/DialogsPage.tsx"],"names":["scrollChatHelper","e","isAutoScroll","setIsAutoScroll","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","AddMessageFormElement","styled","Col","AddMessageFormTextArea","TextArea","CloseCircleOutlined","props","ref","React","AntdIcon","Object","assign","icon","CloseCircleOutlinedSvg","displayName","dialogsPage","state","selectDialogs","createSelector","dialogs","selectDialogMessages","messages","selectDialogUser","selectedUser","DialogsListCol","DialogsList","List","DialogDate","p","DialogItemInfo","DialogItem","Row","selectedDialog","hasNewMessage","DialogItemRight","Dialog","photo","userName","lastUserActivityDate","newMessagesCount","userId","dispatch","useDispatch","useState","setSelectedDialog","formattedDate","substr","split","join","onClick","getDialogMessages","size","src","Dialogs","map","d","id","key","photos","small","DialogChatWindow","div","DialogMessagesBlock","NoDialogHeader","h1","DialogMessageElement","viewed","DialogMessageText","DeleteMessageButton","memo","messageText","senderId","messageId","selectedDialogUserData","useSelector","selectAuthorizedUserId","selectAuthorizedUserAvatar","avatar","findSenderUser","find","dialog","selectDialogUserData","alt","deleteDialogMessage","AddDialogMessageFormTextArea","AddDialogMessageForm","message","setMessage","placeholder","autoSize","onPressEnter","event","preventDefault","sendDialogMessage","onChange","value","DialogsChat","messagesAnchorRef","useRef","useEffect","current","scrollIntoView","behavior","window","scrollTo","onScroll","length","m","body","withAuthRedirect","getDialogs","MessageOutlined","Preloader"],"mappings":"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","file":"static/js/7.b04302a7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const scrollChatHelper = (\r\n    e: React.UIEvent<HTMLDivElement, UIEvent>,\r\n    isAutoScroll: boolean,\r\n    setIsAutoScroll: (bool: boolean) => void) => {\r\n\r\n    const element = e.currentTarget;\r\n    if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n        !isAutoScroll && setIsAutoScroll(true)\r\n    } else {\r\n        isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n}","import styled from \"styled-components\";\r\nimport {Col} from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\n\r\nexport const AddMessageFormElement = styled(Col)`\r\n  padding: 20px 0 0 0;\r\n`\r\n\r\nexport const AddMessageFormTextArea = styled(TextArea)`\r\n  width: 500px;\r\n  height: 30px;\r\n`","// This icon file is generated automatically.\nvar CloseCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"close-circle\", \"theme\": \"outlined\" };\nexport default CloseCircleOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CloseCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/CloseCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CloseCircleOutlined = function CloseCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: CloseCircleOutlinedSvg\n  }));\n};\n\nCloseCircleOutlined.displayName = 'CloseCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(CloseCircleOutlined);","import {AppStateType} from \"../redux/store/redux-store\";\r\nimport { createSelector } from 'reselect'\r\nimport {selectAuthorizedUserAvatar, selectAuthorizedUserId} from \"./auth-selectors\";\r\n\r\nconst dialogsPage = (state: AppStateType) => state.dialogsPage\r\n\r\nexport const selectDialogs = createSelector(\r\n    [dialogsPage],\r\n    dialogsPage => dialogsPage.dialogs\r\n)\r\n\r\nexport const selectDialogMessages = createSelector(\r\n    [dialogsPage],\r\n    dialogsPage => dialogsPage.messages\r\n)\r\n\r\nexport const selectDialogUser = createSelector(\r\n    [dialogsPage],\r\n    dialogsPage => dialogsPage.selectedUser\r\n)\r\n\r\nexport const selectDialogUserData = (senderId: number) => createSelector(\r\n    [selectDialogs, selectAuthorizedUserId, selectAuthorizedUserAvatar],\r\n    (selectDialogs, userId, avatar) => {\r\n        const findSenderUser = selectDialogs.find((dialog) => dialog.id === senderId)\r\n        if (senderId === userId) return ['Вы', avatar]\r\n        return [findSenderUser?.userName, findSenderUser?.photos.small]\r\n    }\r\n)","import styled from \"styled-components\";\r\nimport {Col, List} from \"antd\";\r\n\r\nexport const DialogsListCol = styled(Col)`\r\n  padding-right: 20px;\r\n  border-right: 1px #ebedee solid;\r\n`\r\n\r\nexport const DialogsList = styled(List)`\r\n  width: 300px;\r\n`","import styled from \"styled-components\";\r\nimport {Col, Row} from \"antd\";\r\n\r\nexport const DialogDate = styled.p`\r\n  margin: 0;\r\n  padding: 0;\r\n  color: gray;\r\n  font-size: 13px;\r\n`\r\n\r\nexport const DialogItemInfo = styled(Col)`\r\n  padding-left: 20px;\r\n`\r\n\r\nexport const DialogItem = styled(Row)<{ hasNewMessage: boolean, selectedDialog: boolean }>`\r\n  background-color: ${props => (props.selectedDialog && \"#ebedee\")};\r\n  background-color: ${props => (props.hasNewMessage && \"#e6eff7\")};\r\n  width: 300px;\r\n  padding: 10px;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    background-color: #ebedee;\r\n  }\r\n\r\n  cursor: pointer;\r\n  border-bottom: 1px #eef0f0 solid;\r\n`\r\n\r\nexport const DialogItemRight = styled(Col)`\r\n  font-size: 16px;\r\n  margin-left: auto;\r\n  color: gray;\r\n`","import React, {FC, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getDialogMessages} from \"../../../redux/dialogs-reducer\";\r\nimport {DialogDate, DialogItem, DialogItemInfo, DialogItemRight} from \"./Dialog.styled\";\r\nimport {Avatar, Col} from \"antd\";\r\nimport {CloseCircleOutlined} from \"@ant-design/icons\";\r\n\r\ntype PropsType = {\r\n    hasNewMessage: boolean\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photo: string | null\r\n    userName: string\r\n    userId: number\r\n}\r\n\r\nconst Dialog: FC<PropsType> = ({\r\n                                   hasNewMessage,\r\n                                   photo,\r\n                                   userName,\r\n                                   lastUserActivityDate,\r\n                                   newMessagesCount,\r\n                                   userId\r\n                               }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [selectedDialog, setSelectedDialog] = useState<boolean>(false)\r\n\r\n    const formattedDate = lastUserActivityDate\r\n            .substr(5, 5)\r\n            .split('-').join('.') + ' в '\r\n        + lastUserActivityDate.substr(11, 5);\r\n\r\n    const handleSelect = () => {\r\n        setSelectedDialog(true)\r\n        dispatch(getDialogMessages(userId))\r\n    }\r\n\r\n    return (\r\n        <DialogItem hasNewMessage={hasNewMessage} selectedDialog={selectedDialog} onClick={handleSelect}>\r\n            <Col>\r\n                <Avatar size={'large'} src={photo}/>\r\n            </Col>\r\n            <DialogItemInfo>\r\n                <span>{userName}</span>\r\n                <DialogDate>{formattedDate}</DialogDate>\r\n            </DialogItemInfo>\r\n            <DialogItemRight>\r\n                <span>{newMessagesCount} </span>\r\n                <CloseCircleOutlined/>\r\n            </DialogItemRight>\r\n        </DialogItem>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import React, {FC} from \"react\";\r\nimport {DialogType} from \"../../../types/types\";\r\nimport {DialogsList, DialogsListCol} from \"./Dialogs.styled\";\r\nimport Dialog from \"../Dialog/Dialog\";\r\n\r\nconst Dialogs: FC<{ dialogs: Array<DialogType> }> = ({dialogs}) => {\r\n    return (\r\n        <DialogsListCol>\r\n            <DialogsList>\r\n                {dialogs.map(d => <Dialog\r\n                    userId={d.id}\r\n                    key={d.id}\r\n                    userName={d.userName}\r\n                    lastUserActivityDate={d.lastUserActivityDate}\r\n                    newMessagesCount={d.newMessagesCount}\r\n                    photo={d.photos.small}\r\n                    hasNewMessage={d.hasNewMessage}\r\n                />)}\r\n            </DialogsList>\r\n        </DialogsListCol>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import styled from \"styled-components\";\r\nimport {Col} from \"antd\";\r\n\r\nexport const DialogChatWindow = styled.div`\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  height: 100%;\r\n  border: 1px #ebedee solid;\r\n  border-radius: 2px;\r\n  background-color: #f3f5f7;\r\n`\r\n\r\nexport const DialogMessagesBlock = styled(Col)`\r\n  padding-left: 20px;\r\n  max-height: 515px;\r\n  width: 450px;\r\n`\r\n\r\nexport const NoDialogHeader = styled.h1`\r\n  text-align: center;\r\n  padding-top: 50%;\r\n  color: gray;\r\n`","import styled from \"styled-components\";\r\nimport {CloseCircleOutlined} from \"@ant-design/icons\";\r\n\r\nexport const DialogMessageElement = styled.div<{ viewed: boolean }>`\r\n  background-color: ${props => (!props.viewed && \"#e6eff7\")};\r\n  border-bottom: 1px #dadcdf solid;\r\n  padding: 13px 0 5px 10px;\r\n`\r\n\r\nexport const DialogMessageText = styled.p`\r\n  padding: 0 0 0 5px;\r\n  margin: 0;\r\n  word-wrap: break-word\r\n`\r\n\r\nexport const DeleteMessageButton = styled(CloseCircleOutlined)`\r\n  font-size: 18px;\r\n  float: right;\r\n  padding-right: 10px;\r\n`","import React, {FC} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Avatar} from \"antd\";\r\nimport {DeleteMessageButton, DialogMessageElement, DialogMessageText} from \"./DialogMessage.styled\";\r\nimport {selectDialogUserData} from \"../../../../selectors/dialogs-selectors\";\r\nimport {deleteDialogMessage} from \"../../../../redux/dialogs-reducer\";\r\n\r\ntype DialogMessagePropsType = {\r\n    messageText: string\r\n    senderId: number\r\n    viewed: boolean\r\n    messageId: string\r\n}\r\n\r\nconst DialogMessage: FC<DialogMessagePropsType> = ({messageText, senderId,viewed, messageId}) => {\r\n    const selectedDialogUserData = useSelector(selectDialogUserData(senderId))\r\n    const dispatch = useDispatch()\r\n\r\n    const handleDeleteMessage = () => {\r\n        dispatch(deleteDialogMessage(messageId))\r\n    }\r\n\r\n    return (\r\n        <DialogMessageElement viewed={viewed}>\r\n            <Avatar size={'large'} src={selectedDialogUserData[1]} alt=\"Dialog message\"/>&nbsp;\r\n             <b>{selectedDialogUserData[0]}</b> <DeleteMessageButton onClick={handleDeleteMessage}/>\r\n            <DialogMessageText>{messageText}</DialogMessageText>\r\n        </DialogMessageElement>\r\n    );\r\n}\r\n\r\nexport default React.memo(DialogMessage);","import styled from \"styled-components\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\n\r\nexport const AddDialogMessageFormTextArea = styled(TextArea)`\r\n  height: 30px;\r\n  width: 450px;\r\n`","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectDialogUser} from \"../../../selectors/dialogs-selectors\";\r\nimport React, {useState} from \"react\";\r\nimport {sendDialogMessage} from \"../../../redux/dialogs-reducer\";\r\nimport {Row} from \"antd\";\r\nimport {AddMessageFormElement} from \"../AddMessageForm/AddMessageForm.styled\";\r\nimport {AddDialogMessageFormTextArea} from \"./AddDialogMessageForm.styled\";\r\n\r\nconst AddDialogMessageForm = () => {\r\n    const selectedUser = useSelector(selectDialogUser)\r\n\r\n    const [message, setMessage] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Enter'){\r\n            event.preventDefault();\r\n        }\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendDialogMessage(selectedUser, message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <Row>\r\n                <AddMessageFormElement>\r\n                    <AddDialogMessageFormTextArea\r\n                        placeholder=\"Напишите сообщение...\"\r\n                        autoSize\r\n                        onPressEnter={sendMessageHandler}\r\n                        onChange={(e) => setMessage(e.currentTarget.value)}\r\n                        value={message}>\r\n                    </AddDialogMessageFormTextArea>\r\n                </AddMessageFormElement>\r\n                {/*<AddMessageFormElement>*/}\r\n                {/*    <Button onKeyDown={sendMessageHandler}>*/}\r\n                {/*        <SendOutlined/>*/}\r\n                {/*    </Button>*/}\r\n                {/*</AddMessageFormElement>*/}\r\n            </Row>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddDialogMessageForm;","import {useSelector} from \"react-redux\";\r\nimport {selectDialogMessages, selectDialogUser} from \"../../../selectors/dialogs-selectors\";\r\nimport {DialogChatWindow, DialogMessagesBlock, NoDialogHeader} from \"./DialogsChat.styled\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport DialogMessage from \"./DialogMessage/DialogMessage\";\r\nimport AddDialogMessageForm from \"../../forms/AddDialogMessageForm/AddDialogMessageForm\";\r\nimport {scrollChatHelper} from \"../../../utils/scroll-chat-helper\";\r\n\r\nconst DialogsChat = () => {\r\n    const messages = useSelector(selectDialogMessages)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const selectedUser = useSelector(selectDialogUser)\r\n\r\n    // const refreshDialogMessages = () => {\r\n    //\r\n    // }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n        window.scrollTo(0,0)\r\n    }, [messages, isAutoScroll])\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        scrollChatHelper(e, isAutoScroll, setIsAutoScroll)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DialogMessagesBlock>\r\n                {!!selectedUser ?\r\n                    <>\r\n                        <DialogChatWindow onScroll={scrollHandler}>\r\n                            {messages.length !== 0 ?\r\n                                messages.map(m => <DialogMessage\r\n                                    key={m.id}\r\n                                    messageId={m.id}\r\n                                    messageText={m.body}\r\n                                    senderId={m.senderId}\r\n                                    viewed={m.viewed}\r\n                                />) : <NoDialogHeader>Нет сообщений</NoDialogHeader>\r\n                            }\r\n                            <div ref={messagesAnchorRef}>\r\n\r\n                            </div>\r\n                        </DialogChatWindow>\r\n                        <AddDialogMessageForm/>\r\n                    </>\r\n                    : <NoDialogHeader>\r\n                        Выберите диалог\r\n                    </NoDialogHeader>\r\n                }\r\n            </DialogMessagesBlock>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DialogsChat;","import {Row} from \"antd\"\r\nimport React, {FC, useEffect} from \"react\"\r\nimport {MessageOutlined} from \"@ant-design/icons\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectDialogs} from \"../../selectors/dialogs-selectors\";\r\nimport {getDialogs} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"../../components/Dialogs/Dialogs/Dialogs\";\r\nimport DialogsChat from \"../../components/Dialogs/DialogsChat/DialogsChat\";\r\nimport Preloader from \"../../components/common/Preloader/Preloader\";\r\n\r\nconst DialogsPage: FC = () => {\r\n    const dialogs = useSelector(selectDialogs);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n    }, [dispatch]);\r\n\r\n    if (!dialogs) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2><MessageOutlined/> Мессенджер</h2>\r\n            <Row>\r\n                <Dialogs dialogs={dialogs}/>\r\n                <DialogsChat/>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(DialogsPage);"],"sourceRoot":""}