{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","style","float","fontSize","color","onDoubleClick","width","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","padding","htmlType","onClick","className","formSummeryError","paddingRight","Object","keys","contacts","map","key","s","contact","createField","InputField","Textarea","ProfileData","isOwner","goToEditMode","profileInfoFull","contactTitle","contactValue","paddingLeft","lookingForAJob","lookingForAJobDescription","aboutMe","EditOutlined","to","MessageOutlined","Contact","href","ProfileInfo","saveProfile","savePhoto","dispatch","requestFriends","useDispatch","friendsAmount","useSelector","state","friendsPage","friends","length","Preloader","descriptionBlock","backgroundPicture","md","span","offset","profileImage","size","xs","sm","lg","xl","xxl","src","photos","large","noPhotoPic","profileName","fullName","profileLocation","countryFlag","BelarusFlag","alt","profileFriends","paddingTop","accept","inputPhotoButton","icon","UploadOutlined","profileInfo","initialValues","formData","then","Post","message","likesCount","date","id","userPhoto","profilePage","localLikesCount","setLocalLikesCount","posts","Item","backgroundColor","Meta","avatar","title","description","toISOString","substring","substr","HeartTwoTone","prevCount","twoToneColor","CloseCircleOutlined","actions","deletePost","maxLength400","maxLengthCreator","maxWidth","overflowY","required","paddingBottom","MyPostsMemorized","React","memo","addPost","postsElements","reverse","p","postsBlock","values","newPostText","MyPostsContainer","connect","addPostActionCreator","MyPosts","Profile","profileBlock","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.60c672cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__1OXGY\",\"infoList\":\"ProfileInfo_infoList__2awl3\",\"profileInfoFull\":\"ProfileInfo_profileInfoFull__3FpHA\",\"profileFriends\":\"ProfileInfo_profileFriends__3ge7L\",\"profileInfoRow\":\"ProfileInfo_profileInfoRow__2_LTv\",\"profileInfoRowAfter\":\"ProfileInfo_profileInfoRowAfter__3K8t3\",\"countryFlag\":\"ProfileInfo_countryFlag__1euVb\",\"workingImage\":\"ProfileInfo_workingImage__373HE\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3j-IZ\",\"backgroundPicture\":\"ProfileInfo_backgroundPicture__1sS0a\",\"profileImage\":\"ProfileInfo_profileImage__S-3K4\",\"profileName\":\"ProfileInfo_profileName__3In5k\",\"profileLocation\":\"ProfileInfo_profileLocation__3xODq\",\"inputPhotoButton\":\"ProfileInfo_inputPhotoButton__37gIn\",\"contact\":\"ProfileInfo_contact__elJLR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3koDc\",\"posts\":\"MyPosts_posts__2jhSQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__27q3Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"Profile_profileBlock__eVG3y\"};","import React, {useEffect, useState, FC, ChangeEvent} from 'react';\r\nimport {Input} from \"antd\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n       setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div style={{float: 'right'}}>\r\n                <span style={{fontSize: '17px', color:'#ffffff'}} onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <Input\r\n                    style={{width: '150px', float: 'right'}}\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, {FC} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {createField, GetStringKeys, InputField, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Button, Col, Input, Row} from \"antd\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div style={{width: '1000px', padding: '23px 0 0 30px'}}>\r\n                <div>\r\n                    <Button htmlType={'submit'} onClick={() => {\r\n                    }}>Сохранить</Button>\r\n                </div>\r\n                {error &&\r\n                <div className={style.formSummeryError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <Row>\r\n                        <b>Контакты:</b>\r\n                        <Col style={{paddingRight: 20}}>\r\n                            <div>\r\n                                 {Object.keys(profile.contacts).map(key => {\r\n                                return <div key={key} className={s.contact}>\r\n                                    {/*todo: do some solution fot embedded objects*/}\r\n                                    <b>{key}: {createField(key, \"contacts.\" + key, [], InputField)}</b>\r\n                                </div>\r\n                            })}\r\n                            </div>\r\n                        </Col>\r\n                        <Col>\r\n                            <div>\r\n                                <b>Имя</b>\r\n                                {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], InputField)}\r\n                            </div>\r\n                            <div>\r\n                                <b>Общая информация</b>\r\n                                {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n                            </div>\r\n                            <div>\r\n                                <b>Образование</b>\r\n                                {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], InputField)}\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport noPhotoPic from \"../../../assets/images/user.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\nimport {Avatar, Button, Col, Image, Row, Upload} from \"antd\";\r\nimport BelarusFlag from './../../../assets/images/belarus.svg'\r\nimport {EditOutlined, MessageOutlined, UploadOutlined} from \"@ant-design/icons\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {requestFriends} from \"../../../redux/friends-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    useEffect(() => {\r\n        dispatch(requestFriends());\r\n    },[])\r\n\r\n    const dispatch = useDispatch()\r\n    const friendsAmount = useSelector((state: AppStateType) => state.friendsPage.friends).length\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            console.log(e.target.files[0])\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.backgroundPicture}>\r\n                    <Row>\r\n                        <Col md={{span: 5, offset: 2}}>\r\n                            <Avatar\r\n                                className={s.profileImage}\r\n                                size={{xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 150}}\r\n                                src={<Image src={profile.photos.large || noPhotoPic}/>}\r\n                            />,\r\n                        </Col>\r\n                        <Col md={{span: 7}}>\r\n                            <div className={s.profileName}>{profile.fullName}</div>\r\n                            <div className={s.profileLocation}>Беларусь &nbsp;<img className={s.countryFlag}\r\n                                                                                   src={BelarusFlag}\r\n                                                                                   alt={'country flag'}/></div>\r\n                            <div className={s.profileLocation}>Гомель</div>\r\n                            <div className={s.profileFriends}>{friendsAmount} друзей</div>\r\n                            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n                {/*{isOwner &&*/}\r\n                {/*<input type='file' onChange={onMainPhotoSelected} className={s.inputPhotoButton}/>*/}\r\n                {/*}*/}\r\n\r\n                <div style={{paddingTop: '15px'}}>\r\n                    {isOwner && <Upload onChange={() => {\r\n                    }} accept={'image/*'} className={s.inputPhotoButton}>\r\n                        <Button icon={<UploadOutlined/>}>Обновить фотографию</Button>\r\n                    </Upload>}\r\n                </div>\r\n\r\n                <br/>\r\n                <div className={s.profileInfo}>\r\n                    {editMode\r\n                        ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            <Row className={s.profileInfoFull}>\r\n                <Col>\r\n                    <Row>\r\n                        <span>Контакты:</span>\r\n                    </Row>\r\n                    <Row className={s.contact}>\r\n                        <span>Мобильный телефон:&nbsp;</span> +375 (33) 355-29-71\r\n                    </Row>\r\n                    <Col>\r\n                        {\r\n                            Object\r\n                                .keys(profile.contacts)\r\n                                .map((key) => {\r\n                                    return profile.contacts && <Contact key={key} contactTitle={key}\r\n                                                    contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                                })\r\n                        }\r\n                    </Col>\r\n                </Col>\r\n                <Col style={{paddingLeft: 50}}>\r\n                    <Row>\r\n                        <span>Дата рождения:&nbsp;</span> 21.06.2000\r\n                    </Row>\r\n                    <Row>\r\n                        <span>Ищу работу: </span>\r\n                        <span>{profile.lookingForAJob ? \"Да\" : \"Нет\"}</span>\r\n                    </Row>\r\n                    {profile.lookingForAJob &&\r\n                    <Col>\r\n                        <span>Общая информация:</span> {profile.lookingForAJobDescription}\r\n                    </Col>\r\n                    }\r\n                    <Col>\r\n                        <span>Образование:</span> {profile.aboutMe}\r\n                    </Col>\r\n                    {isOwner ?\r\n                        <Row style={{padding: '20px 0 0 15px'}}>\r\n                            <Button onClick={goToEditMode}><EditOutlined/> Редактировать профиль</Button>\r\n                        </Row> : null}\r\n                    {!isOwner ?\r\n                        <Row style={{padding: '20px 0 0 15px'}}>\r\n                            <Button><NavLink to={'/chat'}><MessageOutlined/> Написать сообщение</NavLink></Button>\r\n                        </Row> : null}\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <Row className={s.contact}>\r\n            <Col>{contactTitle}: &nbsp;\r\n                <a style={{float: 'right'}} href={contactValue}>{contactValue}</a>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React, {useState} from 'react';\r\nimport s from './Post.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Avatar, Image, List} from 'antd';\r\nimport {CloseCircleOutlined, HeartTwoTone} from \"@ant-design/icons\";\r\nimport {actions} from '../../../../redux/profile-reducer';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n    date: Date\r\n    id: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({message, likesCount, date, id}) => {\r\n\r\n    // @ts-ignore\r\n    const userPhoto: string | undefined = useSelector((state: AppStateType) => state.profilePage.profile?.photos.large)\r\n\r\n    const [localLikesCount, setLocalLikesCount] = useState(likesCount)\r\n    let dispatch = useDispatch();\r\n\r\n    const deletePostCallback = () => {\r\n        dispatch(actions.deletePost(id));\r\n    }\r\n\r\n    return (\r\n        <div className={s.posts}>\r\n\r\n            <List size={'large'}>\r\n                <List.Item style={{width: 700, backgroundColor: \"#e3e5e9\"}}>\r\n\r\n                    <List.Item.Meta\r\n                        avatar={<Avatar src={userPhoto} size={{xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 80}}/>}\r\n                        title={message}\r\n                        description={<span>{date.toISOString().substring(0, 10) + ' ' + date.toISOString().substr(11, 5)} <div style={{paddingTop: 3}}><HeartTwoTone onClick={() => setLocalLikesCount(prevCount => prevCount + 1)}\r\n                                                                                                                                                              twoToneColor=\"#1890ff\"/> {localLikesCount}</div></span>}\r\n                    />\r\n                    <CloseCircleOutlined style={{float: 'right', fontSize: 18}} onClick={deletePostCallback}/>\r\n\r\n\r\n                </List.Item>\r\n            </List>\r\n            <br/>\r\n\r\n            {/*<div className={s.item} style={{fontSize: '16px'}}>*/}\r\n            {/*    <CloseCircleOutlined style={{float: 'right'}} onClick={deletePostCallback}/>*/}\r\n            {/*    <Image src={userPhoto} preview={false} style={{borderRadius: '40px'}}/>*/}\r\n            {/*    <span>{message}</span>*/}\r\n            {/*    <div>*/}\r\n            {/*        /!*<span>{likesCount} <HeartTwoTone  twoToneColor=\"#1890ff\"/> </span>*!/*/}\r\n            {/*        {localLikesCount} <span><HeartTwoTone onClick={() => setLocalLikesCount(prevCount => prevCount + 1)}*/}\r\n            {/*                                              twoToneColor=\"#1890ff\"/></span>*/}\r\n            {/*        <span>{date.toISOString().substring(0, 10)} {date.toISOString().substr(11, 5)}</span>*/}\r\n            {/*    </div>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;\r\n\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {Button, Form} from \"antd\";\r\n\r\nconst maxLength400 = maxLengthCreator(400);\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype PropsType = {}\r\n\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\n\r\nexport const AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType & PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <div style={{width: '400px', maxWidth: '400px', overflowY: 'auto'}}>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    {createField<AddPostFormValuesKeysType>('Что у вас нового?', 'newPostText', [required, maxLength400], Textarea)}\r\n                </div>\r\n                <br/>\r\n                <div style={{paddingBottom: 11}}>\r\n                   <Button htmlType=\"submit\">Опубликовать</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-new-post-form'})(AddNewPostForm);","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"./AddNewPostForm/AddNewPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MapPropsType & DispatchPropsType> = ({posts, addPost}) => {\r\n\r\n    let postsElements = posts.reverse().map((p) => <Post message={p.message} key={p.id} id={p.id} likesCount={p.likesCount} date={p.date}/>);\r\n\r\n    let addNewPost = (values: AddPostFormValuesType) => {\r\n        addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>Мои записи</h3>\r\n            <br/>\r\n            <AddNewPostForm onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>\r\n(mapStateToProps,\r\n    {addPost: actions.addPostActionCreator})\r\n(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {FC} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport s from './Profile.module.css'\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    status: string\r\n    profile: ProfileType | null\r\n\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst Profile: FC<PropsType>= ({savePhoto, isOwner, profile, status, saveProfile, updateStatus}) => {\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            <ProfileInfo\r\n                savePhoto={savePhoto}\r\n                isOwner={isOwner}\r\n                profile={profile}\r\n                status={status}\r\n                saveProfile={saveProfile}\r\n                updateStatus={updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;\r\n\r\n\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"Id should exists in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType , prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}